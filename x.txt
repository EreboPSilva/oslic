english
jurabib
citefull=first
 
 
 
 
 
 
 
 
authorformat=firstnotreversed
authorformat=italic
titleformat=all,colonsep
commabeforerest
ibidem=strict
  
  
pages=format
bibformat=compress
biblikecite
[2]
(= #2
#1), [Vol./No.] #1)
 
rein-cke
Rein-cke
OS-LiC
ori-gi-nal
bi-na-ry
Li-cence
li-cence
arabic
1
[1.5em]1.5em1.5em) 
arrows
shapes,snakes
positioning
decorations.text
trees
matrix
footnotechapter
5
5
bookmarks=true,breaklinks=true,colorlinks=true,citecolor=blue,draft=false
*
Version 0.99.3
A Practical Guide for Developers, Managers, OS Experts, 
and Companies 
Open Source License Compendium
How to Achieve Open Source License Compliance
 
Karsten ReinckeDeutsche Telekom AG, Products  Innovation, 
T-Online-Allee 1, 64295 Darmstadt
Greg SharpeDeutsche Telekom AG, Telekom Deutschland GmbH, 
Landgrabenweg, Bonn
 
The Open Source Community is a swarm: it is more powerful than a set of
arbritarily selected experts. We are proud to have its support. Gladly we thank
(in alphabetical order):
Eitan Adler,
Stefan Altmeyer (Deutsche Telekom AG),
Ronald Dauster,
John Dobson, 
Steffen Härtlein, 
Ta'Id Holmes (Deutsche Telekom AG), 
Michael Kern (Deutsche Telekom AG),
Michael Machado (Deutsche Telekom AG),
Thorsten Müller (Deutsche Telekom AG),
Tanja Neske (Deutsche Telekom AG),
Oliver Podebradt (Deutsche Telekom AG),
Thomas Quiehl (Deutsche Telekom AG),
Peter Schichl (Deutsche Telekom AG),
Michael Schierl,
Helene Tamer (T-Systems Internationl AG),
Bernhard Tsai (Deutsche Telekom AG),
Thomas Weißschuh (Amadeus Germany GmbH),
additionally all the feedback giving participants of the 
European Legal  Licensing Workshop 2013 in Amstardam
and all the others
*Roadmap for Release 1.0 
  Insert task lists for AGPL, AL, AFL, CDDL, MPL-1.[01], MS-RL, OSL
  
  Improve / complete the exposition of the concept of a derivative work
    in the context of software development
  Important: Explain how to deal with modifications that transform
    a proapse into a snimoli and vice versa.
  Discuss license compatibility
  Explain the relationship between open source and earning money
  Improve the chapter concerning myths about open source
  Replace / erase the prolegomena appropriately
  Rewrite the BSD discussion at the end of the task list 
  Review the PHP discussion at the end of the task list
  Review the PostgreSQL discussion at the end of the task list
  Incoporate the secondary literature which has indirectly been used
  Update the literature list
*Disclaimer
This book shall be thoroughly developed---together with the open source
community. At the end it shall deliver reliable information. But nevertheless,
the  can not offer more than the opinion(s) of its authors and
contributors. It is only one voice of the chorus discussing the open source
licenses. For protecting the authors and contributors from charges and claims of
indemnification we adopt the lightly modified GPL3 disclaimer:
, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE TEXT “AS IS” WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE  IS
WITH YOU. SHOULD THE  PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR OR CORRECTION.
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY
COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE  AS
PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE  (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED
INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE
 TO COOPERATE WITH ANY OTHER TOOLS), EVEN IF SUCH HOLDER OR OTHER PARTY
HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
Particularly, it must be highlighted that - referred to your solitary
case - the  can not and shall not replace a legal review or a legal advice
by lawyers. The  is only dealing with prototypic use cases. So, it may
inspire developers, managers, open source experts, and companies to find good
solutions which they finally should let be reviewed by legal
counselors. 
Introduction
This chapter briefly describes the idea behind the , the way it should be
used and the way it can be read---which is indeed not quite the same.
This book focuses on just one issue: What needs to be done in order to act
in accordance with the licenses of those open source software we use?
The Open Source License Compendium aims at reliably answering this
question---in a simple and easy to understand manner. However, it is not just
another book on open source in general. 
 The intention is, rather, for it to be a tool for simplifying the
activities for achieving license conformity.
This compendium was created out of necessity at Deutsche Telekom AG to
counter a challenge some of its software developers and project managers were
facing: Of course, the company itself wants to behave as license compliantly as
its employees, but, unfortunately, they could not find a reference text which
simply lists what precisely must be done in order to comply with the license of
that piece of open source being used.
As some of these co-workers in Telekom projects, even we---the initial authors
of the not want to become open source license experts only for being
able to use open source software in accordance with their respective licenses. We
did not want to become lawyers. We just wanted to do more efficiently, what
in those days claimed much time and many resources. We were searching for clear
guidance instead of having to determine a correct way through the jungle of open
source licenses---over and over again, project for project. We loved using the
high-quality open source software to improve our performance. We liked using it
legally. But we did not like to laboriously discuss the legal constraints of the
many and different open source licenses.
What we needed was an easy-to-use handout which would lead us without any
detours to executable lists of work items. We wished to obtain to-do lists,
tailored to our usecases and our licenses. We needed reliable lists of tasks we
only had to execute for being sure that we were acting in accordance with the
open source license. When we started out, such a compendium did not exist.
For solving this problem our company took three decisions:
The first decision our company arrived at was to support a small group of
employees to act as a board of open source license experts: They should
offer a service for the whole company. Projects, managers, and developers should
be able to ask this board what they have to do for complying with a specific
open Source License under specific circumstances. And this board should answer
with authoritative to-do lists whose executions would assure that the requestors
are acting according to the corresponding open source licenses. The idea behind
this decision was simple. It would save cost and increase quality if one had one
central group of experts instead of being obliged to select (and to train)
developers---over and over again, for every new project. So, the OSRB 
(the Telekom Open Source Review Board) was founded as an internal expert
group---as a self-organizing, bottom-up driven community.
The second decision our company took was to allow this Telekom OSRB to
collect their results systematically---in the form of a reusable compendium.
The idea behind this decision was also simple: The more the internal service
became known, the more the workload would increase: the more work, the more
resources, the more costs. So, such a compendium should save costs and enable
the requestors to find answers by themselves without becoming license experts:
For all default cases, they should find an answer in the compendium instead of
having to request that their work is analyzed by the OSRB. Thus, the planned
Telekom Open Source License Compendium will prevent the need
to increase the size of the OSRB in the future.
The third decision our company reached was to allow the Telekom OSRB to
create the compendium in the same mode of cooperation that open source projects
usually use. Again, a simple reason evoked this ruling: If in the future---as a
rule---not a reviewing OSRB, but a simple manual should assure the open 
source license compliant behavior of projects, programmers, and managers, this
book had of course to be particularly reliable. There is a known feature of the
open source working model: the ongoing review by the cooperating community
increases the quality. Therefore, the decision not only to write an internal
`Telekom handout,' but to enable the whole community to use, modify, and 
redistribute a broader Open Source License Compendium was a decision for
improving quality. Consequently, the OSRB decided to publish the
 as a set of sources, publicly available via the open
repository GitHub. 
  And it licensed the  under Creative
Commons Attribution-ShareAlike 3.0 Germany License. 
But to publish the  as a free book has another important
connotation---at least for the Telekom OSRB: It is also intended to be an
appreciative giving back to the open source community which has
enriched and simplified the life of so many employees and companies over so many
years. 
Altogether, the  follows five principles:
  [To-do lists as the core, discussions around them] Based on a simple
  form for gathering information concerning the use of a piece of open
  source software and its license, the  shall offer an easy to use finder
  taking the requestor to the respective to-do list for ensuring license
  conformity. In addition, all these elements of the  should comprehensibly
  be introduced and discussed without disturbing the usage itself.
  [Quotations with thoroughly specified sources]
  The  shall be revisable and reliable. It shall comprehensibly argue and
  explicitly specify why it adopts which information, from whom, in which
  version, and why. 
 
  [Not clearing the forest, but cutting a swath] The  has to deal with
  licenses and their legal aspects, no doubt. But it shall not discuss all
  details of every aspect. It shall focus on one possible way to act according
  to a license in a specific usecase---even if it is known that there might be
  alternatives. 
  
  [Take the license text seriously!] The  shall not give general
  lectures on legal discussions, much less shall it participate in them. It
  shall only find one dependable way for each license and each usecase to comply
  with the license. The main source for this analysis shall be the exact reading
  of the open source licenses themselves---based on and supported by the
  interpretation of benevolent lawyers and rationally arguing software
  developers. The  shall respect that open source licenses are written for
  software developers (and sometimes by developers).
  
  [Trust the swarm!] The  shall be open for improvements and
  adjustments encouraged and stimulated also by other people than employees of
  Deutsche Telekom AG.
Based on these principles the  offers two methods for being used:
First and foremost the readers expect to simply and quickly find those to-do
lists fitting their needs. Here is the respective process:
   
decision = [diamond, draw, fill=gray!20, 
    text width=4.5em, text badly centered, node distance=4cm, inner sep=0pt]
preparation = [rectangle, draw, fill=gray!30, 
    text width=11.5em, text centered, rounded corners, minimum height=3em]
 
lprocs = [rectangle, draw, fill=gray!40, 
    text width=11.5em, text centered, rounded corners, minimum height=3em]
    
processing = [rectangle, draw, fill=gray!40, node distance=2.4cm,
    text width=15em, text centered, rounded corners, minimum height=4em]
    
line = [draw, -latex']
cloud = [draw, ellipse, text centered, fill=gray!10]
 
    
[node distance =1.5cm, auto]
    
    
  [cloud, anchor=south, text width=7em] (start) at (1,10) 
     open source 
 components;
  [preparation, below of=start] (select) 
    select next open source component;     
  [preparation,  below of=select] (analyze) 
    analyze its role as part of software system;
     
  [preparation,  below of=analyze] (determine) 
    determine usage of final software product / service;     
    
  [preparation,  below of=determine] (detect) 
    detect respective open source license;
    
  [lprocs,  below of=detect] (fillin)
    fill in the 5 query form ( p.
    );
    
  [decision, right of=fillin] (success) success?;
  
  [processing,  below of=success] (traverse)
    traverse taxonomic Open Source Use Case Finder
    ( )  jump to indicated
    Open Source Use Case page (
    ff.);
    
  [processing,  below of=traverse] (find)
    Determine page of license and use case specific to-do
    list being presented in license specific chapter;
 
  [processing,  below of=find] (process)
    Jump to indicated page  process license and use case specific
    to-do list ( ff.);
    
  [decision, right of=process] (other) more?;
  [cloud, right of=other, anchor=west] (stop) stop;
  [line] (start) -- (select);  
     
  [line] (select) -- (analyze);      
  [line] (analyze) -- (determine);
  [line] (determine) -- (detect);       
  [line] (detect) -- (fillin);
  [line] (fillin) -- (success);
  
  [line] (success) - node [near start] no (analyze);
  [line] (success) -- node [near start] yes (traverse);             
  
  [line] (traverse) -- (find);              
  [line] (find) -- (process);
  [line] (process) -- (other);
  [line] (other) - node [near start] yes (select);
  [line] (other) -- node [near start] no (stop);                      
Second, the readers might wish to comprehend the whole analysis. So, we briefly
discuss open source license taxonomies as the basis for a license compliant
behavior. 
  We consider some side effects of acting
according to the open source licenses. 
 Finally,
we study the structure of open source use cases. 
So, let us close our introduction by using, modifying, and (re)distributing a
well known wish of a well known man: Happy (Legally) Hacking.
Open Source: The Same Idea, Different Licenses
This chapter describes different license
models which follow the common idea of free open source software. We want to
discuss existing ways of grouping licenses to underline the limits of building
such clusters: These groups are often used as `virtual prototypical licenses'
which are supposed to provide simplified conditions for acting according to
the respective real license instances. But one has to meet the requirements of a
specific license, not one's own generalized idea of a set of licenses.
Nonetheless, we, too,  offer a new way of structuring the world of the open
source licenses. We will use a novel set of grouping criteria by referring
to the common intended purpose of licenses: each license is designed to protect
something or someone against something or someone. Following this pattern, we
can indeed summarize all Open Source Licenses in a comparable way.
Grouping open source licenses 
 is commonly done.
Even the set of the open source licenses[cf.][
wp]OSI2012b itself is already a cluster being established by a set of grouping
criteria: The distribution terms of each software license that intends
to become an open source license [] must comply with the []
criteria of the Open Source Definition,[cf.][
wp]OSI2012a maintained by the Open Source
Initiative[cf.][wp]OSI2012c and often abbreviated as
OSD. So, this OSD demarcates `the group of [potential] open source
licenses' against `the group of not open sources licenses.' 
Another way to cluster the Free Software Licenses is specified by the
Free Software Definition. This FSD contains four conditions
which must be met by any free software license: any FSD compliant license must
grant the freedom to run a program, for any purpose [],
the freedom to study how it works, and adapt it to (one's) needs
[], the freedom to redistribute copies [], and finally
the freedom to improve the program, and release your improvements
[][cf.][41]Stallman1996a Surprisingly this definition
implies that the requirement the sourcecode must be openly accessible
is `only' a derived condition. If the freedom to make changes and the
freedom to publish improved versions shall be meaningful, then the
access to the source code of the program is a prerequisite.
Therefore, accessibility of source code is a necessary condition for
free software.[cf.][41]Stallman1996a
The difference between the OSD and the FSD has often been described as a
difference of emphasis:
   
Although both definitions []
(cover) almost exactly the same range of software, the Free Software
Foundation---as it is said---prefers [] (to emphazise) the
idea of freedom [] while the OSI wants to underline the
philosophically indifferent development methodology.[pars pro
toto: cf.][232]Fogel2006a
A third method to group of free software and free software licenses is specified
by the Debian Free Software Guideline, which is embedded into the
Debian Social Contract. This DFSG contains nine defining
criteria, which---as Debian itself says---have been [] adopted
by the free[sic!] software community as the basis of the Open Source
Definition.[cf.][wp]DFSG2013a
A rough understanding of these methods might result in the conclusion that these
three definitions are extensionally equal and only differ intensionally.
But that is not true. To unveil the differences, let us compare the clusters
OSI approved licenses, OSD compliant licenses, DFSG
compliant licenses, and FSD compliant licenses extensionally, by asking
whether they could establish different sets of licenses. 
First, the difference most easy to determine is that of an unidirectional
inclusion: By definition, the OSI approved licenses and the OSD
compliant licenses meet the requirements of the OSD.[cf.][
wp]OSI2012a But only the OSI approved licenses have successfully
passed the OSI process[cf.][wp]OSI2012a and therefore are
officially listed as open source licenses.[cf.][
wp]OSI2012b
Hence, on the one hand, OSI approved licenses are
open source licenses and vice versa. On the other hand, both---the
OSI approved licenses and the open source licenses---are
OSD compliant licenses, but not vice versa.
Second, a similar argumentation allows us to distinguish the DFSG compliant
licenses from the OSI approved licenses. As it is stated, the OSD
[] is based on the Debian Free Software Guideline and any
license that meets one definition almost meets the
other.[cf.][233]Fogel2006a But then again, meeting the definition is
not enough for being an official open source license: the license has to be
approved by the OSI.[cf.][wp]OSI2012b Thus, it follows that
all OSI approved licenses are also DFSG compliant licenses, but
not vice versa.
Third, by ignoring the few exceptions which have appeared
over the years,[cf.][233]Fogel2006a it can be said that,
because of their `kinsmanlike' relation, at least the OSD compliant
licenses are also DFSG compliant licenses and vice versa.
Last but not least, it must be stated that the (potential) set of free software
licenses must be greater than all the other three sets: On the one side, the FSD
requires that a license of free software must not only allow to read the
software, but must also permit to use, to modify, and to distribute
it.[cf.][41]Stallman1996a These conditions are covered by at least
the first three paragraphs of the OSD concerning the topics Free
Redistribution, Source Code, and Derived
Works.[cf.][wp]OSI2012a On the other side, the OSD contains
at least some requirements which are not mentioned by the FSD and which
nevertheless must be met by a license in order to be qualified as an OSD
compliant license. 
 It
follows then that there may exist licenses which fulfill all conditions of the
FSD and nevertheless do not fulfill at least some conditions of the
OSD. 
 So, the set of all (potential) Free Software Licenses must be
greater than the set of all (potential) open source licenses and greater
than the set of OSD compliant licenses.
All in all, we can visualize the situation as follows:
[ellipse,minimum height=5.8cm,minimum width=11.6cm,draw,fill=gray!10] (l0210) at (5,5)
 ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=All Software Licenses,
              postaction=decorate] (0,6.1) arc (120:60:10cm);
[ellipse,minimum height=4.4cm,minimum width=10cm,draw,fill=gray!20] (l0210) at (5,5)
 ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=FSD Compliant Licenses,
              postaction=decorate] (0,5.4) arc (120:60:10cm);
              
[ellipse,minimum height=3cm,minimum width=8.4cm,draw,fill=gray!30] (l0210) at (5,5)
 ;
             
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=OSD Compliant Licenses,
              postaction=decorate] (0,4.7) arc (120:60:10cm);
              
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=DFSG Compliant Licenses,
              postaction=decorate] (0,5) arc (240:300:10cm);
          
[ellipse,text width=4.4cm, text centered,minimum height=1.6cm,minimum width=6cm,draw,fill=gray!40] (l0210) at (5,5)
 OSI approved licenses = 
 open source licenses
;
It should be clear without longer explanations that these clusters don't allow
to extrapolate to the correct compliant behaviour according to the open source
licenses: On the one hand, all larger clusters do not talk about the open
source licenses. On the other hand, the open source license cluster
itself only collects its elements on the basis of the OSD which does not stipulate
concrete license fulfilling actions for the licensee.
The next level of clustering open source licenses concerns the inner
structure of these OSI approved licenses. Even the OSI itself has recently
discussed whether a different way of grouping the listed licenses would better fit
the needs of the visitors of the OSI site.[cf.][wp]OSI2013a
And finally the OSI came up with the categories popular and widely used
(licenses) or with strong communities, special purpose licenses,
other/miscellaneous licenses, licenses that are redundant
with more popular licenses, non-reusable licenses, superseded
licenses, licenses that have been voluntarily retired, and 
uncategorized licenses.[cf.][wp]OSI2013b
Another way to structure the field of open source licenses is to think in
types of open source licenses by grouping the academic
licenses, named as such because they were originally created by academic
institutions,[cf.][69]Rosen2005a the reciprocal
licenses, named as such because they [] require the
distributors of derivative works to distribute those works under same
license including the requirement that the source code of those derivative works
be published,[cf.][70]Rosen2005a the standard
licenses, named as such because they refer to the reusability of
industry standards,[cf.][70]Rosen2005a and the
content licenses, named as such because they refer to
[] other than software, such as music art, film, literary works
and so on.[cf.][71]Rosen2005a
Both kinds of taxonomies directly help to find the relevant licenses that should
be used for new (software) projects. But again: none of these categories 
allows us to infer license compliant behaviour, because the categories are
mostly defined based on license external criteria: whether a license is
published by a specific kind of organization or whether a license deals with
industry standards or other kind of works than software inherently does not
determine a license fulfilling behaviour.
Only the act of grouping into academic licenses and 
reciprocal licenses touches the idea of license fulfillment
tasks, if one---as it has been done---expands the definition of the  
academic licenses by the specification that these licenses
[] allow the software to be used for any purpose whatsoever with
no obligation on the part of the licensee to distribute the source code of
derivative works.[cf.][71]Rosen2005a With respect to this additional
specification, the clusters academic licenses and the
reciprocal licenses indeed might be referred as the
main categories of (open source)
licenses:[cf.][179]Rosen2005a By definition, they are constituting
not only a contrary, but contradictory opposite. However, it must  be kept in
mind that they constitute an inherent antagonism, an antinomy inside of the set
of open source licenses. 
Similiar in nature to the clustering into academic licenses and 
reciprocal licenses is the grouping into permissive licenses, 
weak copyleft licenses, and strong copyleft licenses: 
Even Wikipedia uses the term permissive free software licence in the
meaning of a class of free software licence[s] with minimal
requirements about how the software can be redistributed and contrasts
them with thecopyleft licences as those with reciprocity
/share-alike requirements.[cf.][wp]wpPermLic2013a
Some other authors name the set of academic licenses the
permissive licenses and specify the reciprocal licenses as
restrictive licenses, because in this case---as a consequence of the
embedded copyleft effect---the source code must be published in case
of modifications. They also introduce the subset of strong
restrictive licenses which additionally require that an (overarching)
derivative work must be published under the same license.[pars pro toto
cf.][57]Buchtala2007a The next refinement of such clustering concepts
directly uses the categories [open source] licenses with a strict
copyleft clause,[Originally stated as Lizenzen mit einer
strengen Copyleft-Klausel. Cf.][24]JaeMet2011a [open source]
licenses with a restricted copyleft clause,[Originally stated as
Lizenzen mit einer beschränkten Copyleft-Klausel.
Cf.][71]JaeMet2011a and [open source] licenses without any copyleft
clause.[Originally stated as Lizenzen ohne Copyleft-Klausel.
Cf.][83]JaeMet2011a Finally, this viewpoint can directly be mapped to the
categories strong copyleft and weak copyleft: While on the one
hand, only changes to the weak-copylefted software itself become
subject to the copyleft provisions of such a license, [and] not changes to the
software that links to it, on the other hand, the strong copyleft
states [] that the copyleft provisions can be efficiently imposed
on all kinds of derived works.[cf.][wp]wpCopyleft2013a
Based on this approach to an adequate clustering and labeling,
   
we can develop the following picture:
[ellipse,minimum height=8.5cm,minimum width=14cm,draw,fill=gray!10] (l0100) at (6.8,6.8)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= OSI approved licenses,
              postaction=decorate] (-0.8,6.5) arc (142:38:9.5cm);
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=open source licenses,
              postaction=decorate] (-0.8,6.5) arc (218:322:9.5cm);
              
[ellipse,minimum height=6.2cm,minimum width=4cm,draw,fill=gray!20] (l0100) at (2.75,6.8)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= permissive licenses,
              postaction=decorate] (0.9,7.4) arc (180:0:1.8cm);
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0101) at (1.9,7.7)  Apache-2.0;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0102) at (3.6,7.7)  BSD-X-Clause;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0103) at (1.9,6.7)   MIT;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0104) at (3.6,6.7)   MS-PL;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0105) at (1.9,5.7)   Post-greSQL;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0106) at (3.6,5.7)   PHP-3.X;
[ellipse,minimum height=6cm,minimum width=8.5cm,draw,fill=gray!20] (l0200) at (9.2,6.5)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= copyleft licenses,
              postaction=decorate] (7.5,8.5) arc (120:60:4cm);
[ellipse,minimum height=4.5cm,minimum width=4.2cm,draw,fill=gray!30] (l0210) at (7.45,6.5)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= weak copyleft licenses,
              postaction=decorate] (5.4,6.2) arc (180:0:2cm);
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0211) at (6.7,6.9)   EPL-1.X;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0212) at (8.2,6.9)   EUPL-1.X;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0213) at (6.7,5.7)   LGPL-Y.Y;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0214) at (8.2,5.7)   MPL-X.Y;
[ellipse,minimum height=4.5cm,minimum width=3cm,draw,fill=gray!30] (l0220) at (11.4,6.5)
  ;
 
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= strong copyleft,
              postaction=decorate] (10.4,7) arc (180:0:1cm);
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= licenses,
              postaction=decorate] (10.4,5.4) arc (180:360:1cm);        
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0221) at (11.4,6.8)   GPL-X.Y;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0222) at (11.4,5.6)   AGPL-3.X;
This extensionally based clarification of a possible open source license
taxonomy is probably well-known and often---more or less explicitly---
referred to. 
 Unfortunately, this taxonomy
still contains some misleading underlying messages:
Permissive has a very positive connotation. So, the antinomy of
permissive licenses versus copyleft licenses implicitly signals,
that the permissive licenses are in some sense better than the
copyleft licenses. Naturally, this `conclusion' is evoked by
confusing the extensional definition and the intensional power of the labels.
But that is the way we---the human beings---like to think. 
Anyway, this underlying message is not necessarily `wrong.' It might be
convenient for those people or companies who only want to use open source
software without being restricted by the obligation to give something
back as it has been introduced by the `copyleft.' 
 But there might be other people and
companies who emphasize the protecting effect of the copyleft licenses. And,
indeed, at least the open source license 
 GPL 
 has initially been developed to protect the freedom,
to enable the developers to help their neighbours, and to get the
modifications back:
   
So, Copyleft is defined
as a [] method for making a program free software and requiring
all modified and extended versions of the program to be free software as
well.[cf.][89]Stallman1996c It is a method 
 by which [] the code and the
freedoms become legally inseparable.[cf.][89]Stallman1996c Because
of these disparate interests of hoping not to be restricted and hoping to be
protected, it could be helpful to find a better label---an impartial name for
the cluster of permissive licenses. But until that time, we should at
least know that this taxonomy still contains an underlying declassing message.
The other misleading interpretation is---counter-intuitively---prompted by using
the concept of `copyleft licenses.' By referring to a cluster of copyleft
licenses as the opposite of the permissive licenses, one implicitly also
sends two messages: First, that republishing one's own modifications is
sufficient to comply with the copyleft licenses. And, second, that the
permissive licenses do not require anything to be done for obtaining the
right to use the software. Even if one does not wish to evoke such an
interpretation, we---the human beings---tend to take the things as simple as
possible. 
 But because of several aspects, this understanding of the antinomy of
copyleft licenses and permissive licenses is too misleading for
taking it as a serious generalization:
On the one hand, even the `strongly copylefted' GPL imposes other obligations
in addtion to republishing derivative works. For example, it also requires
giving [] any other recipients of the [GPL licensed] Program a
copy of this License along with the Program.[cf.][wp.
§1]Gpl20OsiLicense1991a Furthermore, the `weakly copylefted' licenses require
also more and different criteria to be fulfilled for acting in accordance with
these licenses. For example, the EUPL requires that the licensor, who does not
directly deliver the binaries together with the sourcecode, must offer a
sourcecode version of his work free of charge, 
while the MPL requires that under the same circumstances a recipient
[] can obtain a copy of such Source Code Form [] at a
charge no more than the cost of distribution to the recipient
[][cf.][section 3.2.a]Mpl20OsiLicense2013a
And last but not least, also the permissive licenses require tasks 
to be fulfilled for a license compliant usage---moreover, they also require
different things. For example, the BSD license demands that the
(re)distributions [] must (retain [and/or]) reproduce the above copyright
notice []. Because of the structure of the copyright notice,
this compulsory notice implies that the authors / copyright holders of the
software must be publicly named.[cf.][wp]BsdLicense2Clause As
opposed to this, the Apache License requires that if the Work includes
a NOTICE text file as part of its distribution, then any Derivative Works that
You distribute must include a readable copy of the attribution notices contained
within such NOTICE file which often means that you have to present central
parts of such files publicly[cf.][wp. section
4.4]Apl20OsiLicense2004a---parts which can contain much more information than
only the names of the authors or copyright holders.
So, no doubt---and contrary to the intuitive interpretation of this taxonomy---
each open source license must be fulfilled by some actions, even the most
permissive one. And for ascertaining these tasks, one has to look into these
licenses themselves, not the generalized concepts of licenses taxonomies. Hence
again, we have to state that even this well known type of grouping of open
source licenses does not allow to derive a specific license compliant behavior:
The taxonomy might be appropriate, if one wants to live with the implicit
messages and generalizations of some of its concepts. But the taxonomy is not an
adequate tool to determine, what one has to do for fulfilling an open
source license. A license compliant behaviour for obtaining the right to use a
specific piece of open source software must be based on the concrete
open source license by which the licensor has licensed the software.
There is no shortcut.
Nevertheless, human beings need generalizing and structuring viewpoints for
enabling themselves to talk about a domain---even if they finally have to
regard the single objects of the domain for specific purposes. We think that
there is a subtler method to regard and to structure the domain of open
source licenses. So, we want to offer this other possibility to cluster the
open source licenses: 
We think that, in general, licenses have a common purpose: they should protect
someone or something against something. The structure of this task is based on
the nature of the word `protect' which is a trivalent verb: it links someone or
something who protects, to someone or something who is protected and both
combined to something against which the protector protects and against the other
one is protected. Licenses in general do that. Moreover, to protect
the rights of the licensees is explicitly mentioned in the
GPL-2.0,[cf.][wp. Preamble]Gpl20OsiLicense1991a in the
LGPL-2.1,[cf.][wp. Preamble]Lgpl21OsiLicense1999a and the
GPL-3.0[cf.][wp. Preamble]Gpl30OsiLicense2007a---by which the
LGPL-3.0 inherits this purpose.[cf.][wp.
prefix]Lgpl30OsiLicense2007a Following this viewpoint, we want to generally
assume that open source licenses are designed to protect: They can protect
the user (recipient) of the software, its contributor resp. developer and/or
distributor, and the software itself. And they can protect them against
different threats:
  First, we assume, that---in the context of open source software---the
  user can be protected against the loss of the right to use it, to modify it,
  and to redistribute it. Additionally, he can be protected against patent
  disputes.
  Second, we assume, that open source contributors and distributors can be
  protected against the loss of feedback in the form of code improvements and
  derivatives, against warranty claims, and against patent disputes.
  Third, we assume, that the open source programs and their specific forms
  ---may they be distributed or not, may they be modified or not, may they be
  distributed as binaries or as sources---can be protected against the
  re-closing resp. against the re-privatization of their further development.
  Fourth, we want to assume that new on-top developments being based on
  open source components can be protected against the privatization for enlarging
  the world of freely usable software. 
With respect to these viewpoints, one gets a subtler picture of the license
specific protecting power. Thus, we are going to describe and deduce the
protecting power of each of the open source licenses on the following pages.
Table  summarizes the results as a quick
reference. 
The protecting power of theThe GNU Affero General Public License (AGPL)
AGPL
[TODO...]
The protecting power of theThe Apache License
(Apache-2.0)
APL
As an approved open source license,[cf.][wp]OSI2012b
the Apache License
   
protects the user against the loss of the
right to use, to modify and/or to distribute the received copy of the source
code or the binaries.[cf.][wp. §2]Apl20OsiLicense2004a
Furthermore, based on its patent clause, 
 the Apache-2.0 protects the users against patent
disputes.[cf.][wp. §3]Apl20OsiLicense2004a Because of this
patent clause and the disclaimer of warranty together with the
limitation of liability, the Apache license also protects the
contributors and distributors against patent disputes and warranty
claims.[cf.][wp. §3, §7, §8]Apl20OsiLicense2004a Finally, the
Apache-2.0 protects the distributed sources themselves against a change of the
license which would convert the work to closed software, because,
first, one [] must give any other recipients of the Work or
Derivative Works a copy of (the Apache) license, second, in the Source
form of any Derivative Works that (one) distributes, one has []
to retain [] all copyright, patent, trademark, and attribution notices
[], and third, one must [] include a readable copy [
of the] NOTICE file being supplied by the original package one has
received.[cf.][wp. §4]Apl20OsiLicense2004a
But the Apache License does not protect the contributors against the loss of
feedback because it does not `copyleft' the software: the Apache license does
not contain any sentence requiring that one has also to publish the source code.
In the same spirit, the Apache-2.0 does not protect the undistributed software or the
distributed binaries against re-closing (neither in unmodified nor in
modified form) because the Apache License allows to (re)distribute the
binaries without also supplying the sources---even if the binaries rest upon
sources modified by the distributor. Finally, the Apache-2.0 does not protect the
on-top developments against privatization.
The protecting power of theThe BSD licenses
BSD2
BSD3
As approved open source licenses,[cf.][wp]OSI2012b the
BSD Licenses
   
 
protect the user against
the loss of the right to use, to modify and/or to distribute the received copy
of the source code or the binaries.[cf.][wp. §1ff]OSI2012a
Additionally, they protect the contributors and/or distributors against warranty
claims of the software users, because these licenses contain a `No Warranty
Clause.'[one for all version cf.][wp]BsdLicense2Clause And
finally they protect the distributed sources against a change of the license
which closes the sources, because each modification and redistributions
of [the] source code must retain the [] copyright notice, this list of
conditions and the [] disclaimer:[cf.][
wp]BsdLicense2Clause Therefore it is incorrect to distribute BSD licensed
code under another license---regardless of whether it closes the sources or
not.
   
But the BSD Licenses protect neither the users nor the contributors
and/or distributors against patent disputes (because they do not contain any
patent clause). They do not protect the contributors against the loss of
feedback (because they do not `copyleft' the software). Moreover, they do not
protect the undistributed software or the distributed binaries against
re-closing---neither in unmodified nor in modified form---because they
allow to redistribute only the binaries without also supplying the source
code.  Finally, the BSD licenses do not protect the on-top
developments against privatization.
The protecting power of theThe CDDL [tbd]
CDDL
As an approved open source license,[cf.][wp]OSI2012b
the Common Develop and Distribution License protects the user
against the loss of the right to use, to modify and/or to distribute the
received copy of the source code or the binaries[cf.][wp. 
§?]Cddl10OsiLicense2004a
[]
The protecting power of theThe Eclipse Public License (EPL)
EPL
As an approved open source license,[cf.][wp]OSI2012b
the Eclipse Public License
   
 
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries§2a. 
Furthermore, based on its patent clause, 
 the EPL protects the users also against
patent disputes.§2b  §2c Besides this patent clause, the EPL contains the
sections no warranty and disclaimer of
liability.§5  §6 These three elements together protect the
contributors/distributors against patents disputes and warranty
claims. Finally, the EPL protects the distributed sources themselves
against a change of the license which would reset the work
as closed software: First, the Eclipse Public Licenses requires that 
if a work---released under the EPL---[] is made available in
source code form [] (then) it must be made available under this (EPL)
agreement, too while this act of `making avalaible' must incorporate
a copy of the EPL into each copy of the [distributed]
program or program package.§3 But in opposite to the permissive
licenses, the EPL does not only protect the distributed source code---regardless
whether it is modified or not. The EPL also protects the distributed modified or
unmodified binaries: The EPL allows each modifying contributor and
distributor [] to distribute the Program in object code form
under (one's) own license agreement [] provided this license clearly
states that the source code for the Program is available and where the
licensees can [] obtain it in a reasonable manner on or
through a medium customarily used for software exchange.§3, esp. §3.b.iv
Thus, one has to conclude that the EPL is a copyleft license.
But the Eclipse Public License is not a license with strong copyleft; the EPL
uses `only' a weak copyleft effect:
   
Indeed, the EPL says that for each EPL
licensed program---distributed in object form---a place must be made
known where one can get the corresponding source code.§3, esp. §3.b.iv
The term `Program' is defined as any Contribution distributed in
accordance with [] (the EPL) while the term `Contribution'
refers---besides other elements---to changes to the Program, and
additions to the Program.§1 Unfortunately, this is a circular definition:
`Program' is defined by `Contribution'; and `Contribution' is defined by
`Program.' Nevertheless, one has to read the license benevolently.
Uncontroversial should be this: If one distributes any modified EPL licensed
program, library, module, or plugin, then one has to publish the modified source
code, too. If one adds some own plugins or additional libraries which
are used by an EPL licensed program (which on behalf of this use must have been
modified by adding [sic!] procedure calls) then one has to publish the code of
both parts: that of the program and that of the added elements. In this sense,
the EPL clearly protects the binaries against re-closings like other weak
copyleft using licenses. But if one distributes only an EPL licensed library
which is used as a component by another not EPL licensed on-top program, then
this library does not depend on the top development---provided that the library
itself does not call any (program) functions or procedures delivered by the
overarching on-top development. Hence, nothing is added to the library; and
hence, no other code than that of the library must be published. Therefore, the
EPL does not use the strong copyleft effect in the meaning of---for example --
the GPL.
 
The protecting power of theThe European Union Public License (EUPL)
EUPL
As an approved open source license,[cf.][wp]OSI2012b
the European Union Public License
   
 
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries.§2
Furthermore, based on its patent clause 
, the EUPL protects the users against
patent disputes.§2, at its end Besides this patent clause, the EUPL
additionally contains a Disclaimer of Warranty and a
Disclaimer of Liability.§7  §8 These three elements
together protect the contributors/distributors against patents disputes and
warranty claims. Finally, the EUPL also protects the distributed sources against
a re-closing/re-privatization and the contributors against the loss of
feedback. This protection is based on two steps: First, the European Public
License contains a particular paragraph titled Copyleft clause which
stipulates that copies of the Original Work or Derivative Works based
upon the Original Work must be distributed under the terms of (the
European Union Public) License.§5 Second, the EUPL requires that
each licensee---as long as he [] continues to distribute and/or
communicate the Work---has also to [] provide [] the
Source Code, either directly or by [] (indicating) 
a repository where this Source will be easily and freely available
[]§5 This condition seems to be so important for the EUPL that
the license repeats its message: in another paragraph the EUPL requires again
that if the Work is provided as Executable Code, the Licensor provides
in addition a machine-readable copy of the Source Code of the Work along with
each copy of the Work [] or indicates, in a notice [], a repository
where the Source Code is easily and freely accessible for as long as the
Licensor continues to distribute [] the Work.§3 Based on 
the meaning of Work which is defined by the EUPL as the
Original Work and/or its Derivative Works§1 it must be concluded
that the EUPL is a copyleft license. 
But nevertheless, the European Union Public License is not a license with strong
copyleft: On the one hand, if one takes the core of the EUPL then the license
seems to protect not only the modifications of the original work against
re-closings and (re-)privatization, but also the on-top developments because
normally you have to publish the source code in both cases. Understood in this
way, the EUPL would be a `strong copyleft license.' But on the other hand, the
EUPL additionally contains a Compatibility clause stating that
if the Licensee Distributes [] Derivative Works or copies thereof
based upon both the Original Work and another work licensed under a Compatible
Licence, this Distribution [] can be done under the terms of this
Compatible Licence§5---while the term Compatible Licence
is explicitly defined by a list of compatible licenses, for example the Eclipse
Public License.Appendix. Based on this compatibility clause the
obligation to publish the code of an on-top development can be subverted: As
first step, you could release a little, more or less futile on-top application
licensed under the Eclipse Public License
   
 
which uses a library licensed under the EUPL. As second step, you add this `EUPL
library' which you now may also distribute under the EPL instead of retaining
the EUPL licensing. So, finally you obtain the same work under the Eclipse
Public License which is a weak copyleft license 
. Hence the protection of the EUPL-1.1 is
not as comprehensive as one might assume on the basis of the license text
itself,
   
it can at most be a weak copyleft license---even if the reader might get the
impression that the authors of the EUPL wished to write a strong copyleft
license. Howsoever, the EUPL license does not protect the on-top developments
against a privatization. 
The protecting power of theThe GNU General Public License (GPL)
GPL
The GNU General Public License---also known as GPL---is maintained and offered
by the Free Software Foundation and hosted as part of the well known
GNU operating system homepage.[cf.][
wp]FsfGnuOsLicenses2011a Currently, there are two versions of the GPL which
are classified as OSI approved open source licenses[cf.][
wp]OSI2012b, the GPL-2.0
   
and the GPL-3.0.
   
Although both versions of the GPL aim for the same results and the same spirit,
they differ with respect to textual and arguing structure. Therefore, it is
helpful to treat these two licenses separately.  
GPL-2.0
GPL2
The protecting power of the GPL-2.0 can easily be determined: First, the license
allows the users of a received software to copy and distribute
unmodified copies of the [] source code§1 as well
as to [] modify [] copies [] or any portion of it,
[] and (to) distribute such modifications []§2---
not only in the form of source code, but also in the form of
binaries.§3 Thus---and in accordance of being an approved
open source license[cf.][wp]OSI2012b---the GPL-2.0
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries. Second, it
protects the contributors against warranty claims§11, §12
and---based on its copyleft effect§3---also against the
loss of feedback. Third, the GPL-2.0 protects the source code itself in a nearly
complete mode against privatization: even if one initially distributes only the
binary version of a modification which one has generated (as a work
based on the original) by copying any portion of the original work
into this new derivative work,§2 then one has nevertheless to offer
a possibility to get the source code§4---namely for the
modified work as whole.§3 This modified work based on the
[original] Program has to be read in a very broad sense; it []
means either the Program or any derivative work under copyright law: that is to
say, a work containing the Program or a portion of it, either verbatim or with
modifications and/or translated into another language.§0 Hence, in
the context of software distribution, the GPL-2.0 does not only protect the
software against re-privatization, but also possible on-top developments against
privatization. 
But the GPL-2.0 does not protect against patent disputes 
---neither the users, nor the
contributors or distributors---and it does not protect the (modified) software
which is not distributed against (re-)privatization.
   
GPL-3.0
GPL3
An important modification of the GPL-3.0 is evoked by the use of the new wording
to propagate or to convey a covered work: On the
one hand a covered work denotes either the unmodified Program
or a work based on the Program. This work based on the Program is
defined as a modified version of an earlier instance of the
program which has been derived from this earlier instance by (copying
it) from or (adapting) all or part of it in way other than exactly copying the
earlier instance.§0 On the other hand, to propagate a
work denotes copying, distribution (with or without modification),
making available to the public and any other kind of treating the work
[] except executing it on a computer or modifying a private
copy.
   
Third, the GPL 3.0 specifies that to convey a work []
means any kind of propagation that enables other parties to make or receive
copies.§0 This specification shall later on help to clarify that
it is an act of distribution if the recipient himself actively copies or fetches
a program. 
Referring to this new wording, the GPL-3.0 allows as a basic
permission to [] make, run and propagate covered works
[] without conditions so long as your license otherwise remains in
force.§2 This might be read as anything is allowed without
any restrictions---provided there does not exist any rule which must be
respected. Based on these specifications, the use and the modification of a
GPL-3.0 program only for yourself is not restricted.
   
  
So, in general---like all the other open source licenses and in accordance to
the OSD[cf.][wp]OSI2012a---also the GPL protects the user
against the loss of the right to use, to modify and/or to distribute the
received copy of the source code or the binaries.§3, §4, §5, and §6 
Furthermore, based on its patent clauses, the GPL-3.0 protects the users and the
contributors of a software against patent disputes.
   
Additionally, the GPL-3.0 tries to protect the contributors or distributors
against warranty claims by its well known Disclaimer of
Warranty§15 and Limitation of
Liability§16 which must explicitly made been known at least in  
each case of source code distribution.§4 Finally, the most forceful
protection of the GPL-3.0 concerns the protection against the loss of feedback
and against the privatization: Whenever you distribute a GPL-3.0 licensed
program in the form of binaries, you have to make the source accessible,
too.§6 Moreover, this obligation concerns every covered 
work, hence not only the unmodified original, but also any modification or
adaption derived by any other kind of copying parts of the original into the
resulting work:§0 You may convey a covered
work in object code form under the terms of sections 4 and 5, provided that you
also convey the machine-readable Corresponding Source under the terms of this
License.§6 So, no doubt: the GPL wants also the source code of
all on-top developments to be published, not only the modified programs and
libraries used as base of these on-top developments. The single mode of use, the
GPL does not protect against privatization, is the mode of using the software
only for yourself.
   
The protecting power of theThe GNU Lesser General Public License (LGPL)
LGPL
The LGPL is maintained and offered by the Free Software Foundation and hosted as
part of the well known GNU operating system
homepage.[cf.][wp]FsfGnuOsLicenses2011a The meaning of the
name LGPL was changed in the course of time. First, in 1991, it should be
resolved as GNU Library General Public License and should denote the
first released version of the library GPL which was []
numbered 2 because it goes with version 2 of the ordinary GPL. Today, this
license is marked as superseded by the GNU Lesser General Public
License[cf.][wp]Lgpl20FsfLicense1991a. This newer
LGPL version from 1999 was released as the successor of the GNU
Library Public License, version 2, hence [as] the version
number 2.1.[cf.][wp]Lgpl21FsfLicense1999a Finally, in June
2007, the---for now---last version of the LGPL was released---namely with a
new structure: While GPL-2.0 and LGPL-2.1 are similar, but independent licenses,
the LGPL-3.0 has to be read as an addendum to GPL-3.0. At the beginning of the
LGPL-3.0 license, the content of the corresponding GPL-3.0 was included into
the LGPL by the sentence that this version of the GNU Lesser General
Public License incorporates the terms and conditions of version 3 of the GNU
General Public License, supplemented by the additional permissions listed
below.[cf.][wp]Lgpl30FsfLicense2007a Based on these
differences, it seems to be suitable to treat the different LGPLs separately.
LGPL-2.1
LGPL2
Like the other versions of the GPL or LGPL, the LGPL-2.1 also explicitly
describes its purpose as the task to protect the rights of
the software users: it states that generally all [] the GNU
General Public Licenses are intended to guarantee your freedom to share and
change free software []Preamble Of course, the LGPL-2.1 is
an approved open source license[cf.][wp]OSI2012b which
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries.§1, §2, §4 
But the LGPL-2.1 does not offer any sentences to infer that it grants any patent
rights to the software user. 
 So, it does not protect anyone against
patent disputes, neither the users, nor the
contributors/distributors. Instead of this, the LGPL-2.1 contains a special 
section No Warranty offering two paragraphs which together establish
the protection of the contributors and distributors against warranty
claims.§15, §16 Finally, the LGPL-2.1 also protects the
distributed sources against a re-closing/re-privatization and the
contributors against the loss of feedback. For that purpose, the LGPL-2.1 on the
one hand states that the recipient [] may modify (his) copy or
copies of the Library or any portion of it [] and copy and distribute such
modifications [] provided that the results of these modifications are
[] licensed at no charge to all third parties under the terms of
(the LGPL-2.1).§2 On the other hand, this LGPL version allows to
distribute such modifications in object code or executable form
provided that one accompanies these entities [] with the complete
corresponding machine-readable source code which itself must be distributed
under the terms of the LGPL-2.1.§4
But contrary to the GPL, the LGPL does not require to publish the code of an
overarching program or any on-top development: It distinguishes the
work that uses the Library from the work based
on the Library: First, it defines the Library as any
software library or work licensed under the LGPL-2.1 and adds that
a `work based on the Library' means either the Library or any
derivative work under copyright law.§0, emphasis ours 
Second, it defines the work that uses the Library as any
[] program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or linked
with it whereas this work that uses the Library---taken
in isolation---clearly [] is not a derivative work of
the Library []
   
Third---and explictily as an exception to the Sections above---the
LGPL-2.1 allows to [] combine or link a work that uses
the Library with the Library to produce a work containing portions of the
Library, and distribute that work under terms of (one's own) choice provided
one (accompanies) the work with the complete corresponding
machine-readable source code for the Library. Together, these three
specifications clearly require that one must publish/distribute the source
code of the library itself---regardless, whether it is modified or not, and
regardless, whether one distributes the code directly or makes `only' written
offer for receiving the source code of the library separately.§6
But these  specifications do not require that one also must publish/distribute
the source code of the work that uses the library or---as the  is
using to say---the the on-top developments.
Thus---no surprise---it has to be inferred that the LGPL does not protect the
on-top developments against a privatization. And of course, that is the reason why
it is called the GNU Lesser General Public License.
LGPL-3.0
LGPL3
The LGPL-3.0 wants to be read as an extension of the GPL-3.0. For that purpose,
it explicitly [] incorporates the terms and conditions of
version 3 of the GNU General Public License, supplemented by (some) additional 
permissions []just before §0 Thus, the LGPL-3.0 inherits
the most parts of the protecting power of the GPL-3.0---except those parts which
deal with the overarching on-top development: In opposite of the GPL-3.0, the
LGPL allows to embed LGPL-3.0 licensed libraries into libraries of higher
complexity§3, into on-top applications§4
and into sets of reorganized library systems.§5 Moreover, the
LGPL-3.0 allows to convey these overarching units under terms
of (one's own) choice.§4  Therefore, one is not necessarily obliged to
publish the source code of these on-top developments, too
   
---but, of course,  one is obliged to publish the source code of the (modified)
embedded libraries themselves. 
Based on the already described protecting power of the GPL-3.0
   
and on these additional specifications of the LGPL-3.0, one can summarize the
protecting power of the LGPL-3.0 this way:
First, the LGPL protects the users against the loss of the right to use, to
modify and/or to distribute the received software. Additionally, it protects
them against patent disputes. Second, it protects the contributors and
distributors against the loss of feedback, against warranty claims and against
patent disputes. Finally, it protects the distributed software itself against
re-privatization.
But the LGPL-3.0 does not protect the undistributed source code and does not
protect the on-top developments against privatization.
The protecting power of theThe MIT license
MIT
As an approved open source license,[cf.][wp]OSI2012b
the MIT License
   
 
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries.
[cf.][wp 1ff]OSI2012a 
Additionally, it protects the contributors and/or distributors
against warranty claims of the software users, because it contains a `No
Warranty Clause.'[cf.][wp]MitLicense2012a And finally it
protects the distributed sources against a change of the license which would
close the sources, because the permission [] to use, copy,
modify, [] distribute, [] (is granted) subject to the []
conditions, [that] the [] copyright notice and this permission notice
shall be included in all copies or substantial portions of the
Software.
   
But the MIT License does not protect the users or the contributors and/or
distributors against patent disputes (because it does not contain any patent
clause). Additionally, it does not protect the contributors against the loss of
feedback (because it does not `copyleft' the software). Moreover, the MIT
license does not protect the undistributed software or the distributed binaries
against re-closings---neither in unmodified nor in modified form---because it
allows to redistribute only the binaries without also supplying the source
code.[cf.][wp]MitLicense2012a Finally, the MIT license does
not protect the on-top developments against a privatization.
The protecting power of theThe Mozilla Public License (MPL)
MPL
 
As an approved open source license,[cf.][wp]OSI2012b
the Mozilla Public License
   
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the
binaries.§2.1.a  Furthermore, based on its split and distributed patent
clause,  the
MPL protects the users against patent disputes.§2.1.b, §2.3, §5.2
Besides this patent sections, the MPL additionally contains a
Disclaimer of Warranty and a Limitation of
Liability.§6  §7 These three elements together protect the
contributors/distributors against patents disputes and warranty claims.
Finally, the MPL also protects the distributed sources against a
re-closing/re-privatization and the contributors against the loss of
feedback: The MPL clearly says that, on the one hand, all distribution
of Covered Software in Source Code Form, including any Modifications []
must be under the terms of this License§3.1 and that, on the other
hand, MPL licensed software [] (distributed) in Executable
Form [] must also be made available in Source Code Form
[]§3.2 So, it must be inferred that the MPL is a copyleft
license. 
But nevertheless, the Mozilla Public License is not a license with strong
copyleft. It does not protect on-top developments against privatization: First,
the MPL does not use the term derivative work.
   
Instead of this, the MPL denotes the
[] (initial) Source Code Form [] and Modifications of such
Source Code Form by the label Covered Software§1.4---while
the term Modifications refers to any file in Source Code Form
that results from an addition to, deletion from, or modification of the contents
of Covered Software or any file in Source Code Form that results from an
addition to, deletion from, or modification of the contents of Covered
Software.
   
Second, the MPL contrasts the source code
form and its modifications with the Larger Work by specifying that the
larger work is [] material, in a seperate file or files, that is
not covered software.§1.7
Finally, the MPL states, that you may create and distribute a Larger
Work under terms of Your choice, provided that You also comply with the
requirements of this License for the Covered Software.§3.3 Based on
these specifications, one has to reason that an on-top development which depends
on MPL licensed libraries by calling some of their functions, is undoubtably a
derivative work,
   
but also only a larger work in the meaning of the MPL so that code of
this on-top application needs not to be published---provided, that the library
and the on-top development are distributed as different files.
   
 
Hence, the MPL is license with a weak copyleft effect and does not protect the
on-top developments against privatization.
The protecting power of theThe Microsoft Public License (MS-PL)
MSPL
As an approved open source license,[cf.][wp]OSI2012b
the Microsoft Public License protects the user against the loss of the right to
use, to modify and/or to distribute the received copy of the source code or the
binaries.§2 Furthermore, based on its patent
clause,  the
MS-PL protects the users against patent disputes.§2.B and §3.B
Because of this patent clause and of its 
concise disclaimer of warranty, the MS-PL also protects the
contributors/distributors against patents disputes and warranty 
claims.§2B, §3B, §3D
Finally, the Microsoft Public License protects the distributed sources
themselves---and even portions of these sources---against a
change of the license which would reset the work as closed
software, because first, one [] must retain all copyright,
patent, trademark, and attribution notices that are part of the
software,§3C and because, second, one must also incorporate
a complete copy of this license into one's own distribution premised
one distributes the source code.§3D
But the Microsoft Public License does not protect the contributors against the
loss of feedback because it does not `copyleft' the software: The license does
not contain any sentence which requires that one has to publish the sources,
too.
   
In the same spirit, the MS-PL does not protect the undistributed
software or the distributed binaries against re-closings---neither in
unmodified nor in modified form---because the MS-PL License allows to
(re)distribute the binaries without also supplying the sources---even if the
binaries rest upon sources modified by the distributor. Finally, also the MS-PL
does not protect the on-top developments against a privatization.
The protecting power of theThe Postgres License
(PostgreSQL)
PGL
As an approved open source license,[cf.][wp]OSI2012b
the PostgreSQL License protects the user against the loss of the right to use,
to modify and/or to distribute the received copy of the source code or the
binaries.
Because of its disclaimer of warranty, the PostgreSQL also protects the
contributors/distributors against warranty claims. Finally, the
PostgreSQL protects the distributed sources themselves against a change of the
license which would reset the work as closed software, because the
copyright notice and the whole license must [] appear
in all copies.
But the PostgreSQL License does not protect the contributors against the loss of
feedback because it does not `copyleft' the software: The license does not
contain any sentence which requires that one has to publish the sources, too. 
In the same spirit, the PostgreSQL does not protect the undistributed software or the
distributed binaries against re-closings---neither in unmodified nor in
modified form---because the PostgreSQL allows to (re)distribute the binaries without
also supplying the sources---even if the binaries rest upon sources modified by
the distributor. Finally, the PostgreSQL does not protect the on-top developments
against a privatization.
The protecting power of theThe PHP License
PHP
As an approved open source license,[cf.][wp]OSI2012b
the PHP-3.0 License protects the user against the loss of the right to use, to
modify and/or to distribute the received copy of the source code or the
binaries. Because of its disclaimer of warranty, the PHP
license also protects the contributors/distributors against warranty
claims.  Finally, the PHP license protects the distributed
sources themselves against a change of the license which would
reset the work as closed software, because
redistributions of source code must retain the [] copyright
notice, this list of conditions and the [] disclaimer.
But the PHP-3.0 License does not protect the contributors against the loss of
feedback because it does not `copyleft' the software: The license does not
contain any sentence which requires that one has to publish the sources, too. 
In the same spirit, the PHP license does not protect the undistributed software
or the distributed binaries against re-closings---neither in unmodified nor in
modified form---because the PHP license allows to (re)distribute the binaries
without also supplying the sources---even if the binaries rest upon sources
modified by the distributor.
  
Summary
All these specifications can not only be summarized by a
table,  but also
by a mindmap as it is shown at the end of this chapter. Moreover, based on these
specifications, one could generate new groups of open source licenses, new
classes, like `user protecting licenses,' 
 `patent disputes fending licenses' up to more
sophisticated taxonomies.
However, one must keep in mind that all of these grouping viewpoints do not
legitimate the conclusion that all members of a group can be respected by
fulfilling the same requirements. This would only be possible if the grouping
criteria would directly refer to the fulfilling tasks. Indeed, nearly all open
source licenses do differ with respect to these criteria, and even if the
differences are very small, they can't be neglected.
   
 
So: reflecting on possible classes of open
source licenses is a good method to become familiar with the area of open source
licenses. But it is not a method to determine, what needs to be done to
obtain the right to use the software. For that purpose every license must be
considered individually.
[rectangle,draw,text width=1.4cm] (l0100) at (9,4)
 BSD License ;
[text width=1.4cm] (l0101) at (8.25,3)
 3-Clauses ;
[text width=1.4cm] (l0102) at (10,3)
 2-Clauses ;
  
[rectangle,draw,text width=1.4cm] (l0200) at (10.2,5)
 MIT License ; 
  
[rectangle,draw,text width=1.4cm] (l0300) at (12,5.5)
 Apache License;
[text width=0.4cm] (l0301) at (12,4.5) 2.0;
[rectangle,draw,text width=1.4cm] (l0400) at (13,6.8)
 MicroSoft Public
License ;
  
[rectangle,draw,text width=2.0cm] (l0500) at (13,8)
PostgreS[Q] License;
  
[rectangle,draw,text width=1.4cm] (l0600) at (13,9)
PHP License;
[text width=0.4cm] (l0601) at (14.5,9)3.0;
  
[rectangle,draw,text width=1.4cm] (l0800) at (13,10.7)
 Mozilla Public License;
[text width=0.4cm] (l0801) at (14.5,10.2)1.1;
[text width=0.4cm] (l0802) at (14.5,11.2)2.0;
[rectangle,draw,text width=1.4cm] (l0900) at (13,12.25)
Eclipse Public License;
[text width=0.4cm] (l0901) at (14.5,12.25) 1.0;
 
[rectangle,draw,text width=1.5cm] (l1000) at (13,13.8)
European Public License; 
[text width=0.4cm] (l1001) at (14.5,13.3)1.1;
[text width=0.4cm,style=dotted] (l1002) at (14.5,14.3)1.2;
  
[rectangle,draw,text width=1.4cm] (l1100) at (13,15.5)
Lesser GNU Public License;
[text width=0.4cm] (l1101) at (14.5,15)2.1;
[text width=0.4cm] (l1102) at (14.5,16)3.0 ;
[rectangle,draw,text width=1.4cm] (l1200) at (13,17.5)
GNU Public License;
[text width=0.4cm] (l1201) at (14.5,17)2.1;
[text width=0.4cm] (l1202) at (14.5,18)3.0 ;
[rectangle,draw,text width=1.4cm] (l1300) at (13,19.5)
 Affero GNU Public License;
[text width=0.4cm] (l1302) at (14.5,19.5)3.0;
[rectangle,draw,text width=2.3cm] (n0100) at (10,8)
  protecting the user, the contributor  the initial code
   Permissive Licenses      
 ;
[rectangle,draw,text width=2.3cm] (n0200) at (10,12.5)
 protecting the user, the contributor, the
  initial code,  all direct derivations
  Weak Copyleft        
;
[rectangle,draw,text width=2.3cm] (n0300) at (10,16.5)
 protecting the user, the contributor, the 
  initial code, all direct derivations  the 
  (indirectly derived) on-top-developments
 
  Strong Copyleft    
 ;
[ellipse,draw,text width=1.6cm] (c110000) at (4.5,0)
 Patent Disputes;
[ellipse,draw,text width=1.6cm] (c120000) at (4.5,2)
 Loss of Rights ;
[ellipse,draw,text width=1.6cm] (c210000) at (4.5,4)
 Warranty Claims ;
 
[ellipse,draw,text width=1.6cm] (c220000) at (4.5,6)
 Loss of Feeback;
[ellipse,draw,text width=0.6cm] (c311000) at (6.2,8)
 reclosings;
[ellipse,,draw,text width=0.6cm] (c321000) at (6.2,10)
 reclosings ;
[ellipse,,draw,text width=0.6cm] (c331000) at (6.2,12)
 reclosings ;
[ellipse,,draw,text width=0.6cm] (c341000) at (6.2,14)
 reclosings ;
[ellipse,,draw,text width=0.6cm] (c351000) at (6.8,16.2)
 reclosings ;
[ellipse,,draw,text width=0.7cm] (c361000) at (7.5,17.5)
 privatizings ;
[ellipse,,draw,text width=1.6cm] (c411000) at (6.5,19)
 closings ;
[ellipse,draw,text width=1.5cm] (c310000) at (3,8)
  unmodified Sources;
[ellipse,draw,text width=1.5cm] (c320000) at (3.25,10)
  unmodified Binaries;
[ellipse,draw,text width=1.2cm] (c330000) at (3.5,12)
  modified Sources;
[ellipse,draw,text width=1.4cm] (c340000) at (3.25,14)
  modified Binaries;
[ellipse,draw,text width=2cm] (c350000) at (3.6,16)
  part of On-Top-Developments;
[ellipse,draw,text width=2.9cm] (c360000) at (3.4,17.5)
  On-Top-Developments;
[ellipse,draw,text width=1cm] (c100000) at (1,1)
  Users ;
[ellipse,draw,text width=0.8cm] (c200000) at (1,5)
  Contributors;
[ellipse,draw,text width=0.8cm] (c300000) at (1,12)
  distributed Software;
 
[ellipse,draw,text width=2.2cm] (c400000) at (1,19)
  undistributed Software; 
[ellipse,draw,text width=1.3cm] (c000000) at (0,8)
 open source license;
/in 
  l0100/l0101/,
  l0100/l0102/,
  l0300/l0301/,
  l0600/l0601/,
  l0800/l0801/,
  l0800/l0802/,
  l0900/l0901/,
  l1000/l1001/,
  l1000/l1002/,
  l1100/l1101/,
  l1100/l1102/,
  l1200/l1201/,
  l1200/l1202/,
  l1300/l1302/
  
  [dashed] () to  () ;
///in 
  n0100/l0100/270/150,       
  n0100/l0200/280/155,
  n0100/l0300/290/160,
  n0100/l0400/300/165,
  n0100/l0500/310/150,
  n0100/l0600/340/160,
  n0200/l0800/300/160,
  n0200/l0900/340/170,
  n0200/l1000/20/190,
  n0200/l1100/60/200,
  n0300/l1200/40/180,
  n0300/l1300/80/180 
  
  
  [dashed] () to  () ;
///in 
  c361000/n0300/0/180,
  c351000/n0300/0/180,
  c341000/n0300/45/190,
  c331000/n0300/50/200,
  c321000/n0300/55/210,
  c311000/n0300/60/220,
  c220000/n0300/25/225,
  c210000/n0300/25/230,
  c120000/n0300/25/235
  
  [<-,color=blue] () to [out=,in=] () ;
///in 
  c341000/n0200/330/170,
  c331000/n0200/0/180,
  c321000/n0200/0/180,
  c311000/n0200/20/190,
  c220000/n0200/15/220,
  c210000/n0200/15/230,
  c120000/n0200/15/235
  
  [<-,color=cyan] () to [out=,in=] () ;
///in 
  c331000/n0100/355/150,
  c311000/n0100/0/180,
  c210000/n0100/5/210,
  c120000/n0100/10/230
  
  [<-,color=red] () to [out=,in=] () ;
///in 
  c411000/l1300/0/180    
  [<-,color=green] () to [out=,in=] () ;
////in 
  c000000/c100000/protecting/260/120,
  c100000/c110000/against/360/180,
  c100000/c120000/against/360/180,
  c000000/c200000/protecting/270/180,
  c200000/c110000/against/340/150,
  c200000/c210000/against/0/180,
  c200000/c220000/against/0/180,
  c000000/c300000/protecting/90/230,
  c300000/c310000/as/300/180,
  c300000/c320000/as/330/180,
  c300000/c330000/as/0/180,
  c300000/c340000/as/30/180,
  c300000/c350000/as/60/180,
  c300000/c360000/as/70/180,
  c000000/c400000/protecting/100/240,
  c400000/c411000/against/0/180        
  [->,dotted,
    decoration=text along path,
              text align=center,
              text=,
              postaction=decorate,] () to [out=,in=] () ;
////in 
  c310000/c311000/against/0/180,
  c320000/c321000/against/0/180,
  c330000/c331000/against/0/180,
  c340000/c341000/against/00/180,
  c350000/c351000/against/0/180,
  c360000/c361000/against/0/180      
  [->,dotted,
    decoration=text along path,
              text align=center,
              text=,
              postaction=decorate,] () to [out=,in=] () ;
///in 
  c110000/l1302/0/305,
  c110000/l1202/0/303,
  c110000/l1201/0/301,
  c110000/l1102/0/299,
  c110000/l1101/0/297,
  c110000/l1002/0/295,
  c110000/l0901/0/290,
  c110000/l0802/0/285,
  c110000/l0400/0/275,
  c110000/l0301/0/270   
  [<-,color=gray] () to [out=,in=] () ;
Open Source: About Some Side Effects
The problem of implicitly releasing patents
In this chapter, we briefly analyze
the effects of patent clauses in open source licenses---not in general, but with
respect to the license fulfilling tasks they require, also known as the
`implicit acceptance of a patent use' by distributing open source software.
At least the free software movement frowns on the existence of software
patents.
   
One of the best known witnesses for that attitude is the GPL itself. Its
preamble purports that [] any free program is threatened
constantly by software patents. One can read that the open
source community fears three risks: First, they are apprehensive of people who
hijack the idea of a piece of open source software they do not have developed,
register a corresponding patent, and finally try to earn money by preventing the
use of the software or by involving its users in patent
ligitations.[cf.][234]JaeMet2011a Second, they fear a bramble of
general software patents which practically prohibits them to develop open source
software legally.[cf.][234]JaeMet2011a Third, they anticipate the
possibility that (not quite benevolent) open source developers could try to
register patents with the intention of undermining the open source
principles.[cf.][235]JaeMet2011a
Howsoever, regardless whether one tries to fight against software patents or not,
software patents have become a reality. To abide by the law requires managing the
constraints of patents properly. Open source licenses know and respect this
necessity. Moreover, at least some of them try to manage the effect of software
patents by specific patent clauses[pars pro toto cf.]§3 or by several
sentences distributed in the license text.[pars pro toto cf.]wp But why
does the  have to deal with this topic, if the  does not want to
participate in general discussions?
Opposite to the other conditions of the open source licenses, their patent
clauses or propositions in general do not directly refer to a specific set of
actions which have to be executed for acting in accordance with the licenses. Open
source patent clauses normally do not join in the game `paying by doing.' So,
actually, it does not seem to be necessary to mention the patent clauses here.
Unfortunately, although the patent clauses do not directly say `do this or
that in these or those circumstances,' some of them nevertheless have side
effects which imply that the distributors of open source software already
have something done if they actually distribute a piece of open
source software. This implicit effect makes it necessary to deal with the patent
clauses even in an only pragmatic .
Patent clauses in open source licenses can have two different directions of
impact. They use two methods to protect the users of the open source software---
and sometimes these methods are combined:
  First, an open source license can assure that all contributors to and
  distributors of a piece of open source software grant to all users/
  recipients not only the right to use the open source software itself, but
  automatically and implicitly also the right to use all those patents 
  belonging to the contributors/distributors which as patents are necessary
  to use the software legally.
     
 
  So, let us---a little simplifying and therefore only on the following few
  pages---name such licenses the granting licenses.
  Second, an open source license can try to automatically terminate the
  right to use, to modify, and to distribute the software if its user initiates
  litigations against any of the contributors/distributors with respect to an
  infringement of patent. That can be seen as a revocation of rights granted 
  earlier. So, let us name these license the revoking licenses.
Later on, we will summarize the concrete patent clauses of all the licenses
discussed in the  as a proof for the following classification:
[ellipse,minimum height=8.5cm,minimum width=14.2cm,draw,fill=gray!10] (l0100) at (6.7,6.8)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=open source licenses,
              postaction=decorate] (-0.8,6.5) arc (218:322:9.5cm);
              
[ellipse,minimum height=6.2cm,minimum width=5cm,draw,fill=gray!20] (l0100)
at (2.5,6.8)   ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= without granting patent clauses,
              postaction=decorate] (0.75,7.5) arc (180:0:1.8cm);
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0101) at (2.5,8.6) MIT;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0102) at (1.7,7.6) BSD-X-Clause;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0103) at (3.4,6.4) LGPL-2.1;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0104) at (3.4,7.6) GPL-2.0;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0105) at (1.7,6.4) PHP-3.X;
[rectangle,draw,text width=1.4cm, text height=0.36cm, fill=gray!40, text
centered] (l0106) at (2.5,5.2) Post-greSQL;
[ellipse,minimum height=6cm,minimum width=8.5cm,draw,fill=gray!20] (l0200)
at (9.4,6.5)   ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= with granting patent clauses,
              postaction=decorate] (2.2,2) arc (180:0:7cm);
[ellipse,minimum height=4.5cm,minimum width=5.6cm,draw,fill=gray!30]
(l0210) at (8.4,6.1)   ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= granting + revoking,
              postaction=decorate] (4.4,3.8) arc (180:0:4cm);
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0212) at (7.2,6.9)   Apache-2.0;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0211) at (9.6,6.9)   EPL-1.X;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0213) at (7.2,6.1)   MPL-X.Y;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0214) at (9.6,6.1)   MS-PL;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0213) at (7.2,5.3)   LGPL-3.X;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40,
text centered] (l0213) at (9.6,5.3)   GPL-3.0;
[rectangle,draw,text width=1.6cm, text height=0.34cm, fill=gray!40, text
centered] (l0214) at (8.4,4.5)   AGPL-3.0;
 
 
[rectangle,draw, text width=1.8cm, text height=0.34cm, fill=gray!40, text
centered] (l0221) at (11.6,8)   EUPL-1.X;
But regardless of the final textual form a license uses to express its
granting or revoking positions, in any case one has to consider some aspects: 
  
  Overall, one has to keep in mind that of course no licensor, contributor
  and/or distributor can release the right to use any patents he does not own---
  not even if he tries to release them by an open source patent
  clause.
     
  Implictly touched patents of third parties not having contributed to the
  development and/or participated in the distribution can never be implicitly
  and automatically released on the base of such an (open source) patent clause:
  no rights, no right to release.
     
 
  Hence: even for those open source licenses which try to protect the users,
  finally the users themselves must nevertheless ensure that they do not violate
  the patents of third parties being unwillingly touched by the way the code
  works or the processes in which the software is used.
     
  
  In the context of a granting license, one has also to consider that
  contributing to and distributing a piece of software implicitly evokes that
  all patents of the contributor and/or distributor are `given free' which are
  necessary to use the software as whole---including the more or less deeply
  embedded libraries. So, if one wants to check whether some of the core patents
  of one's patent portfolio are afflicted by a patent clause (and whether one
  therefore better should not use/distribute the corresponding piece of open
  source software), one should not forget to check the embedded libraries, too.
  
  Finally, one has to consider in the context of a granting license that
  its patent clause only releases the use of the patents in the meaning of
  `allowed to be used for enabling the use of the distributed software.' The
  patent clause does not release the patents generally. Thus, the threat of
  (unwillingly) releasing patents by open source software is not as large as
  sometimes feared: the use of the patent is only granted in combination with
  the software. On the one hand, you may not use the open source software
  without having the right to use the patent because the use of the patent is
  inherently necessary for using the software---regardless, whether the open
  source software is embedded into a larger process or not. On the other hand,
  you are not allowed to use patents---released by the patent clause of an open
  source license---without exactly that open source software which has been
  licensed under this open source license, because the patent clause only refers
  to the use of just that open source software.
  
  
  
  Summarized, one has to consider that the granting open source licenses
  automatically and implicitly force you to grant all the rights which are
  necessary to use the software legally. Open source contributors and
  distributors should know that. 
  With respect to the revoking licenses, one has to consider that their
  patent clauses contain negative conditions which may be read as interdictions.
  The  will integrate these conditions into specific `prohibits'-sections
  of its to-do lists.
  
  Finally one should mention that in some cases, the form of the
  revocation used by the revoking license refers to the use of the software, in
  other cases to the use of the patents. But nevertheless, one can reason that
  ---from the pragmatic viewpoint of a benevolent open source software user---
  this second case of patent revocation also implicitly terminates the right to
  use the software: If the use of a patent is necessary to use a piece of
  software legally, one is not allowed to use the software without having the
  right to use the patent, too; and if the use of the patent is not necessary
  for using the software, then the patent is not covered by the patent clause.
  So, in any case, this kind of patent clauses seems to terminate the right to
  use, distribute or modify the software. Hence, single users as well
  as companies or organizations should also respect such patent clauses if they
  want to be sure to use open source software compliantly.
The  wants to support its readers not only to act according to the licenses
in general, but also according to its patent clause. Thus, we now briefly cite
and summarize the meaning of particular patent clauses:
AGPL statements concerning patents
AGPL
(prelimiary text)
The AGPL-3.0 is a license derived from the GPL-3.0: apart from the preamble and
the paragraphs §11 and §13, they contain nearly the same text.
   
In §13, the AGPL explictly refers to the focus on a remote network
interaction which shall also be able to trigger the delivery of the
corresponding source code; and in §11, the AGPL establishes its specific patent
clause .
Like the GPL-3.0, the AGPL-3.0 tries to protect all licensees against patent
claims. This kind of protection is then established by three steps:
First, the AGPL-3.0 assures that each contributor grants a non
exclusive, worldwide, royalty free patent license under the contributor’s
essential patent claims, to make, use, sell offer for sale, import and
otherwise run, modify and propagate the contents of its contributor
version.§11 Furthermore, the patent license defines that this patent
license granted by the contributor is automatically extended to all downstream
recipients who later on receive any version of the work even if they indirectly
receive them by third parties and even if they receive a covered work or work
based on the program.§11
Second, the AGPL enforces not only the grant of patent licenses by the
contributors, the license even requires the same from licensees who
distributes the program unchanged: If, pursuant to or in connection
with a single transaction or arrangement, you convey, or propagate by procuring
conveyance of, a covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify or convey
a specific copy of the covered work, then the patent license you grant is
automatically extended to all recipients of the covered work and works based on
it.§11
Finally, the AGPL-3.0 introduces an revoking clause by stating that a licensee
[] may not initiate litigation (including a cross-claim or
counterclaim in a lawsuit) alleging that any patent claim is infringed by
making, using, selling, offering for sale, or importing the Program or any
portion of it§10 and that this licensee automatically
loses the rights granted by the AGPL-3.0 including any patent
licenses if he tries to propagate or modify a covered work against the
regulations of the AGPL-3.0.§8 
According to that, the AGPL-3.0 is like the GPL-3.0 a granting and a revoking
license: At first, one is granted the right to use all patents of all
contributors which are necessary to use the software legally. But if one
installs any litigation regarding an infringement of patents, then the rights
granted to him are revoked.
Apache-2.0 statements concerning patents
APL
Titled by the headline Grant of Patent License, the Apache License 2.0
contains a specific patent clause being comprised of two very long and condensed
sentences.§3 Outside of this patent clause, the word patent is
only used once again---for requiring that one [] must retain, in
the (sources) [] all [] patent [] notices []§4.3
The one core message of the Apache-2.0 patent clause is that
[] each Contributor hereby grants to You a perpetual, worldwide,
non-exclusive, no-charge, royalty-free, irrevocable [] patent license to
make, have made, use, offer to sell, sell, import, and otherwise transfer the
Work []
   
The second core message of the Apache-2.0 patent clause is the statement that
if You institute patent litigation against any entity [] alleging
that the Work [] constitutes [] patent infringement, then any patent
licenses granted to You [] shall terminate []§3
The third message of the Apache-2.0 patent clause is the statement, that the
[] license applies only to those patent claims licensable by such
Contributor that are necessarily infringed by their Contribution(s) alone or by
combination of their Contribution(s) with the Work to which such Contribution(s)
was submitted.§3
Thus, the Apache-2.0 is---as we use to say in this chapter---a granting and a
revoking license: At first you are granted to use all patents of all
contributors which are necessary to use the software legally. But if you---with
respect to the software---install any litigation concerning the infringement of
patents, then the rights granted to you are revoked.
CDDL statements concerning patents
CDDL
The patent clauses of the CDDL are similiar in spirit to the Apache License: 
The license grants rights to each contributors patents that are neccessarily
infringed by distributing or using the software. The license also revokes all
rights granted to someone who files a patent litigation with respect to the
software against any contributor.  The CDDL differs from other licenses in that
the litigant does not lose his rights automatically and immediately but gets a
grace period of 60 days. If he withdraws his claims during this period, the
license granted to him will not be terminated.
The actual wording used in the CDDL is complicated by the fact that the CDDL
distinguished between the Initial Developer and other
Contributors.  A Contributor receives a version of the
software to which he then adds some Modifications thus creating the
Contributor Version. For all practical purposes we can treat the
Initial Developer as another contributor who happens to not receive
any software and whose Contributor Version (officially called
Original Software) equals his Modifications.
The patent licenses are granted in the clause (b) of the sections titled
The Initial Developer Grant§2.1(b) and Contributor
  Grant.§2.2(b) Each contributor grants the licensee a
  world-wide, royalty-free, non-exclusive license under Patent Claims infringed
  by the making, using, or selling of Modifications made by that Contributor
  either alone and/or in combination with its Contributor Version [], to
  make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)
  Modifications made by that Contributor []; and (2) the combination of
  Modifications made by that Contributor with its Contributor Version [] 
This limits the patent license to patents infringed by code present in the
contributor version. And clause (d) limits the grant even further to exclude
infringements caused by[]third party modifications of Contributor
Version§2.2(d) or Covered Software in the absence of Modifications
made by that Contributor.§2.2(d)
This ensures that no contributor is required to tolerate an infringement of his
patents caused by code modified after he made his contribution and, in
particular, it is not possible to remove the contributors modifications completely
without also removing all other causes of infringement of the patent claims
because the patent license does not carry over to such a use of the software.
The section titled TERMINATION contains the usual defense
against patent infringement claims by declaring that any such claim
against a Participant
   
[] alleging that the Participant Software [] directly or indirectly
infringes any patent, then any and all rights granted directly or indirectly to 
You 
[] under Sections 2.1 and/or 2.2 of this
License shall, upon 60 days notice from Participant terminate prospectively and
automatically at the expiration of such 60 day notice period, unless [] 
You withdraw Your claim [] against such Participant either unilaterally or
pursuant to a written agreement with Participant.
Thus, not only has the Participant to actively initiate the termination of the
licenses, the licensee also has 60 days to either settle the case by an
agreement with the Participant or to withdraw his claims.
EPL statements concerning patents
EPL
The Eclipse Public License treats the patents necessary to use the program
in the same section and under the same headline Grant of Rights like
all the other rights: First, the EPL clearly states that [] each
Contributor [] grants (the recipient) a non-exclusive, worldwide,
royalty-free patent license under Licensed Patents to make, use, sell, offer to
sell, import and otherwise transfer the Contribution of such Contributor, if
any, in source code and object code form.§2.b Then the EPL delimits
the extend of this act of granting: Neither hardware patents of the contributors
are covered by this releasing patent clause, nor patents that concern aspects
out of the area of the initially intended software combination.§2.b
Finally, the EPL hints to the general fact that 3 party patents not
belonging to the contributors can never be implicity be released by such a
patent clause. Moreover, it gives the example that [] if a third
party patent license is required to allow Recipient to distribute the Program,
it is Recipient's responsibility to acquire that license before distributing the
Program.§2.c
Like other open source licenses, the EPL announces at its end that
if (a) Recipient institutes patent litigation against any entity
[] alleging that the Program [] infringes such Recipient's
patent(s), then such (granted) Recipient's rights [] shall terminate
[]§7
Thus, the EPL, too, is a granting and a revoking license: 
At first you are granted the use of all patents of all
contributors which are necessary to use the software legally. But if you---with
respect to the software---install any litigation concerning an infringement of
patents, then the rights granted to you are revoked.
EUPL statements concerning patents
EUPL
The European Union Public License contains a very brief patent clause. It only
states, that the Licensor grants to the Licensee royalty-free, non
exclusive usage rights to any patents held by the Licensor, to the extent
necessary to make use of the rights granted on the Work under this
Licence.end of §2
Furthermore the EUPL does not contain any patent specific revoking clause, but
only an abstract clause requiring that all [] the rights granted
hereunder will terminate automatically upon any breach by the Licensee of the
terms of the Licence§12. Thus, the EUPL is---as we are using to say
in this chapter---a granting license but not a revoking license.
GPL statements concerning patents
Although the GPL versions 2.0 and 3.0 are aiming for the same results, they
differ heavily with respect to textual and arguing structure. Therefore, it
should be helpful to treat these two licenses separately.
GPL-2.0
GPL2
The GPL-2.0 does not contain any specific patent clause by which it would grant
(and revoke) the rights to use those patents belonging to the contributors and 
being necessary to use the software in accordance with the legal patent system.
Instead of this, the preamble of the GPL-2.0 alleges that [] any
free program is threatened constantly by software patents and that the authors
of the GPL---for tackling this threat---[] had made it clear
that any patent must be licensed for everyone's free use or not licensed at
allPreamble. Unfortunately, this specification is only an indirect
claim which needs a lot of arguing for establishing a protective effect against
patent disputes. Howsoever, this paragraph of the GPL-2.0 does not directly
grant any rights to the software users to use necessary patents, too.
With respect to the patent problem, the GPL-2.0 also states that a licensee has
to fulfill the conditions of the GPL-2.0 completely, even if an existing patent
infringement---being imposed on the GPL licensee---[]
contradicts the conditions of this license so, that a waiver of the use of the
software is the only way to fulfill both constraints.§11 And
finally the GPL-2.0 allows the original copyright holder to add an
explicit geographical distribution limitation excluding [] countries
provided that these countries [] (restict) the distribution
and/or use of the library [] by patents []§12
Based on these statements, one cannot infer that the GPL-2.0 grants any patent
rights to the software user, neither directly, nor indirectly.
Thus, the GPL-2.0 is neither a granting nor a revoking license.
GPL-3.0
GPL3
Initially, the GPL-3.0 regrets that [] every program is
threatened constantly by software patents what should be seen as the
[] danger that patents applied to a free program could make it
effectively proprietary. And therefore---as the GPL-3.0 itself summarizes its
patent rules---[] the GPL assures that patents cannot be used to
render the program non-free.Preamble. This kind of protection is
then established by three steps. First, the GPL-3.0 stipulates that
each contributor grants [the licensees] a non-exclusive,
worldwide, royalty-free patent license under the contributor's essential patent
claims, to make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.§11
Second, the GPL-3.0 defines that this patent license granted by the contributor
[] is automatically extended to all recipients who later on
receive any version of the work, even if they indirectly receive them by third
parties and even if they receive a covered work or works
based on it.§11 Moreover, the GPL-3.0 also specifies that those
distributors of a covered work who have the right to use a patent
necessary for the use of the distributed software but who are not allowed to
relicense this patent to third parties must solve this problem by making the
source code available nevertheless, by depriving themselves or by
extending the patent license to downstream recipients.§11 
And finally, the GPL-3.0 also introduces a revoking clause by stating that a
licensee [] may not initiate litigation [] alleging that
any patent claim is infringed by making, using, selling, offering for sale, or
importing the Program or any portion of it§10 and that this
licensee automatically loses the rights granted by the GPL-3.0
including any patent licenses if he tries to propagate or modify a
covered work against the rules of the GPL-3.0.§8
Thus, GPL-3.0 is a granting and a revoking license: At first, one is granted the
right to use all patents of all contributors which are necessary to use the
software legally. But if you---with respect to the software---install any
litigation concerning an infringement of patents, then the rights granted to you
are revoked. 
LGPL statements concerning patents
As already mentioned above, the LGPL versions 2.1 and 3.0 differ heavily with
respect to textual and arguing structure. Therefore, they should be treated
separately.
LGPL-2.1
LGPL2
Like the GPL-2.0, the LGPL-2.1 does not contain any specific patent clause by
which it would grant (and revoke) the rights to use those patents belonging to
the contributors and being necessary to use the software in accordance with the
legal patent system.
Instead of this, the preamble of the LGPL-2.1 says that []
software patents pose a constant threat to the existence of any free program
and that the authors of the LGPL---for tackling this threat---
[] insist that any patent license obtained for a version of the
library must be consistent with the full freedom of use specified in this
license.Preamble
Unfortunately, this specification is again only an indirect claim which needs a
lot of arguing to establish a protective effect against patent disputes.
Howsoever, this paragraph of the LGPL-2.1 does not directly grant any rights to
the software users to use necessary patents.
With respect to the patent problem, the LGPL-2.1 also states that a licensee has
to fulfill the conditions of the LGPL-2.1 completely, even if an existing patent
infringement---being imposed on the LGPL licensee---
[] contradicts the conditions of this license so that a waiving
of the use of the software is the only way to fulfill both
constraints.§11 And finally the LGPL-2.1 allows the original
copyright holder to add an explicit geographical distribution limitation
excluding [] countries provided that these countries []
(restict) the distribution and/or use of the library [] by patents
[]§12 Based on these statements, one cannot infer that 
the LGPL grants any patent rights to the software user, neither directly, nor
indirectly.
Thus, the LGPL-2.1 is neither a granting nor revoking license.
LGPL-3.0
LGPL3
The LGPL-3.0 is an extension of the GPL-3.0. Before starting with a section
Additional Definitions, the LGPL-3.0 states that it []
incorporates the terms and conditions of version 3 of the GNU General Public
License and then supplements this GPL-3.0 content by some
additional permissions.wp The LGPL-3.0 itself does not
contain the word `patent,' but the GPL-3.0 does.§11
So, the LGPL-3.0 inherits its patent clause from the GPL-3.0 which is---as we
already described 
---a granting and a revoking license.
 
MPL statements concerning patents
MPL
The MPL distributes its statements concerning the tolerated use of the patents
over three paragraphs: First, it clearly says that each Contributor
[] grants [the licensee] a world-wide, royalty-free,
non-exclusive license [] under Patent Claims of such Contributor to
make, use, sell, offer for sale, have made, import, and otherwise transfer
either its Contributions or its Contributor Version§2.1,
esp. §2.1.b Second, it hihlights some limitations.§2.3
And finally, the MPL introduces a revoking clause which signifies that the
rights, granted to the licensee [] by any and all Contributors
[] shall terminate if the licensee initiates litigation
against any entity by asserting a patent infringement claim [] alleging
that a Contributor Version directly or indirectly infringes any patent
[]§5.2
Thus, the MPL is a granting license and a revoking license.
MS-PL statements concerning patents
MSPL
First, the MS-PL contains a statement, by which [] each 
contributor grants (the software users) a non-exclusive, worldwide, royalty-free 
license under its licensed patents to make, have made, use, sell, offer for 
sale, import, and/or otherwise dispose of its contribution in the software or 
derivative works of the contribution in the software.§2.B Second,
the MS-PL says that if you bring a patent claim against any
contributor[] your patent license from such contributor to the software
ends automatically.§3.B 
Thus, the MS-PL is a granting and a revoking license: At first you are granted
to use all patents of all contributors which are necessary to use the software
legally. But if you install any litigation concerning an infringement of
patents with respect to the software, then the rights granted to you are revoked. 
Excursion: Why linking is a secondary criterium
Distributing statically or dynamically linked software is often discussed as a
problem (and sometimes as a solution) for acting compliantly. In this chapter,
we briefly discuss why this aspect can mostly be ignored and why it does not
help to determine the existence of a derivative work.
In some earlier versions of the , its finder subclassified some use cases
with respect to the way an application was `composed' as a larger unit: In the
previous form for gathering the necessary information, the  user had to
answer whether he was going to combine the received open source software
with other software components by linking them together statically, by linking
them dynamically, or by textually including (parts of) the open source software
into a larger unit. Today, this question has totally been erased. The
authors could convince themselves that it is not necessary to consider this
aspect.
Of course, we know that being linked statically or dynamically is often and
deeply discussed by license experts. 
 It seems to be an
important aspect:
[TBD: Discussion of the literature]
So, let us start with some undeniable facts: The  deals with 
the Apache-2.0 license,
the BSD 2-Clause license, 
the BSD 3-Clause license, 
the MIT license, 
the MS-PL, 
the PostgreSQL,
and the PHP license 
as instances of permissive licenses.
Additionally, the  treats 
the EPL, 
the EUPL, 
the LGPL,
   
 
and the MPL
as licenses with weak copyleft. Finally, the  thoroughly discusses 
the GPL
   
 
and the AGPL
as licenses with strong copyleft.
   
Only three of these licenses mention the word linking (or variants of
it): Using the command grep -i link *  grep -v
"<linklinksskip-link" in a shell---executed
as an operation on a set of html formatted license files---directly shows that
only the AGPL-3.0, the Apache-2.0, the GPL-2.0, the GPL-3.0, the LGPL-2.1 and
the LGPL-3.0 are using mutations of the word linking. Additionally, the
results of the command grep -i statical * show that only the LGPL-2.1
uses the word `statical,' while using the command grep -i dynamical *
only hints to the AGPL-3.0 and the GPL-3.0. Finally, the command grep -i
"shared" *---executed on the same set of files---shows that the term
shared libary is also only used by these licenses.
This analysis already indicates that being statically or dynamically linked
might not be as important for acting compliantly as it is often suggested.
If one reads the concrete statements, then one can see, that acting compliantly
depends only slightly and only rarely on the kind of being `combined':
  [Apache-2.0:] This version of the Apache license uses the word
  link only once for stating that [] Derivative Works shall not
  include works that remain separable from, or merely link [] to the interfaces of, 
  the Work and Derivative Works thereof.[cf.][wp.
  §0]Apl20OsiLicense2004a Thus, the Apache-2.0 does not use the criteria being
  linked for determining a derivative work, neither being linked in
  general, nor being statically linked, nor being dynamically
  linked. Hence, for acting in accordance to the Apache-2.0, this class of attributes
  can completely be ignored.
  [GPL-3.0:] The GPL-3.0 uses the word link three times: First, it
  defines the Corresponding Source for a work in object code
  form [as] all the source code needed to generate, install, and []
  run the object code and to modify the work []. Additionally the GPL-3.0
  also explains in this context that this definition shall include
  [] the source code for shared libraries and dynamically linked
  subprograms that the work is specifically designed to
  require[cf.][wp. §0]Gpl30OsiLicense2007a. Second, the
  GPL-3.0 allows [] to link or combine any covered work with a
  work licensed under version 3 of the GNU Affero General Public License into a
  single combined work, and to convey the resulting work.[cf.][
  wp. §13]Gpl30OsiLicense2007a Finally, the GPL-3.0 explains that
  the GNU General Public License [itself] does not permit incorporating
  your program into proprietary programs and that the LGPL might be a better
  license for those licensors who have written a subroutine library
  [] and may consider it more useful to permit linking proprietary
  applications with the library [][cf.][wp. last
  parapgraph]Gpl30OsiLicense2007a.
  
  So, also in this text, the features statically linked or
  dynamically linked are not used to trigger any license fulfilling
  actions. The conditions for Conveying Modified [] Versions
  refer to the work based on the Program[cf.][wp.
  §5]Gpl30OsiLicense2007a which itself denotes a modified
  version of the earlier work[cf.][wp.
  §0]Gpl30OsiLicense2007a. Moreover, the licensee---as modifier, distributor,
  and subsequent licensor---is required by the GPL-3.0 [] to
  license the entire work [which has been developed on the base of a GPL-3.0
  component], as a whole, under this License to anyone who comes into possession
  of a copy[cf.][wp. §5]Gpl30OsiLicense2007a. The GPL-3.0
  does not limit this claim---especially not by referring to a mode of being
  linked. Hence, also with respect to the GPL-3.0, one can completely ignore
  these features of the software, its use and its distribution for determining
  how to use the software compliantly.
  [AGPL-3.0:] Concerning the use and the meaning of the words
  dynamically and linking, the AGPL-3.0 exactly follows the
  structure of the GPL-3.0: first the terms arise in the context of defining the
  Corresponding Source;[cf.][wp.
  §0]Agpl30OsiLicense2007a then the word link helps to say that AGPL
  and GPL are compatible licenses;[cf.][wp.
  §13]Agpl30OsiLicense2007a and finally the word link is used to hint
  to the LGPL.[cf.][wp. §5]Agpl30OsiLicense2007a So, again,
  one can ignore the feature of being statically or dynamically linked if one
  wants to determine how to use the software compliantly.
  [GPL-2.0:] In the GPL-2.0, the word link only arises in the context
  of hinting to the LGPL.[cf.][wp. last
  paragraph]Gpl20OsiLicense1991a Moreover, the words statical and
  dynamical are not used in this text---not at all and in no sense: the
  copy left feature of the GPL depends `only' on a specification which refers to
  a work based on the Program [] that in whole or in part
  contains or is derived from the Program or any part thereof []
  [cf.][wp. §2]Gpl20OsiLicense1991a Thus, even in this old version
  of the GPL, the criteria of being linked---in which way ever---does not
  trigger any task for using the software compliantly.
  [LGPL-3.0:] In this license, variants of the word link are used to
  define the concept of a Combined Work which shall be the name for a
  [] work produced by combining or linking an Application with
  the Library.[cf.][wp. §0]Lgpl30OsiLicense2007a In the
  end the LGPL-3.0 allows to [] convey a Combined Work under
  terms of your choice [], provided that one distributes also all
  material (including the object files of the overarching on-top developments)
  necessary for enabling the receiver to relink the whole product with a
  later version of the library or that one presupposes the use of
  a suitable shared library mechanism so that the receiver can update
  the library simply by replacing the binary library file[cf.][
  wp. §4]Lgpl30OsiLicense2007a. For fulfilling these conditions it is
  sufficient to require that a distributor shall either distribute the
  on-top development and the library in the form of dynamically linkable parts
  or distribute the statically linked application together with a written offer,
  valid for at least three years, to give the user all object-files of the
  on-top development and the library, so that he can relink the application on
  its own behalf.
  [LGPL-2.1:] Even if the LGPL-2.1 argues more sophistically than all
  the other licenses, in its preamble this license clearly states what it wants
  to evoke: If you link other code with the library, you must provide
  complete object files to the recipients, so that they can relink them with the
  library after making changes to the library and recompiling it.
  [][cf.][wp. preamble]Lgpl21OsiLicense1999a For
  that purpose, the LGPL-2.1 defines at the beginning that if a program
  is linked with a library, whether statically or using a shared library, [then]
  the combination of the two is legally speaking a combined work, a derivative
  of the original library:[cf.][wp.
  preamble]Lgpl21OsiLicense1999a On the one hand a work that uses
  the Libary---which is only [] designed to work with the
  Library by being compiled or linked with it []---[] in
  isolation, is not a derivative work of the library []. On the other
  hand, it is no question for the LGPL-2.1, that linking a
  work that uses the Library with the Library creates an executable
  that is a derivative of the Library (because it contains portions of the
  Library).[cf.][wp. §5]Lgpl21OsiLicense1999a But then---
  as an exeption---the LGPL-2.1 allows to [] combine
  or link a work that uses the Library with the Library to produce a work
  containing portions of the Library, and distribute that work under terms of
  your choice. The right to do this is granted provided that the distributor
  either presupposes the use of a suitable shared library mechanism or
  that he distributes also the complete material (including the object files of
  the overarching on-top developments) which is necessary to enable the receiver
  to relink the whole product with a later incoming newer version of the
  library[cf.][wp. §6, §6b and §6c together with
  §6c]Lgpl21OsiLicense1999a. Again, for fulfilling all these conditions it is
  sufficient to require that a distributor shall either distribute the
  on-top development and the library in the form of dynamically linkable parts
  or distribute the statically linked application together with a written offer,
  valid for at least three years, to give the user all object-files of the
  on-top development and the library, so that he can relink the application on
  its own behalf.
Thus, with respect to this analysis, we can conclude that---in general---there
is no need to investigate whether one wants to distribute software in the form 
of statically or dynamically linked binaries for deriving the necessary tasks 
to distribute this software compliantly. 
Instead of this, we can directly incorporate those doings into the task lists 
of the LGPL what has been discovered as sufficient doings. 
Moreover, it is also sufficient to insert this statement only in the task list 
of the LGPL. 
There is no need to generalize this discussion. 
So, we could simplify our form offered to gather the information to find the 
adequate license fulfilling task list.
Excursion: What is a 'Derivative Work' - the basic idea of open source
This chapter briefly discusses aspects of
being a derivated pieces of software which have to be known for using open
source software compliantly. As usually, the 
only tries to find one safe interpretation. The authors know that there
exist many other ways to consider this topic. So, if you feel, that the
viewpoint of the  does not fit the specific circumstances of your
particular case, do not hesitate to ask your own lawyer. But if you agree with
the , be aware that you dealing with this topic from the viewpoint of a
benevolent user.
Let us outline the argumentation:
  [The meaning `derivative work' must be known!]
    Many open source licenses use the term `derivative work,'
    either directly or indirectly in form of the word `modification.'
    [Write a table as survey] 
    And nearly all licenses that are using the term `derivative work' etc., 
    are linking tasks that must be executed to comply with the corresponding
    license, to the precondition that something is a derivative work. 
    [table survey] 
    Hence, for acting in accordance with such a license, it has to be
    known what a derivate work is.  
  [Unfortunately the meaning is not clearly fixed.]
    There exist different readings of the term `derivative work.' 
    [specify the differences and cite the sources] 
    Hence, it is not as clear what a derivative work is as one could wish
  [So, let us argue from the viewpoint of a benevolent developer:]
    Open source licenses are written for software developers, mostly to preserve
    their freedom to develop software. And sometimes these licenses are also
    written by software developers---or at least with their assistance. So, one
    should be able to answer the question under which circumstances a piece of
    software is a `derivative work' of another piece of software based on two
    principles: 
  
    Let us argue from the viewpoint of a benevolent neutral software
      developer without hidden interests or a hidden agenda.
    In case of doubts let us preferably assume that the two pieces
      interrelate as source and derivative work---so that the  rather
      recommends to perform the required tasks.
  
We generalize a specific viewpoint of the LGPL. It uses three terms:
  [library] is defined as a collection of software
  functions and/or data prepared so as to be conveniently linked with
  application programs.[cf.][wp §0]Lgpl21OsiLicense1999a
  [work based on the library] is defined as either the
  library or any derivative work.[cf.][wp
  §0]Lgpl21OsiLicense1999a
  [work that uses the library] is defined as something which
  initially [] is not a derivative work of the library []
  but can become a derivative work by being combined / linked to the library it
  uses.[cf.][wp §5]Lgpl21OsiLicense1999a
Following these specifications, one has to conclude that 
derivative works of the library can be drieved in two different ways: 
First, the library itself can be enhanced without changing the character of 
being a library. Then, of course, the resulting library is a derivative work 
of the initial library.  Second, an overaching program can use the library by 
calling functions, methods, or data offered by the library. In this case, the 
overarching program functionally depends on the library and is a derivative work 
(as soon as it is linked to the library).
This viewpoint can be generalized: snippets, modules, plugins can be
enhanced and used by overarching programs or even by more complex libraries.
Based on this viewpoint---which should finally be formulated as the viewpoint of
a benevolent impartial developer---the  uses the following rules by which
the  decides to take something as derivative Work:
  [Copy-Case] Copying a piece of code from a source file and pasting it
  into a target file makes the target file a derivatve work of the source
  file. 
  [Modify-Case] Inserting any new content or deleting any existing content
  of a source file makes the resulting target file a derivate work of the
  source file.
  
  [Call-Case] Inserting the call of function which is defined inside of and 
  delivered by a sourcefile into a target file makes that target file
  depending on the source file and therefore a derivative work of the delivering
  source file.
And here are some applications of these rules:
  Enlarging an existing source file by an external text creates a
  derivative work! Why? Because you are going to reuse the
  external code for simplifying our life. [see 'Copy Case']
  Reducing a source file creates a derivative work! Why?
  Because you are going to prepare the given file(s) for a better reuse.
  [see 'Modify-Case']
  Replacing something in a source file creates a derivative work!
  Why? Because you are going to reuse parts of the existing code for
  simplifying your life. [see 'Modify Case']
  Integrating a foreign snippet into an existing source code
  creates a derivative work! Why? Because you are going to simplify
  your life by reusing both, the foreign snippet and the original file. [see
  'Copy Case' and 'Modify-Case']
  
  
  
  
  
  
  Refactoring a given work by extracting a function / method into
  an autonomous file creates a derivative work in two respects! Why?
  Because, first, all modified / generated files depend
  on the original file and, second, because those function calls in the files
  introduce a dependecy on the file defining the function itself.
  [see 'Modify-Case' and 'Call-Case]
  Calling a function - served by a defining module - lets the
  calling file become a derivative work of the serving module! Why?
  Because you are going to simplify your life by reusing an already
  prepared work (often offered by other developers). [see 'Call-Case']
  By calling elements - served by a defining library - the
  calling file becomes a derivative work of the serving library! Why? 
  Because you are going to simplify your life by reusing an already
  prepared work (often offered by other developers). [see
  'Call-Case'] 
And now some additional 'ideas' which might invite to be discussed:
  Does a plugin depend on its framework? No. Why? 
  Because it is like a module: it offers a function (normally without using
  a function, offered by the framework itself).
  Does a framework depend on its plugin? Let us try to answer:
  Sometimes yes, sometimes no. Why? If the framwork crashes when it is
  missing its plugin, then it clearly depends on the plugin. No doubt. It is
  simply not autonomous. But if it does not crash, then it perfectly does for
  which it has been designed: it is offering a place which might be filled by
  the plugin, but not necessarily. This kind of a framework is like an
  application listing to a port for getting data which it shall process and
  which are served by another application.
  Does a program using inter process communication depend on its
  IO-partners? Definitely not! Why? Because, otherwise, we need not discuss
  all these cases, every thing would depend on everything---in each running system.
[TBD ]
Excursion: The problem of license compatibility [tbd]
Here we discuss the often neglected or only superficially treated problem of combining
differently licensed software. We will hint to the Exclusion-List of the Free
software foundation; we will hint to the Eclipse / GPL-plugin problem; we will
mention the recent discussion whether the kernel requires to license the
complete Android as GPL; and finally we will discuss the just now published, short
analysis of Jaeger and Metzger presenting a combining matrix which seems to fall
into their lap. 
We will argue that the question can simply be answered:
Only if you embed two libraries which both are licensed under an
on-top-development protecting license and if both these licenses require the
licensing of the derivated work by different licenses then you have a problem.
In all other cases which we will describe, there is no problem.
Excursion: open source software and money [tbd]
Here we will shortly discuss ways in which money and Open Source is no problem.
Open Source Use Cases: Concept and Taxonomy
This chapter establishes our concept of
open source use cases as a classification system for to-do lists. The
conditions of a specific license, in the context of a particular
open source use case, shall be satisfiable by following the corresponding
to-do list. Additionally this chapter introduces a taxonomy for these open
source use cases. Later on, this taxonomy will organize the Open Source
Use Case Finder.
After all these introductory remarks, we can summarize our idea. We know that
the right to use open source software depends on the tasks required by the open
source licenses. As opposed to commercial licenses, you can not buy the right to
use a piece of open source software by paying money. It is embedded into the
Open Source Definition that the right to use the software may not be
sold. The OSD states first that an open source license may []
not restrict any party from selling or giving away the software as a component
of (any) aggregate software distribution, and adds second in the same context
that an open source license [] shall not require a royalty or
other fee for such sale[cf.][wp §1]OSI2012a.
However, it would be wrong to conclude that you are automatically allowed to use
open source software without any service in return: generally you have to do
something to gain the right to use the software. In other words: open source
software is covered by the idea of ’paying by doing’. Accordingly, open source
licenses describe specific circumstances under which the user must execute
some tasks in order to be compliant with the licenses. So, if we want to offer
to-do lists for fulfilling license conditions, we must consider these tasks and
circumstances.
In practice, such circumstances are not linear and simple. They contain
combinations of (sometimes context sensitive) conditions which can be grouped
into classes of tokens. Such a class of tokens might denote a feature of the
software itself---such as being an application or a library. Or it can refer to
the circumstances of using the software, such as 'using the software only for
yourself' or 'distributing the software also to third parties'.
At the end, we want to determine a set of specific OSUCs---the open source
use cases. And we want to deliver for each of these OSUCs and for each of the
considered open source licenses one list of actions which fulfills the license
in that context 
.
Such an open source use case shall be considered as a set of tokens
describing the circumstances of a specific usage. Hence, to begin, we must
specify the relevant classes of tokens, before we can determine the valid
combinations of these tokens---our open source use cases. Finally, based
on the tokens, we generate a taxonomy in the form of a tree. This tree will
become the base of the Open Source Use Case Finder which will be offered
in the next chapter, and which leads you to your specific OSUC by evaluating
just a few questions and answers.
There are only a handful of tokens which are relevant to the circumstances of
open source software licenses:
  The type of the open source software: On the one
  hand, we regard code snippets, modules, libraries and plugins, and on the
  other hand, autonomous applications, programs and servers. We will take the
  word ’snimolis’ for the first set, and ’proapses’ for the second. This is
  necessary, as we are not only talking about libraries and applications in the
  everyday sense, but rather in the broadest sense 
.
  More specifically, we will ask you, whether the open source software you want
  to use, is an includable code snippet, a linkable module or library, or a
  loadable plugin, or whether it is an autonomous application or server which
  can be executed or processed. In the first case, the answer should be 'it is a
  snimoli', in the second 'it is a proapse'.
  The state of the open source software: It might be
  used exactly as one has received it. Or it can be modified, before being used.
  More specifically, we will ask you, whether you want to leave the open source
  software as you have received it, or whether you want to modify it before
  using and/or distributing it to 3rd parties. In the first case, the answer
  should be 'unmodified', in the second 'modified'.
  
  The usage context of the open source
  software: On the one hand you might use the received open source software as a
  readily prepared application. On the other hand you might embed the received
  open source into a larger application as one of its components. More
  specifically, we will ask you, whether you are using the open source
  software as an autonomous piece of software, or whether you are using it as an
  embedded part of a larger, more complex piece of software. In the first case,
  the answer should be 'independent', in the second
  'embedded'.
  
  The recipient of the open source software:
  Sometimes you might wish to use the received open source software only for
  yourself. In other cases you might intend to hand over the software (also) to
  other people. More specifically, we will ask you, whether you are going to use
  the open source software only for yourself, or whether you plan to
  (re)distribute it (also) to third parties. In the first case, the answer
  should be '4yourself', in the second '2others'.
 
  The form of the distributed files: Many licenses
  also draw a distinction between distributing the software as sources and
  distributing the files as binaries. In this case, we will ask you, whether you
  want to distribute the software in the form of binaries or as source code. In
  the first case, the answer should be 'binaries', in the second
  'sources'
  
From a more programmatic point-of-view, we can summarize these tokens as
follows:
  type::snimoli or type::proapse
  state::unmodified or state::modified
  context::independent or context::embedded
  recipient::4yourself or recipient::2others
  form::binaries or form::sources
We have already defined the open source use case as the combination of
these tokens. If we simply combine all these tokens of all these classes with
all the tokens of the other classes 
, we get
 sets of tokens---or 32 open source use cases.
Fortunately, some of the generated sets are invalid from an empirical or logical
view, and some of these sets are context sensitive:
  
  If you already have specified that the used open source software is a
  proapse---an autonomous program, an application, or a server---then
  your answer implies that the software is used independently and is not
  embedded with other components into a larger unit. But if you have specified
  that the used open source software is a snimoli---a snippet of
  code, a module, a plugin, or a library---then it can indeed be used as an
  embedded component of a constructed larger application or server, or it can be
  used independently in case you 'only' re-distribute it to 3rd. parties.
  
  If you already have specified that the used open source software is a
  snimoli---a snippet of code, a module, a plugin, or a library---and
  that this snimoli shall be used only by yourself (not distributed to
  other 3rd. parties) then your answer must also imply that this snimoli
  is used in combination, as an embedded part of a larger unit. A library can
  not be used autonomously, without using it as a component of another
  application. In this case, it would simply sit on the disk and would do
  nothing more than occupying space.
Does this sound complex? We thought so, too. We spent much time explaining these
constraints to ourselves, and only when we had transposed all the combinations
and rules into a tree, the situation became clearer. The following diagrams
shall summarize our own clarifications:
Overview of the OSUC classes and tokens
[
    font=,
    grow'=right, 
    level 1/.style=sibling distance=6em,
    level 2/.style=sibling distance=2.5em,
    level distance=2.5cm          
]
[ellipse,draw] tokens
  child  node [rectangle,draw] type?
    child  node [ellipse,draw] proapse
    child  node [ellipse,draw] snimoli
  
  child  node [rectangle,draw] state?
    child  node [ellipse,draw] unmodified
    child  node [ellipse,draw] modified
  
  child  node [rectangle,draw] context?
    child  node [ellipse,draw] independent
    child  node [ellipse,draw] dependent
  
  child  node [rectangle,draw] recipient?
    child  node [ellipse,draw] 4yourself
    child  node [ellipse,draw] 2others
      child  node [rectangle,draw] form?
        child  node[ellipse,draw] sources
        child  node[ellipse,draw] binaries
      
    
  ;
The OSUC taxonomy
This is one of the possible trees 'collecting' the tokens and offering the
open source use cases as their leaves 
:
[
    font=,
    align=left,
    grow'=right,
    level 1/.style=level distance=1.3cm,
    level 2/.style=sibling distance=24em, level distance=1cm,
    level 3/.style=sibling distance=12em, level distance=1cm,
    level 4/.style=sibling distance=6em, level distance=1.5cm,
    level 5/.style=sibling distance=3.5em, level distance=2cm,
    level 6/.style=sibling distance=3.5em, level distance=1.8cm,
    level 7/.style=sibling distance=3.5em, level distance=1.5cm
]
[ellipse,draw] OSS
  child  node [rectangle,draw] type? 
    child  node [rectangle,draw] state? 
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-01
            child  node proapse,
unmodified,
independent,
4yourself
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-02
            child  node proapse,
unmodified,
independent,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node  
          edge from parent node  embedded 
        
        edge from parent node  unmodified 
      
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-03 
            child  node proapse,
modified,
independent,
4yourself 
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-04
            child  node proapse,
modified,
independent,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node  
          edge from parent node  embedded 
        
        edge from parent node  modified 
      
      edge from parent node  proapse 
    
    child  node [rectangle,draw] state? 
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node  
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-05
            child  node snimoli,
unmodified,
independent,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-06 
            child  node snimoli,
unmodified,
embedded,
4yourself 
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-07
            child  node snimoli,
unmodified,
embedded,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  embedded 
        
        edge from parent node  unmodified 
      
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node  
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-08
            child  node snimoli,
modified,
embedded,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-09 
            child  node snimoli,
modified,
embedded,
4yourself 
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-10
            child  node snimoli,
unmodified,
embedded,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  embedded 
        
        edge from parent node  modified 
      
      edge from parent node  snimoli 
    
  ;
Open Source Use Cases: Find the License Fulfilling To-do Lists
This chapter offers the Open Source Use Case Finder: Based on the
information gathered by a form, it allows to traverse a tree whose leaves are
linked to the open source use cases which finally refer to the respective
to-do lists.
A standard form for gathering the relevant information
 
[h]llll
   & Which open source software do you want to use? &  
   & Under which open source license is it released? &  
Focus & Questions & Answers
  Type
  & [2.9cm]
    Is the open source software you want to use a library in the
    broadest sense (an includable code snippet, a linkable
    module or library, or a loadable
    plugin), or is it an autonomous program,
    application, or server which can be
    executed? 
  & snimoliproapse
  
  State 
  & [1.7cm]
    Do you want to leave the open source software
    unmodified as you have received it, or are you going to
    create a modified version of it? 
  & unmodifiedmodified
  
  Context 
  & [2.15cm] 
    Are you going to use / distribute the open source software as an
    independent unit, or do you plan to integrate it as an
    embedded component into a complexer piece of software?
  & independentembedded
  
  Recipient 
  & [1.7cm] 
    Are you going to use the open source
    software only for yourself, or do
    you plan to (re)distribute it (also) to
    other third parties?
  & 4yourself2others
  
  Form 
  & [1.7cm]
    Given you want to (re)distribute an open source based work [2others],
    do you focus on distributing the binaries or the
    sources?
  & binariessources
  
As discussed earlier, there are of course some invalid
combinations. 
 Here
are some extra explanations concerning the classes resp. the focuses:
[Type:] A piece of (open source) software is a program, an application, or
a server, only if you can start its binary form with your normal program
launcher, or (in case of a text file which still must be interpreted by an
interpreter like php, perl, bash etc.) if you can start an interpreter which
takes the file as one of its arguments and executes the commands.
[State:] You are modifying a piece of (open source) software if you expand,
reduce or modify at least one of the received software files, and---in case of
dealing with binary object code---if you (re)compile and (re)link the modified
software to a new binary file. But if you only modify some of the configuration
files, you are not modifying the open source software itself.
[Context:] You are using a piece of open source software as an embedded
component of a larger unit 
  
  if one of your files of the larger unit contains a verbatim or a
  modified copy (i.e. a snippet) of the received open source software, or
  if your larger unit contains an include statement referring to a
  functionally defining file of the received open source software, or
  if your larger unit calls a function defined in the received open source
  software, or
  if your development environment contains a compiler or linker directive
  referring to the received open source software (binaries) and if your larger
  unit can't be executed without resolving this linker directive.
  
[Recipient:] You are using the received open source software only for
yourself, if you as a person do not pass it to other entities like persons,
organizations, companies etc., or if you---as a member of a specific
development group---pass it only to the other members of your development
group. But if you store open source software on any device such as a mobile
phone, an USB stick, etc. or if you attach it to any transport medium like
email etc. and if you then sell, give away, or simply send this device or
transport medium to anyone (other than a direct member of your development
group) then you indeed hand the open source software over to third
parties. 
[Form:] Open source software knows two ways to distribute the software: in
the form of binaries and in the form of sources. Mostly it is up to you to
decide whether you want to distribute only the binaries or whether you are
intentionally going to distribute the sources (too). At a first glance, the
concepts 'sources' and 'binaries' seems to be clearly distinguished.
On the one hand, compiled sources should be taken as binaries. On the other
hand, editable pieces of software are denoted by the concept 'sources'. But
sometimes the difference is not as clear as wished: For example, you can modify
even already compiled object files by using an hex-editor. Or it is very
difficult to modify the minimized versions of javascript files even if they are
indeed text files. Therefore, the OSLiC 'reuses' a famous rule of
thumb: The source code for a work means the preferred form of the work
for making modifications to it.§3 All other forms are denoted by
the concept of 'binaries'. Based on this specification, you can respect some
special conditions if you want to distribute the sources and/or the binaries.
The taxonomic Open Source Use Case Finder
Now, after having gathered the necessary information, determine your 
open source use case by traversing the following tree and its corresponding
branches:
choice/.style=rectangle, draw, rounded corners
[
    font=,
    align=left,
    grow'=right,
    level 1/.style=sibling distance=24em, level distance=10mm,
    level 2/.style=sibling distance=14em, level distance=10mm,
    level 3/.style=sibling distance=7em,  level distance=18mm, anchor=west, minimum width=2cm,
    level 4/.style=sibling distance=3em,  level distance=18mm, minimum width=1.65cm,
    level 5/.style=sibling distance=3em,  level distance=18mm, minimum width=1.45cm,
    level 6/.style=sibling distance=3em,  level distance=6mm,
]
[ellipse,draw] OSS
    child  node [choice]  typeproapse 
      child  node [choice] 
        child  node [choice] 
          child  node[choice]  
            01
          
          child  node[choice]  
            child  node[choice]  
              02S
            
            child  node[choice]  
             02B
            
          
        
      
      child  node [choice] 
        child  node [choice] 
          child  node[choice]  
            03
          
          child  node[choice]  
            child  node[choice]  
              04S
            
            child  node[choice]  
              04B
            
          
        
      
    
    child  node [choice]  typesnimoli 
      child  node [choice] 
        child  node [choice]  
          child  node[choice]  
            child  node[choice]  
              05S
            
            child  node[choice]  
              05B
            
          
        
        child  node [choice]  
          child  node[choice]  
            06
          
          child  node[choice]  
            child  node[choice]  
              07S
            
            child  node[choice]  
              07B
            
          
        
      
      child  node [choice] 
        child  node [choice]  
          child  node[choice]  
            child  node[choice]  
              08S
            
            child  node[choice]  
              08B
            
          
        
        child  node [choice]  
          child  node[choice]  
            09
          
          child  node[choice]  
            child  node[choice]  
              10S
            
            child  node[choice]  
              10B
            
          
        
      
    ;
The open source use cases and its to-do list references
On the following pages, each Open Source Use
Case is textually specified one more time and complemented by a list of
page numbers. Each of these pages covers the license-specific to-do list whose
items together offer a processable way for acting according to the license under
the circumstances of the described Open Source Use
Case.
01proapse, unmodified, independent, 4yourself
Only for yourself, you are going to use an unmodified open source program,
application, or server just as you received it. But you do not combine it with
other components in the sense of software development 
02Sproapse, unmodified, independent, 2others, sources
Just as you received it, you are going to distribute an unmodified open source
program, application, or server to third parties in the form of sources. In this
act of distribution, you do not combine this program, application, or server
with other software components in the sense of software development 
02Bproapse, unmodified, independent, 2others, binaries
Just as you received it, you are going to distribute an unmodified open source
program, application, or server to third parties in the form of binaries. In
this act of distribution, you do not combine this program, application, or
server with other software components in the sense of software development 
  
03proapse, modified, independent, 4yourself
Only for yourself, you are going to modify an open source program, application,
or server after you received it and before you will use it. But you do not
combine it with other components in the sense of software development 
04Sproapse, modified, independent, 2others, sources
You are going to modify an open source program, application, or server after you
received it and  before you will distribute it to third parties in the form of
sources. But you do not combine this modified program, application, or server
with other software components in the sense of software development
  
04Bproapse, modified, independent, 2others, binaries
You are going to modify an open source program, application, or server after you
received it and before you will distribute it to third parties in the form of
binaries. But you do not combine this modified program, application, or server
with other software components in the sense of software development
05Ssnimoli, unmodified, independent, 2others, sources
Just as you received it, you are going to distribute an unmodified open source
library, code snippet, module, or plugin to third parties in the form of
sources. In this act of distribution, you do not combine this library, code
snippet, module, or plugin with other software components in the sense of
software development 
05Bsnimoli, unmodified,independent, 2others, binaries
Just as you received it, you are going to distribute an unmodified open source
library, code snippet, module, or plugin to third parties in the form of
binaries. In this act of distribution, you do not combine this library, code
snippet, module, or plugin with other software components in the sense of
software development 
06snimoli, unmodified, embedded, 4yourself
Only for yourself and just as you received it, you are going to combine an
unmodified open source library, code snippet, module, or plugin into a larger
software unit as one of its parts  
07Ssnimoli, unmodified, embedded, 2others, sources
Just as you received it and before you will distribute it to third parties in
the form of sources and together with a larger software unit, you are going to
combine and embed an unmodified open source library, code snippet, module, or
plugin into that larger software unit in the sense of software development
07Bsnimoli, unmodified, embedded, 2others, binaries
Just as you received it and before you will distribute it to third parties in
the form of binaries and together with a larger software unit, you are going to
combine and embed an unmodified open source library, code snippet, module, or
plugin into that larger software unit in the sense of software development
08Ssnimoli, modified, independent, 2others, sources
Before you will distribute it to third parties in the form of sources, you are
going to modify an open source library, code snippet, module, or plugin. But you
do not combine it with other software components in the sense of software
development  
08Bsnimoli, modified, independent, 2others, binaries
Before you will distribute it to third parties in the form of binaries, you are
going to modify an open source library, code snippet, module, or plugin. But you
do not combine it with other software components in the sense of software
development 
09snimoli, modified, embedded, 4yourself
Only for yourself, you are going to modify an open source library, code snippet,
module, or plugin, and you will combine it in the sense of software development
into a larger software unit as one of its parts 
10Ssnimoli, modified, independent, 2others, sources
Before you will distribute it to third parties in the form of sources, you are
going to modify an open source library, code snippet, module, or plugin, which
you combine with other software components in the sense of software development
10Bsnimoli, modified, independent, 2others, binaries
Before you will distribute it to third parties in the form of binaries, you are
going to modify an open source library, code snippet, module, or plugin, which
you combine with other software components in the sense of software development
Open Source License Compliance: To-Do Lists
With respect to the defined open source use cases, this chapter lists what one
has to do for acting in accordance with the specific open source licenses.
Some general remarks on 'giving' someone a file
This chapter has to be started with some general points which are relevant for
many of the to-do lists. So that the same points are not repeated too often, we
will start with these general remarks and refer to them throughout the chapter.
  
  Sometimes when delivering a binary package containing open source software,
  the medium doesn’t allow the recipient to view all files contained in that
  package. For example, a lot of mobile devices don’t give the user access to
  the file system. But open source licenses often require ‘to give’ someone
  copies of text files, such as the license text, copyright notes, or specific
  notice file. The safe interpretation of ‘giving someone a text’ is that the
  receiver must be able to read it 
. Thus, on
  systems which offer a file browser and a suitable reader, it is sufficient, to
  put these file onto the files system. On the other systems, you must
  present the content of the files  through the UI of your application---for
  example in a specific copyright screen 
. The  does not want to refine the taxonomies down to the
  level of operating systems, so it is up to the user to keep this in mind when
  reading the to-do lists.
  
  Sometimes a product which uses and distributes open source software
  tries to fulfill the requirement 'to give the recipients the license etc.' by
  presenting links to general versions of these licensing files hosted somewhere
  on the internet. But be aware: Although it is a good tradition---especially
  if you link to the homepages of the projects for being totally transparent---
  it is not sufficient to offer only the links. If you are required by the open
  source licenses to handover something to your users, you must do it. It
  is not safe to delegate the task to anyone hoping that they will offer the
  files all the time your product is being distributed 
. Even if it would
  be safe to assume that the link will remain valid forever, the point is: you
  have to fulfill the license, no one else.
 
 
 
 
 
 
AGPL Licensed Software in the usage context of [tbd]
  
 
  
  
  
  
Apache-2.0 licensed software
APL 
Apache-2.0
Apache License 2.0
2.0
Apache
Today, the current release of the Apache open source license is version 2.0,
older versions are deprecated. 
 Because it focusses primarily on the
redistribution,[cf.][wp. §4]Apl20OsiLicense2004a
the following simplified Apache specific open source use case
finder 
 can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l71) at (3,10) Apache-2.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) Apache-2.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  Apache-2.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  Apache-2.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  Apache-2.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  Apache-2.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  Apache-2.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  Apache-2.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  Apache-2.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  Apache-2.0-C9   distributing
modified library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
 
 
 
  
 
 
 
 
 
 
Apache-2.0-C1: Using the software only for yourself
Apache-2.0-C1
  01
  03 
  06
  09
  that you received Apache-2.0 licensed software, that you will use it
  only for yourself, and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
    You are allowed to use any kind of Apache software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
  
    
    
  
Apache-2.0-C2: Passing the unmodified software as source code
Apache-2.0-C2
  02S
  05S
  07S
  that you received Apache-2.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified source code
  files or as unmodified source code package. In this case it makes no
  difference if you distribute a program, an application, a server, a snippet, a
  module, a library, or a plugin as an independent or as an embedded unit.
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    
     
      
    
  
  
    
    
  
Apache-2.0-C3: Passing the unmodified software as binaries
Apache-2.0-C3
  02B 
  05B 
  07B 
  that you received Apache-2.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified binary files or
  as unmodified binary package. In this case it does not matter if you distribute
  a program, an application, a server, a snippet, a module, a library, or a
  plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
    
    
    
    Ensure that the notice text file is also reproduced if
      and whereever such third-party notices normally appear (especially, if you
      are distributing an unmodified Apache-2.0 licensed library as embedded
      component of your own work which displays its own copyright notice.) 
    
    
  
  
    
    
  
Apache-2.0-C4: Passing a modified program as source code
Apache-2.0-C4
  04S 
  
  that you received an Apache-2.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package.
 
  04S
  
    
    
    
    
  
    Inside of the source code, mark all your modifications
      thoroughly. Generate a notice text file, if it still does not
      exist. Add a description of your modifications into the
      notice text file.
    
  
 
  
    
    
  
Apache-2.0-C5: Passing a modified program as binary
Apache-2.0-C5
  04B
  that you received an Apache-2.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  04B
  
    
    
    
    
 
    Even if you do not want to distribute your modified source
      code, mark all your modifications thoroughly. 
    
  
  
    
    
  
Apache-2.0-C6: Passing a modified library as independent source code
Apache-2.0-C6
  08S
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  08S
  
    
    
    
 
    Inside of the source code, mark all your modifications
      thoroughly. Generate a notice text file, if it still does not
      exist. Expand the notice text file by a description of your
      modifications.
    
  
  
    
    
  
Apache-2.0-C7: Passing a modified library as independent binary
Apache-2.0-C7
  08B
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  08B
  
    
    
    
   
    Even if you do not want to distribute your modified source
      code, mark all your modifications thoroughly. 
    
  
  
    
    
  
Apache-2.0-C8: Passing a modified library as embedded source code
Apache-2.0-C8
  10S
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  10S
  
    
    
    
 
    
 
    Inside of the library source code, mark all your
      modifications thoroughly. Generate a notice text file, if it still
      does not exist. Expand the notice text file by a description
      of your modifications.
      
    
    Arrange your source code distribution so that the integrated
      Apache license and the notice text file clearly refer only to the
      embedded library and do not disturb the licensing of your own overarching
      work. It's a good tradition to keep embedded components like
      libraries, modules, snippets, or plugins in a specific directory which
      contains also all additional licensing elements.
  
  
    
    
  
Apache-2.0-C9: Passing a modified library as embedded binary
Apache-2.0-C9
  10B
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  10B
  
    
    
    
 
    
     
    Even if you do not want to distribute your modified source
      code, mark all your modifications of the embedded libary thoroughly.
      
    
  
    Arrange your binary distribution so that the integrated Apache
      license and the notice text file clearly refer only to the embedded
      library and do not disturb the licensing of your own overarching
      work. It's a good tradition to keep the libraries, modules, snippet, or
      plugins in specific directories which contain also all licensing elements.
  
  
    
    
  
Discussions and Explanations
  On the one hand, the Apache 2.0 license does not permit
  [] to use the trade names, trademarks, service marks, or
  product names of the Licensor, except as required for reasonable and customary
  use in describing the origin of the Work and reproducing the content of the
  NOTICE file[cf.][wp. §6]Apl20OsiLicense2004a. On the other
  hand, this license alerts that all the patent licenses granted to those who
  [] institute a patent litigation will terminate
  automatically[cf.][wp. §3]Apl20OsiLicense2004a. Hence, the
   generally (Apache-2.0-C1 - Apache-2.0-C9) interdicts to promote products or services by
  these elements and to legally fight against patents linked to the software.
  
  The Apache-2.0 also requires to [] give any other recipients of
  the Work or Derivative Works a copy of this License[cf.][wp.
  §4.1]Apl20OsiLicense2004a. Therefore, all 2others use cases contain
  the respective mandatory condition (Apache-2.0-C2 - Apache-2.0-C9).
   
  Additionally, the Apache-2.0 requires, that modifications must be
  marked[cf.][wp. §4.2]Apl20OsiLicense2004a. Thus, in all
  cases of passing the modified software in the form of source code the 
  requires to mark the modifications and to integrate a hint into the notice
  file---while in all the cases of passing the modified software in the form of
  binaries it inserts only a voluntary condition (Apache-2.0-C4 - Apache-2.0-C9).
  
  Furthermore, the Apache-2.0 requires that one must [] retain, in
  the Source form of any Derivative Works that You distribute, all copyright,
  patent, trademark, and attribution notices from the Source form of the Work
  So, the OSLIC requires in all contexts (Apache-2.0-C1 - Apache-2.0-C9) that the licensing
  elements are retained in the form you have received them 
.
  
  Finally, the Apache-2.0 requires that the received ``NOTICE text file''
  must be integrated as readable copy to each package distributed in the form of
  source code, or---in case of binary distibutions---must be displayed
  [] if and wherever such third-party notices normally
  appear[cf.][wp. §4.4]Apl20OsiLicense2004a. Thus, the
   requires mandatorily that all source code distributions must include
  the notice text file (Apache-2.0-C2, Apache-2.0-C4, Apache-2.0-C6,
  Apache-2.0-C8) and that all distributions of binary applications which
  normally show such a copyrigth screen must integrate the content of the notice
  file into this screen (Apache-2.0-C5, Apache-2.0-C9). For libraries
  distributed in the form of binaries it is assumed that they normally do not
  contain such copyright dialogs (Apache-2.0-C7)
BSD licensed software
As an approved open source license, the BSD license exists in two
versions
   
  
The latest release is the BSD 2-Clause license,, the
older release is the BSD 3-Clause license. The very little
differences between the two versions have to be respected exactly. 
All BSD open source licenses focus explicitely on the (re-)distribution
open source use cases, which we have specified by our token
2others. Conditions for the other use cases specified by the token
4yourself can be derived.
   
 
Additionally the BSD licenses distinguishes between different forms of distribution,
esp. whether the work is distributed as a (set of) source code file(s) or as a
set of binary file(s). Use the following tree to find the BSD license fulfilling
to-do lists. 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l81) at (4,11.8) BSD;
[nodv] (l71) at (0,10.2) 3-Clause License;
[nodv] (l72) at (6.5,10.2) 2-Clause License;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) 
  BSD2-C1 
  BSD3-C1 
  using software only for yourself;
[leaf] (l12) at (1.8,0)  
  BSD2-C2 
  BSD3-C2 
   distributing unmodified software as sources;
[leaf] (l13) at (3.6,0)  
  BSD2-C3  
  BSD3-C3  
   distributing unmodified software as binaries;
[leaf] (l14) at (5.4,0)  
  BSD2-C4  
  BSD3-C4  
   distributing modified program as sources;
[leaf] (l15) at (7.2,0)  
  BSD2-C5  
  BSD3-C5  
   distributing modified program as binaries;
[leaf] (l16) at (9,0)  
  BSD2-C6  
  BSD3-C6  
   distributing modified library as independent sources;
[leaf] (l17) at (10.8,0)  
  BSD2-C7 
  BSD3-C7 
  distributing modified library as independent binaries;
[leaf] (l18) at (12.6,0)  
  BSD2-C8  
  BSD3-C8  
  distributing modified library as embedded sources;
[leaf] (l19) at (14.4,0)  
  BSD2-C9  
  BSD3-C9  
   distributing modified library as embedded binaries;
[edge] (l81) -- (l71);
[edge] (l81) -- (l72);
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l72) -- (l61);
[edge] (l72) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
 
  
BSD3 
BSD-3-Clause
New BSD (3 Clauses)
BSD-3-Clause
BSD-3-Clause-C1: Using the software only for yourself
BSD-3-Clause-C1
  01 
  03 
  06
  09
  
   
  
  
    You are allowed to use any kind of BSD software in any sense and
      in any context without any obligations as long as you do not give the
      software to 3rd parties.
  
  
    
     
. 
  
BSD-3-Clause-C2: Passing the unmodified software as source code
BSD-3-Clause-C2
  02S 
  05S 
  07S 
  
  
  
    
    
  
  
    
  
BSD-3-Clause-C3: Passing the unmodified software as binary
BSD-3-Clause-C3
  02B 
  05B 
  07B 
  
  
    
    
    
  
  
    
  
BSD-3-Clause-C4: Passing a modified program as source code
BSD-3-Clause-C4
  04S
  
  
  
    
    
    
  
  
    
  
BSD-3-Clause-C5: Passing a modified program as binary
BSD-3-Clause-C5
  04B
  
  
  
    
    
    
  
  
    
  
BSD-3-Clause-C6: Passing a modified library as independent source code
BSD-3-Clause-C6
  08S
  
  
  
    
    
  
  
    
  
BSD-3-Clause-C7: Passing a modified library as independent binary
BSD-3-Clause-C7
  08B
  
  
  
    
    
  
  
    
  
BSD-3-Clause-C8: Passing a modified library as embedded source code
BSD-3-Clause-C8
  10S
  
  
  
    
    
    
    
  
  
    
  
BSD-3-Clause-C9: Passing a modified library as embedded binary
BSD-3-Clause-C9
  10B
  
  
  
    
    
    
    
  
  
    
  
BSD2
BSD-2-Clause
Simplified BSD (2 Clauses)
BSD-2-Clause
BSD-2-Clause-C1: Using the software only for yourself
BSD-2-Clause-C1
  01 
  03 
  06
  09
  
   
  
  
    You are allowed to use any kind of BSD software in any sense and
      in any context without any obligations as long as you do not give the
      software to 3rd parties.
  
  
BSD-2-Clause-C2: Passing the unmodified software as source code
BSD-2-Clause-C2
  02S 
  05S 
  07S 
  
  
  
    
    
  
  
BSD-2-Clause-C3: Passing the unmodified software as binary
BSD-2-Clause-C3
  02B 
  05B 
  07B 
  
  
    
    
    
  
  
BSD-2-Clause-C4: Passing a modified program as source code
BSD-2-Clause-C4
  04S
  
  
  
    
    
    
  
  
BSD-2-Clause-C5: Passing a modified program as binary
BSD-2-Clause-C5
  04B
  
  
  
    
    
    
  
  
BSD-2-Clause-C6: Passing a modified library as independent source code
BSD-2-Clause-C6
  08S
  
  
  
    
    
  
  
BSD-2-Clause-C7: Passing a modified library as independent binary
BSD-2-Clause-C7
  08B
  
  
  
    
    
  
  
BSD-2-Clause-C8: Passing a modified library as embedded source code
BSD-2-Clause-C8
  10S
  
  
  
    
    
    
    
  
  
BSD-2-Clause-C9: Passing a modified library as embedded binary
BSD-2-Clause-C9
  10B
  
  
  
    
    
    
    
  
  
Discussions and Explanations
The BSD 2-Clause license has a simple structure: In the
beginning, it generally (permits) redistribution and use in
source and binary forms, with or without modification, [], if one
fulfills the two rules of the license.
The first rule concerns the (re)distribution in the form of source code, 
the second the (re)distribution of binary packages. Here are some
explanations why we translated the rules into which sets of executable tasks:
For the redistribution of source code, the license requires
  that the package must  [] retain the above copyright notice,
  this list of conditions and the following disclaimer.
  Hence, you are not allowed to modify any of the copyright notes which are
  already embedded in the (source) files. And from a logical point of view,
  there must exist an explicit or implicit assertion that the software is
  licensed under the BSD 2-Clause license
   
 
  This is often implemented by simply adding a copy of the license into the
  package. Hence, you are furthermore not allowed to modify these files or
  corresponding text snippets. For our purposes, we translated the bans into the
  following executable task: 
For the redistribution in the form of binary files, the license requires,
  that the licensing elements must be [] (reproduced) in the
  documentation and/or other materials provided with the distribution.
  
  Hence, this is not required as a necessary condition for the (re)distribution
  as source code package. But nevertheless, even for a distribution in the form
  of source code, it is often possible to fulfill this rule, too---e.g., if you
  offer your own download site for source code packages.  In such cases, it is a
  sign of respect to mention the licensing not only inside the packages, but
  also in the text of your site. Because of that, we added the following
  voluntary task for all BSD open source use cases which deal with the
  redistribution in the form of source code: 
Naturally, because the reproduction of the licensing elements in
  the documentation and/or other materials provided with the distribution is
  explicitly required for the redistribution in binary form,
   
  we had to rewrite the facultative task for a distribution in the form of
  source code as a mandatory task for all BSD open source use cases which deals
  with the redistribution in binary form.
In case of (re)distributing the program in the form of binary files, it is
  sometimes not enough, to pass the licensing elements as one has received them.
  If you compile the binary package from the source code, it is not necessarily
  true, that the licensing elements are also automatically generated and
  embedded into the `binary package.' But nevertheless, you have to add the
  copyright notice, the conditions and the disclaimer to this package for acting
  according to the BSD license. Therefore we chose the following form of an
  executable, license fulfilling task for all binary distributions:
Finally, we wished to insert a hint to the general (open source) tradition
  to mention the open source software used and their licenses as part of the
  `copyright widget' of an application. This is not required by the BSD
  license. But it is a general, good tradition. Naturally, because of the
  freedom to use and modify open source software and to redistribute a modified
  version of it, you are also allowed to insert such references, even if they
  are missing. Therefore we added a third voluntary task to honor this tradition
  for all relevant open source use cases.
CDDL licensed software [tbd]
Also, []
Thus, for
finding the relevant, simply processable task lists, also the following CDDL
specific open source use case structure 
 can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l71) at (4,10) CDDL;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) CDDL-1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  CDDL-2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  CDDL-3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  CDDL-4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  CDDL-5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  CDDL-6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  CDDL-7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  CDDL-8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  CDDL-9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
CDDL-1: Using the software only for yourself
  
 
[means] that you are going to use a received CDDL licensed software only
for yourself and that you do not hand it over to any 3rd party in any sense.
[covers] OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
[requires] 
[prohibits] 
CDDL-2: Passing the unmodified software as source code
   
[means] that you are going to distribute an unmodified version of the
received CDDL software to 3rd parties - in the form of source code files or as a
source code package. In this case it is not discriminating to distribute a
program, an application, a server, a snippet, a module, a library, or a plugin
as an independent or an embedded unit
[covers] OSUC-02S, OSUC-05S, OSUC-07S 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-3: Passing the unmodified software as binaries 
  
[means] that you are going to distribute an unmodified version of the
received CDDL software to 3rd parties -- in the form of binary files or as a
binary package. In this case it is not discriminating to distribute a
program, an application, a server, a snippet, a module, a library, or a plugin
as an independent or an embedded unit.
[covers] OSUC-02B, OSUC-05B, OSUC-07B 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-4: Passing a modified program as source code
 
[means] that you are going to distribute a modified version of the received
CDDL licensed program, application, or server (proapse) to 3rd parties -- in the
form of source code files or a source code package.
[covers] OSUC-04S 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-5: Passing a modified program as binary
 
[means] that you are going to distribute a modified version of the received
CDDL licensed program, application, or server (proapse) to 3rd parties -- in
the form of binary files or as a binary package.
[covers] OSUC-04B 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-6: Passing a modified library as independent source code
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin (snimoli) to 3rd parties
-- in the form of source code files or as a source code package, but without
embedding it into another larger software unit.
[covers] OSUC-08S 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-7: Passing a modified library as independent binary
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin (snimoli) to 3rd parties
-- in the form of binary files or as a binary package but without embedding it
into another larger software unit.
[covers] OSUC-08B 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-8: Passing a modified library as embedded source code
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin (snimoli) to 3rd parties
-- in the form of source code files or as a source code package together with
another larger software unit which contains this code snippet, module, library,
or plugin as an embedded component.
[covers] OSUC-10S 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
CDDL-9: Passing a modified library as embedded binary
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin to 3rd parties -- in the
form of binary files or as a binary package together with another larger
software unit which contains this code snippet, module, library, or plugin as an
embedded component.
[covers] OSUC-10B 
[requires] the following tasks in order to fulfill the license conditions:
  
  
  
[prohibits] 
  
Discussions and Explanations
The CDDL offers which contains nearly all
requirements[cf.][wp. §3]Cddl10OsiLicense2004a. Only for some
  
EPL-1.0 licensed software
EPL
EPL-1.0
Eclipse Public License 1.0
EPL
The Eclipse Public License clearly distinguishes the distribution in the form of
source code from that in the form of binaries: First, it allows to
distribute Eclipse licensed programs in source code and in
object code.§3 Then it specifies under which conditions one may
distribute the program as a set of binaries.§3 top area One of
these conditions is---roughly speaking---that the distributor makes the sources
available too.§3 mid area More precisely, the EPL-1.0 has to be taken as a
license with weak copyleft ( , p. EPL).
The other conditions refer to the distribution in general---no matter what form
or state is used.§3 bottom area So, taken as whole, the EPL-1.0 mainly
focusses on the distribution of software.  Thus, for finding the relevant, easy
to process task lists, the following EPL-1.0 specific open source use case 
structure
   
can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l71) at (4,10) EPL-1.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) EPL-1.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  EPL-1.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  EPL-1.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  EPL-1.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  EPL-1.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  EPL-1.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  EPL-1.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  EPL-1.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  EPL-1.0-C9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
 
  
  
 
   
 
 
 
EPL-1.0-C1: Using the software only for yourself
EPL-1.0-C1
  01 
  03 
  06 
  09
  that you received EPL-1.0 licensed software, that you will use it
  only for yourself, and that you do not hand it over to any 3rd party in any
  sense. 
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
    You are allowed to use any kind of EPL-1.0 software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
    
    
  
EPL-1.0-C2: Passing the unmodified software as source code
EPL-1.0-C2
  02S 
  05S
  07S 
  that you received EPL-1.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified source code
  files or as unmodified source code package. In this case it makes no
  difference if you distribute a program, an application, a server, a snippet, a
  module, a library, or a plugin as an independent or as an embedded unit. 
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    source code  
    
  
  
    
    
  
EPL-1.0-C3: Passing the unmodified software as binaries 
EPL-1.0-C3
  02B 
  05B 
  07B 
  that you received EPL-1.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified binary files or
  as unmodified binary package. In this case it does not matter if you distribute
  a program, an application, a server, a snippet, a module, a library, or a
  plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
  
     
    binary
    the software
    
    EPL-1.0-C2
    
  
  
    
    
  
EPL-1.0-C4: Passing a modified program as source code
EPL-1.0-C4
  04S 
  that you received an EPL-1.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package.
  04S
  
    
    
    
    
     
    source code 
    
  
 
  
    
    
  
EPL-1.0-C5: Passing a modified program as binary
EPL-1.0-C5
  04B
  that you received an EPL-1.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  04B
  
     
    
    
    
    binary 
    the program
    
    EPL-1.0-C4
    
  
  
    
    
  
EPL-1.0-C6: Passing a modified library as independent source code
EPL-1.0-C6
  08S
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  08S
  
    
    
    
    
     
    source code
    
  
  
    
    
  
EPL-1.0-C7: Passing a modified library as independent binary
EPL-1.0-C7
  08B
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  08B
  
     
    
    
    
    binary
    the modified library
    
    EPL-1.0-C6
    
  
  
    
    
  
EPL-1.0-C8: Passing a modified library as embedded source code
EPL-1.0-C8
  10S
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  10S
  
    
    
    
    
    source code 
     
    source code
    
  
  
    
    
  
EPL-1.0-C9: Passing a modified library as embedded binary
EPL-1.0-C9
  10B
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  10B
  
     
    
    
    binary 
    the embedded library
    
    
    EPL-1.0-C8
    binary
    
  
  
    
    
  
Discussions and Explanations
The EPL-1.0 contains a succinct section Requirements§3
complemented by some definitions concerning a Commercial
Distribution§4: First, it describes what a distributor must do for
correctly distributing an Eclipse licensed program as a set of binaries. Then,
it explains, what must be done to comply with the license when distributing the
software as source code.  Finally, it lists two conditions which must be
fulfilled in any case.§3  
With respect to this structure, we can discover the following tasks:
  The EPL-1.0 generally requires that Contributors may not remove or
    alter any copyright notices contained within the Program§3 where
    the word `Contributor' has to be read as any person or entity that
    distributes the Program, and the word `Program' denotes the
    initial contribution and all its modifications.§1 
    Similar to the EUPL and at least in a very strict reading, the EPL-1.0 does not
    limit these requirements to the distribution of the software
    (2others). But in practice it will be difficult to control the
    compliant use of the software in those cases where one uses the software
    only for oneself. But opposite to, for example, the EUPL, the EPL-1.0 clearly
    contains this interdiction. The  solves this practical inconsistence
    duplicating the message: On the one hand, it rewrites the negative condition
    as a mandatory positive assertion for the 2others use cases (EPL-1.0-C2 --
    EPL-1.0-C9). This should emphasize the activity to retain the copyright
    notes in exact the form one has received them. On the other hand, the 
    inserts the corresponding interdiction into the `prohibits' section of the
    4yourself use cases (EPL-1.0-C1 -- EPL-1.0-C9).
  
  Furthermore, the EPL-1.0 requires that each Contributor must
    identify itself as the originator of its Contributions [] in a manner
    that reasonably allows subsequent Recipients to identify the originator of
    the Contribution,§3 In this case, `Contribution' has to be read
    as the initial code and documention together with all subsequent
    modifications of these parts.§1 To fulfill this condition
    faithfully, a developer must mark and describe his modifications of the
    source code within this source code; and the distributor must describe these
    modifications on the more general level of software features in a file
    sometimes called CHANGES. At a first glance, the requirement to document the
    source code modifications within the source code seems to be restricted to
    the use cases which concern the distribution of a modified EPL-1.0 software in
    the form of source code. But the EPL-1.0 allows the distribution in the form of
    binaries only if the distributor also states where one can obtain the
    correspoding code.§3 So, distributing the binaries implies the
    distribution of the source code.  Therefore the  inserts the two
    requirements as mandatory clauses into all the use cases concerning the
    distribution of a modified EPL-1.0 software (EPL-1.0-C4 -- EPL-1.0-C9).
  
  For all distributions in the form of source code the EPL-1.0 requires that
    the software [] must be made available under this (Eclipse
    Public License 1.0) Agreement and that [] a copy of this
    Agreement must be included with each copy of the Program.§3 
    Thus, the  inserts a respective mandatory clause into the use cases
    (EPL-1.0-C4, EPL-1.0-C6, EPL-1.0-C8). But the EPL-1.0 is a license with a weak copyleft
     . 
    Therefore, this conditions does not cover the overarching program which uses
    the embedded library (EPL-1.0-C8).
    
  Additionally, the EPL-1.0 allows to distribute the software in the form
    of binaries if the distributor [] effectively disclaims on
    behalf of all Contributors all warranties and conditions [] (and)
    effectively excludes on behalf of all Contributors all liability for
    damages [] in the broadest sense.§3 This limitation of
    liability is very important to the EPL-1.0. Thus, it further specifies and
    explains this aspect once more in another section titled Commercial
    Distribution. There, this aspect is no longer focussed only on a
    distribution in the form of binaries.§4 So the  inserts a
    mandatory clause into all use cases concerning the distribution that the
    paragraph of No Warranty§5 and the Disclaimer
    of Liability§6 of the EPL-1.0 must explicitly be present in the
    documentation of distribution package and---if technically possible---
    presented by the copyright screen.   
  
  Aside from that, the EPL-1.0 allows the distribution of the software in the
    form of binaries only if the distributor clearly [] states that
    the source code for the program is available from such Contributor
    (distributor) [] and if he additionally [] informs
    licensees how to obtain it in a reasonable manner []§3 
    This requirement can only be fulfilled seriously if the distributor himself
    offers the source code via a repository. It is not sufficient to point to
    any external download repository in the world wide web. Thus,---for all use
    cases concerning the distribution in the form of binaries---the 
    follows the respective requirement introduced by the EPL-1.0 (EPL-1.0-C3, EPL-1.0-C5,
    EPL-1.0-C7, EPL-1.0-C9).  
  
  Moreover, one has clearly to state that the previous rule implies a real
    source code distribution which therefore must follow the rules of
    distributing the software. Thus, the  requires in all cases of a binary 
    distribution to execute also the task-lists of the respective source code
    use cases. 
 
 	Finally, the EPL-1.0 contains a patent clause stating that if
 	any recipient institutes patent litigation against any entity []
 	alleging that the Program itself [] infringes such Recipient's
 	patent(s), then such Recipient's rights granted [by the EPL-1.0] shall
 	terminate []§7. Based on this fact, the  generally
 	(EPL-1.0-C1 -- EPL-1.0-C9) interdicts to legally fight against patents linked to the software.
EUPL-1.1 licensed software
EUPL 
EUPL-1.1
European Union Public License 1.1
1.1
EUPL
The European Union Public License explicitly distinguishes the distribution of
the source code from that of the binaries: In the chapter Communication
of the Source Code, it allows to provide the Work either in its Source
Code form, or as Executable Code.§3 But if a piece of EUPL-1.1 licensed
software is distributed as binary package, then the license additionally
requires that the distributor either [] provides a
machine-readable copy of the Source Code [] directly together with the
binaries§5 or that he [] indicates [] a
repository where the Source Code is easily and freely accessible for as long 
as the Licensor continues to distribute [] the Work.§3 For
respecting this conditions it is irrelevant whether the software has been
modified or not and all the other obligations of the licensee refer to
both forms.§5
There is a particular aspect which has to be considered for acting in
accordance to the EUPL-1.1: Taken literally, the EUPL is a license with a weak
copyleft, no doubt. But this happens only a result of the fact that the EUPL-1.1
allows the licensee to relicense the software by following the conditions of the
Compatibility clause§5 and an license listed in an
appendix, which also includes some licenses with a weak copyleft.
    
But, with respect to question how to fulfill the license best, it is safer to
treat the EUPL-1.1 as a license with a strong copyleft. Concerning the use of an
unmodified or a modified library as an embedded component, a license with 
a strong copyleft implies that the application which is using the
(un)modified library has also to be licensed under the same conditions as the
library itself. 
Thus, to find a simple to process task lists, use the following EUPL-1.1
specific open source use case structure:
   
 
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=1.5cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
slimleaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l801) at (4,10.2) EUPL-1.1;
[nodb] (l601) at (0,8.6) recipient: 
 4yourself;
[nodb] (l602) at (7.5,8.6) recipient: 
 2others;
[nodb] (l501) at (4,7) state: 
 unmodified;
[nodb] (l502) at (11,7) state: 
 modified;
[nodb] (l401) at (2.25,5.4) type: 
 proapse or snimoli;
[nodb] (l402) at (5.4,5.4) type: 
 snimoli;
[nodb] (l403) at (8.4,5.4) type: 
 proapse;
[nodb] (l404) at (12.8,5.4) type: 
 snimoli;
[nodb] (l301) at (2.25,3.8) context: 
 independent;
[nodb] (l302) at (5.4,3.8) context: 
 embedded;
[nodb] (l303) at (8.4,3.8) context: 
 independent;
[nodb] (l304) at (11.3,3.8) context: 
 independent;
[nodb] (l305) at (14.3,3.8) context: 
 embedded;
[nods] (l201) at (1.45,2.2) form: source;
[nods] (l202) at (3.0,2.2) form: binary;
[nods] (l203) at (4.6,2.2) form: source;
[nods] (l204) at (6.2,2.2) form: binary;
[nods] (l205) at (7.7,2.2) form: source;
[nods] (l206) at (9.1,2.2) form: binary;
[nods] (l207) at (10.5,2.2) form: source;
[nods] (l208) at (11.9,2.2) form: binary;
[nods] (l209) at (13.4,2.2) form: source;
[nods] (l210) at (15.0,2.2) form: binary;
[slimleaf] (l101) at (0,0) EUPL-1.1-C1 using software only
for yourself;
[leaf] (l102) at (1.45,0)  EUPL-1.1-C2  distributing unmodified
software as independent sources;
[leaf] (l103) at (3.0,0)  EUPL-1.1-C3   distributing unmodified
software as independent binaries;
[leaf] (l104) at (4.6,0)  EUPL-1.1-C4  distributing unmodified
library as embedded sources;
[leaf] (l105) at (6.2,0)  EUPL-1.1-C5   distributing unmodified
library as embedded binaries;
[slimleaf] (l106) at (7.7,0)  EUPL-1.1-C6   distributing modified
program as sources;
[slimleaf] (l107) at (9.1,0)  EUPL-1.1-C7   distributing modified
program as binaries;
[slimleaf] (l108) at (10.5,0)  EUPL-1.1-C8   distributing modified
library as independent sources;
[slimleaf] (l109) at (11.9,0)  EUPL-1.1-C9 distributing modified
library as independent binaries;
[leaf] (l110) at (13.4,0)  EUPL-1.1-CA  distributing
modified library as embedded sources;
[leaf] (l111) at (15,0)  EUPL-1.1-CB   distributing modified
library as embedded binaries;
[edge] (l801) -- (l601);
[edge] (l801) -- (l602);
[edge] (l602) -- (l501);
[edge] (l602) -- (l502);
[edge] (l501) -- (l401);
[edge] (l501) -- (l402);
[edge] (l502) -- (l403);
[edge] (l502) -- (l404);
[edge] (l401) -- (l301);
[edge] (l402) -- (l302);
[edge] (l403) -- (l303);
[edge] (l404) -- (l304);
[edge] (l404) -- (l305);
[edge] (l301) -- (l201);
[edge] (l301) -- (l202);
[edge] (l302) -- (l203);
[edge] (l302) -- (l204);
[edge] (l303) -- (l205);
[edge] (l303) -- (l206);
[edge] (l304) -- (l207);
[edge] (l304) -- (l208);
[edge] (l305) -- (l209);
[edge] (l305) -- (l210);
[edge] (l601) -- (l101);
[edge] (l201) -- (l102);
[edge] (l202) -- (l103);
[edge] (l203) -- (l104);
[edge] (l204) -- (l105);
[edge] (l205) -- (l106);
[edge] (l206) -- (l107);
[edge] (l207) -- (l108);
[edge] (l208) -- (l109);
[edge] (l209) -- (l110);
[edge] (l210) -- (l111);
 
 
 
 
  
EUPL-1.1-C1: Using the software only for yourself
EUPL-1.1-C1
  01
  03
  06
  09
  that you received EUPL-1.1 licensed software, that you will use it
  only for yourself and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
 
  
    You are allowed to use any kind of EUPL-1.1 software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
  
    
  
EUPL-1.1-C2: Passing the unmodified software as independent sources
EUPL-1.1-C2
  02S
  05S
  that you received EUPL-1.1 licensed software which you are now going
  to distribute to third parties as an independent unit and in the form of
  unmodified source code files or as unmodified source code package. In this
  case it makes no difference if you distribute a program, an application, a
  server, a snippet, a module, a library, or a plugin as an independent or as an
  embedded unit.
  OSUC-02S, OSUC-05S 
 
  
    
    
    
  
  
    
  
EUPL-1.1-C3: Passing the unmodified software as independent binaries 
EUPL-1.1-C3
  02B
  05B
  that you received EUPL-1.1 licensed software which you are now going to
  distribute to third parties as an independent unit and in the form of
  unmodified binary files or as unmodified binary package. In this case it does
  not matter if you distribute a program, an application, a server, a snippet, a
  module, a library, or a plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B 
 
  
     
    
    
    
    EUPL-1.1-C2
    
  
  
    
  
EUPL-1.1-C4: Passing the unmodified library as embedded sources
EUPL-1.1-C4
  07S
  that you received a EUPL-1.1 licensed snippet, module or
  library which you are now going to distribute to third parties as an embedded
  component of a larger unit and in the form of unmodified source code files or as
  unmodified source code package.
  OSUC-07S 
 
  
    
    
    
    
    
  
  
    
  
EUPL-1.1-C5: Passing the unmodified library as embedded binaries 
EUPL-1.1-C5
  07B
  that you received a EUPL-1.1 licensed snippet, module or
  library which you are now going to distribute to third parties as an embedded
  component of a larger unit and in the form of unmodified binary files or as
  unmodified binary package.
  OSUC-07B 
 
  
     
    
    
    
    
    EUPL-1.1-C4
    
    
  
  
    
  
EUPL-1.1-C6: Passing a modified program as source code
EUPL-1.1-C6
  04S 
  that you received a EUPL-1.1 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package. 
  OSUC-04S 
 
  
    
    
    
    
    
    
  
 
  
    
  
EUPL-1.1-C7: Passing a modified program as binary
EUPL-1.1-C7
  04B
  that you received a EUPL-1.1 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  OSUC-04B 
 
  
     
    
    
    
    
    
    EUPL-1.1-C6
    
    
  
  
    
  
EUPL-1.1-C8: Passing a modified library as independent source code
EUPL-1.1-C8
  08S
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  OSUC-08S 
 
  
    
    
    
    
    
    
  
  
    
  
EUPL-1.1-C9: Passing a modified library as independent binary
EUPL-1.1-C9
  08B
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  OSUC-08B 
 
  
     
    
    
    
    
    
    EUPL-1.1-C8
    
    
  
  
    
  
EUPL-1.1-CA: Passing a modified library as embedded source code
EUPL-1.1-CA
  10S
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  OSUC-10S 
 
  
    
    
    
    
    
    
    
    
  
  
    
  
EUPL-1.1-CB: Passing a modified library as embedded binary
EUPL-1.1-CB
  10B
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  OSUC-10B 
 
  
    
    
    
    
    
    EUPL-1.1-CA
    
    
    
    
  
  
    
  
Discussions and Explanations
  
The EUPL-1.1 generally [] does not grant permission to use
  the trade names, trademarks, service marks, or names of the Licensor, except
  as required for reasonable and customary use in describing the origin of the
  Work and reproducing the content of the copyright notice.§5 
  Therefore, the  genreally interdicts (EUPL-1.1-C1 -- EUPL-1.1-CB) to promote any
  service or product based on this software by such elements. 
The EUPL-1.1 generally requires that [] the Licensee shall
  keep intact all copyright, patent or trademarks notices and all notices that
  refer to the Licence and to the disclaimer of warranties.§5 
  In a very strict reading, the EUPL-1.1 does not limit this requirement to the
  distribution of the software. But in practise, it will be impossible to
  control the compliant use of the software in those cases (4yourself)
  unless you also start to distribute the software. Therefore the  only
  inserts this requirement as a mandatory clause only for the 2others use 
  cases (EUPL-1.1-C2 -- EUPL-1.1-CB). 
  
The EUPL-1.1 also requires to [] include [] a copy of
  the (EUPL-1.1) Licence with every (distributed) copy of the Work.§5
  Therefore, all 2others use cases contain the respective mandatory
  condition (EUPL-1.1-C2 -- EUPL-1.1-CB).
  
Additionally, the EUPL-1.1 requires that the licensee who
  distributes a modified work [] must cause any Derivative Work 
  to carry prominent notices stating that the Work has been modified and the
  date of modification.§5 
  Thus, the  integrates the mandatory requirement to generate (update) a
  respective notice file into all `modification' use cases and recommends to mark
  all modifications in the source code (EUPL-1.1-C6 -- EUPL-1.1-CB).
  
Furthermore, the EUPL-1.1 requires that any distributor of the software
  [] provide a machine-readable copy of the Source Code []
  by [] (indicating) a repository where this Source will be
  easily and freely available for as long as the Licensee continues to
  distribute [] the Work.
   
 
  Therefore the  inserts a respective requirement into the task list of all
  cases concerning a binary distribution (EUPL-1.1-C3, EUPL-1.1-C7, EUPL-1.1-C9, and EUPL-1.1-CB)
  
Finally, the EUPL-1.1 contains a copyleft clause stating that if a
  [] Licensee distributes [] copies of the Original Works
  or Derivative Works based upon the Original Work, this Distribution [...] will
  be done under the terms of this (EUPL-1.1) Licence []. In all the use cases
  which do not concern the use of an embedded component (EUPL-1.1-C2 -- EUPL-1.1-C9) this
  copyleft clause is already fulfilled by either distributing the modified
  sources themselves or by making them accessible via a repository. In those
  cases where the licensee distributes an program that uses an embedded EUPL-1.1
  licensed component (EUPL-1.1-CA -- EUPL-1.1-CB), in general, the code of the embedding
  program must also be distributed. Thus, with respect to the use case (EUPL-1.1-CA)
  this is already fulfilled by definition. Therefore, the  only mentions
  this default view in the case EUPL-1.1-CB implying a strong copyleft effect.
   
GPL licensed software
Both versions of the GNU General Public License explicitly distinguish the
distribution of the source code from that of the binaries: On the one hand, the
GPL-2.0 mainly talks about copying and distributing the source
code,§1, §2 but also mentions the specific conditions for
[] (copying) and (distributing) the Program [] in object
code or executable form []§3 On the other hand, the GPL-3.0
describes the Basic Permissions and the conditions for
Conveying Verbatim Copies or for Conveying Modified Source
Versions§2, §4, §5 before it explains the rules for
Conveying Non-Source-Forms.§2, §4, §5  
GPL-2.0 and GPL-3.0 mainly talk about copying and distributing the
software; private use is nearly completely unspecified: The GPL-2.0 lists its
`restrictions' only with respect to the act of copying and distributing
copies of the program§1, §2, §4 et passim; emphasize by
KR while the GPL-3.0 explicitly specifies that one [] may
make, run and propagate covered works that (one does) not convey, without
conditions so long as (the) license otherwise remains in
force.§2 
As licenses with a strong copyleft, they require that any application that
contains a GPL-licensed library must itself be licensed under the same
conditions as the library.
 
Finally, the GPL-2.0 and the GPL-3.0 aim for the same results and share the
same spirit by requiring nearly the same task to be performed for fulfilling the
license conditions.  Therefore it is appropriate to cover both versions in the
same chapter and to offer a common specialized GPL open source use case
structure for quickly finding the appropriate task list.
   
However, the task lists themselves will be kept separate.
In the following diagram, GPL-*-C1 (GPL-*-C2, , GPL-*-CB) is either
GPL-2.0-C1 (and so forth), if you are looking for the GPL-2.0 use case, or
GPL-3.0-C1, for the GPL-3.0 use case.
GPL2.03.0
 
 
 
GPL2 
GPL-2.0
General Public License Version 2
GPL
GPL-Using the software only for yourself
GPL-
  01 
  03
  06 
  09
  
  
    You are allowed to use any kind of GPL-software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
GPL-Passing the unmodified software as independent sources
GPL-
  02S
  05S
  
  
    
    
    
    
    
  
  
GPL-Passing the unmodified software as independent binaries 
GPL-
  02B 
  05B
  
  
    
    
    
    
    
    
    GPL-
    
  
  
GPL-Passing the unmodified library as embedded sources
GPL-
  07S 
  
  
    
    
    
    
    
    
    
  
  
GPL-Passing the unmodified library as embedded binaries 
GPL-
  07B 
  
  
    
    
    
    
    
    
    
    
    GPL-
    
  
  
GPL-Passing a modified program as source code
GPL-
  04S 
  
  
    
    
    
    
    
    
    
    
    
  
  
GPL-Passing a modified program as binary
GPL-
  04B
  
  
    
    
    
    
    
    
    
    
    
    GPL-
    
    
  
  
GPL-Passing a modified library as independent source code
GPL-
  08S
  
  
    
    
    
    
    
    
    
    
  
  
GPL-Passing a modified library as independent binary
GPL-
  08B
  
  
    
      
    
    
    
    
    GPL-
    
    
    
    
  
  
GPL-Passing a modified library as embedded source code
GPL-
  10S
  
  
    
    
    
    
    
    
    
    
    
    
  
  
GPL-Passing a modified library as embedded binary
GPL-
  10B
  
  
    
    
    
    
    
    
    GPL-
    
    
    
    
    
    
  
  
GPL3 
GPL-3.0
General Public License Version 3
GPL
GPL-Using the software only for yourself
GPL-
  01 
  03
  06 
  09
  
  
    You are allowed to use any kind of GPL software in any sense and in
      any context without being obliged to do anything as long as you do not
      give the software to third parties.
  
  
    
  
GPL-Passing the unmodified software as independent sources
GPL-
  02S
  05S
  
  
    
    
    
    
    
  
  
    
  
GPL-Passing the unmodified software as independent binaries 
GPL-
  02B 
  05B
  
  
    
    
    
    
    
    
    GPL-
    
  
  
    
  
GPL-Passing the unmodified library as embedded sources
GPL-
  07S 
  
  
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing the unmodified library as embedded binaries 
GPL-
  07B 
  
  
    
    
    
    
    
    
    
    
    GPL-
    
  
  
    
  
GPL-Passing a modified program as source code
GPL-
  04S 
  
  
    
    
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing a modified program as binary
GPL-
  04B
  
  
    
    
    
    
    
    
    
    
    
    GPL-
    
    
  
  
    
  
GPL-Passing a modified library as independent source code
GPL-
  08S
  
  
     
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing a modified library as independent binary
GPL-
  08B
  
  
    
      
    
    
    
    
    GPL-
    
    
    
    
  
  
    
  
GPL-Passing a modified library as embedded source code
GPL-
  10S
  
  
    
    
    
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing a modified library as embedded binary
GPL-
  10B
  
  
    
    
    
    
    
    
    GPL-
    
    
    
    
    
    
  
  
    
  
Discussions and Explanations
 
The GPL-2.0 allows to [] copy and (to) distribute verbatim copies
of the Program's complete source code as you receive it [...] provided that
you [a] conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; [b] keep intact all the notices
that refer to this License and to the absence of any warranty; and [c]
distribute a copy of this License along with the Program.§1 The
GPL-2.0 also allows to [] copy and distribute []
modifications (of the Program or any portion of it) [] under the terms
of Section 1§2 while it allows to distribute binaries
under the terms of Sections 1 and 2.§4 But the GPL-2.0
does not require any tasks if you are using the work only for yourself. Thus,
the quoted conditions of Section 1 are mandatory for all use cases
concerning the distribution of an GPL-2.0 licensed work (GPL-2.0-C2 --
GPL-2.0-CB)
  
The GPL-3.0 uses a similar structure to establish the same requirements: In §4
it allows to [] convey verbatim copies of the Program's source
code as you receive it [] provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice; keep
intact all notices stating that this License and any non-permissive terms
added in accord with section 7 apply to the code; keep intact all notices of
the absence of any warranty; and give all recipients a copy of this License
along with the Program. §5 also allows to [] convey []
modifications [] under the terms of section 4 [] and §6 gives
permission to [] convey a covered work in object form under the
terms of sections of 4 and 5.§4, §5, §6 In contrast to the
GPL-2.0, the GPL-3.0 explicitly states that one [] may make, run
and propagate covered works that (one) (does) not convey [distribute], without
conditions so long as (the GPL-3.0) license otherwise remains in
force.§2
Moreover, giving a package to a third party for getting a modified version back
has not to be taken as a case of distribution if the modification has only been
executed on behalf and only for the purpose of the purchaser and if the modified
version is not distributed to any third party.§2 If one collects
all these GPL-3.0 statements together, than one may conclude that the tasks
which fulfill the corresponding GPL-2.0 requirements together also fit the
GPL-3.0 conditions.
  
The GPL-2.0 allows to [] copy and (to) distribute the Program (or
a work based on it []) in object code or executable form [] provided
that you accompany it with the complete corresponding machine-readable source
code [] on a medium customarily used for software
interchange.§3, §3a As a substitution for this basic condition,
the GPL-2.0 allows to accompany the binary distribution package
[] with a written offer, valid for at least three years, to give
any third party, for a charge no more than your cost of physically performing
source distribution, a complete machine-readable copy of the corresponding
source code [] on a medium customarily used for software
interchange.§3b The  construes the common technique to
download files from the Internet as a distribution on a medium [being
today] customarily used for software interchange. Therefore, the  requires
for all open source use cases that refer to the distribution of binaries
(GPL-2.0-C3, GPL-2.0-C7, GPL-2.0-C9, GPL-2.0-CB) to make the corresponding
source code of the library itself accessible via an Internet repository under
your own control. 
  
The GPL-3.0 also explicitly requires to make the source code accessible in case
of distributing binaries. But opposite to the GPL-2.0, the GPL-3.0 explicitly
offers the option of giving [] access to copy the Corresponding
Source from a network server at no charge as a means to fulfill the
conditions.§6 and §6b So again, the tasks which ensure to act in
accordance to the GPL-2.0 license in case of distributing binaries, also fulfill
the conditions of the GPL-3.0.
The weakness that in this case third parties [which have received the
binaries] are not compelled to copy the source code [] is a concession
made by the GPL-2.0.§3, at the end But the necessity to offer the
source code via a repository controlled by yourself may generally not be
circumvented: The GPL-2.0 allows to redistribute a link to an external source
code repository only in case of noncommercial
distributions.§3c 
  
Both, the GPL-2.0 and the GPL-3.0 allow you to [] modify your
copy or copies of the Program or any portion of it [] and (to) copy and
distribute such modifications [] only under very similar restrictions and
conditions:§2 
First, modified files must be marked as modifications and the date of the
  modification.§2§5 These conditions must be respected by all
  open source use cases concerning the distribution of the modified work
  [GPL-2.0-C6/GPL-3.0C6 -- GPL-2.0-C9/GPL-3.0-C9], because even if one primarily
  intends to distribute binaries, one has also to deliver the source code. The
   captures this requirement in the mandatory condition to mark each
  modified file and the voluntary condition to update / generate a general
  changelog.
    
Second, both versions of the GPL require that all copies of the modified
  software which are using an interactive interface or a method to display
  messages must [] print or display an announcement including an
  appropriate copyright notice and a notice that there is no warranty []
  and that users may redistribute the program under these conditions, and
  telling the user how to view a copy of this License.§2c§5d
  The  rewrites this condition in the form that the work shall let its
  copyright dialog clearly reproduce the content of the existing copyright
  notices, the software name, a link to its homepage, the respective disclaimer
  of warranty, and a link to the GPL-2.0-file (or GPL-3.0-file, resp.), which
  has to be delivered together with the software.
  
  These conditions have to be respected if one redistributes the received and
  then modified programs (GPL-2.0-C6, GPL-2.0-C7, GPL-3.0-C6, GPL-3.0-C7) or if
  one distributes one's own programs which are using (modified) libraries as
  embedded components (GPL-2.0-CA, GPL-2.0-CB, GPL-3.0-CA, GPL-3.0-CB). For
  those open source use cases that concern the redistribution of received and
  modified libraries, etc., the  does not mention these requirements
  because libraries, plugins, or snippets normally do not have their own
  copyright dialogs.  
    
Third, the GPL requires to  [] cause any work (being
  distributed or published), that in whole or in part contains or is derived
  from the Program or any part thereof, to be licensed as a whole at no charge
  to all third parties under the terms of this (GPL.)§2b§5c
  This requirement does not depend of the form in which the software is
  distributed. The  adopts this statement in the following way:
  
  For all open source use cases which concern the distribution (GPL-2.0-C2
    GPL-2.0-CB, GPL-3.0-C2 GPL-3.0-CB), the  rewrites this
    condition as the mandatory requirement to retain all existing licensing
    elements.
      
  For all use cases which deal with the distribution of a modified version
    of the software (GPL-2.0-C6 GPL-2.0-CB, GPL-3.0-C6 
    GPL-3.0-CB), the OSliC adds the requirement to organize the modifications in
    a way that they are covered by the respective GPL-2.0 or GPL-3.0 licensing
    statements.
      
  For the use case which deal with the distribution of an embedded library
    (GPL-2.0-C4, GPL-2.0-C5, GPL-2.0-CA, GPL-2.0-CB, GPL-3.0-C4, GPL-3.0-C5,
    GPL-3.0-CA, GPL-3.0-CB) the  requires also to license the on-top
    development under the terms of the respective GPL-2.0 or GPL-3.0 license.
    
   
Finally, as parts of those task lists which concern the distribution in
  the form of binaries, the  reminds the reader also to execute the
  corresponding source code use cases because distributing the binaries without
  making the corresponding sources accessible is not allowed by the GPL.
  
LGPL licensed software
Both versions of the GNU Lesser General Public License explicitly distinguish
the distribution of the source code from that of the binaries: On the one hand,
the LGPL-2.1 mainly talks about copying and distributing the source
code.§1, §2, §5, §6 But it also directly mentions the specific
conditions for [] (copying) and (distributing) the Library
[] in object code or executable form []§4 On the other
hand, the LGPL-3.0 and the GPL-3.0---which have to be considered together
because the GPL-3.0 is included into the LGPL-3.0just before
  §0--- treat the distribution of source code and the distribution of object
code as different aspects of the same phenomenon
   
Additionally, LGPL-2.1 and LGPL-3.0 mainly talk about copying and distributing
the software; the private use is almost complete unspecified.
   
Finally, the LGPL-2.1 and the LGPL-3.0 aim for the same results and share the
same spirit by requiring nearly the same license fulfilling tasks. Therefore it
seems appropriate to cover both versions in one chapter
   
 
and to offer the same LGPL specific open source use case structure
   
 
for finding the corresponding task lists: 
 
LGPL2.13.0
 
 
 
  
 
 
LGPL2 
LGPL-
GNU Lesser General Public License 
LGPL
LGPL-Using the software only for yourself
LGPL-
  01 
  03
  06 
  09
  
  
  
    You are allowed to use any kind of LGPL- licensed software
      in any sense and in any context without being obliged to do anything as
      long as you do not give the software to third parties.
  
  
LGPL-Passing the unmodified software as independent source code
LGPL-
  02S 
  05S 
  
  
    
    
    
    
    
  
  
LGPL-Passing the unmodified software as independent binaries
LGPL-
  02B 
  05B 
  
  
    
    
    
    
    
    
    LGPL-
    
  
  
LGPL-Passing the unmodified library as embedded source code
LGPL-
  07S 
  
  
    
    
    
    
    
  
  
LGPL-Passing the unmodified library as embedded binaries
LGPL-
  07B 
  
  
    
    
    
    
    
    
    LGPL-
    
    
  
  
LGPL-2.1-C6: Passing a modified program as source code
LGPL-2.1-C6
  04S 
  
  
  
    
  
  
    
  
LGPL-2.1-C7: Passing a modified program as binary
LGPL-2.1-C7
  04B 
  
  
    
  
  
    
  
LGPL-Passing a modified library as independent source code
LGPL-
  08S
  
  
    
    
    
    
    
      
    
    
  
  
    to modify the library in a way that it is no longer a library
  
LGPL-Passing a modified library as independent binary
LGPL-
  08B
  
  
    
    
    
    
    
    LGPL-
    
    
    
      
      
  
  
    to modify the library in a way that it is no longer a library.
  
LGPL-Passing a modified library as embedded source code
LGPL-
  10S
  
  
    
    
    
    
    
    
    
      
    
    
  
  
    to modify the library in a way that it is no longer a library.
  
LGPL-Passing a modified library as embedded binary
LGPL-
  10B
  
  
    
    
    
    
    
    LGPL-
    
    
    
    
    
      
    
    
  
  
    to modify the library in a way that it is no longer a library.
  
LGPL3 
LGPL-
GNU Lesser General Public License 
LGPL
LGPL-Using the software only for yourself
LGPL-
  01 
  03
  06 
  09
  
  
  
    You are allowed to use any kind of LGPL- licensed software
      in any sense and in any context without being obliged to do anything as
      long as you do not give the software to third parties.
  
  
    
  
LGPL-Passing the unmodified software as independent source code
LGPL-
  02S 
  05S 
  
  
    
    
    
    
    
  
  
    
  
LGPL-Passing the unmodified software as independent binaries
LGPL-
  02B 
  05B 
  
  
    
    
    
    
    
    
    LGPL-
    
  
  
    
  
LGPL-Passing the unmodified library as embedded source code
LGPL-
  07S 
  
  
    
    
    
    
    
    
  
  
    
  
LGPL-Passing the unmodified library as embedded binaries
LGPL-
  07B 
  
  
    
    
    
    
    
    
    
    LGPL-
    
    
  
  
    
  
LGPL-3.0-C6: Passing a modified program as source code
LGPL-3.0-C6
  04S 
  
  
  
    
    
    
    
    
    
    
    
    
  
 
  
    
  
LGPL-3.0-C7: Passing a modified program as binary
LGPL-3.0-C7
  04B 
  
  
    
    
    
    
    
    
    
    
      
    LGPL-
      
    
  
  
    
  
LGPL-Passing a modified library as independent source code
LGPL-
  08S
  
  
    
    
    
    
    
    
      
    
  
  
    
  
LGPL-Passing a modified library as independent binary
LGPL-
  08B
  
  
    
    
    
      
    
    
    LGPL-
    
    
    
      
  
  
    
  
LGPL-Passing a modified library as embedded source code
LGPL-
  10S
  
  
    
    
    
    
    
    
    
      
    
    
  
  
    
  
LGPL-Passing a modified library as embedded binary
LGPL-
  10B
  
  
    
    
    
    
    
    LGPL-
    
    
    
    
    
      
    
    
  
  
    
  
Discussions and Explanations
 
  
The LGPL-2.1 allows to [] copy and (to) distribute
  verbatim copies of the Library's complete source code as you receive it [...]
  provided that you 
  [a] conspicuously and appropriately publish on each copy an appropriate
  copyright notice and disclaimer of warranty; 
  [b] keep intact all the notices that refer to this License and to the absence
  of any warranty; and 
  [c] distribute a copy of this License along with the Library.§1
  Additionally, the LGPL-2.1 allows the distribution of the modified source code
  under the terms of Section 1§2 and the distribution
  of binaries under the terms of Sections 1 and 2.§4
  But the LGPL does not require any tasks if you are using the work only for
  yourself. Thus, the quoted conditions of Section 1 are mandatory for
  all use cases concerning the distribution of an LGPL licensed work
  (LGPL-2.1-C2 -- LGPL-2.1-CB).
   
Although the LGPL-2.1 does not explicitly require to retain the
  copyright notices in the form you have received them, it is nevertheless a
  very good idea not to modify these elements (LGPL-2.1-C2 - LGPL-2.1-CB). The
  LGPL-3.0, on the other hand, inherits the clauses that require all notices to
  be kept intact from the GPL-3.0 (LGPL-3.0-C2 -- LGPL-3.0-CB).§4 
  
The LGPL-2.1 allows to [] copy and (to) distribute the
  Library (or a portion or derivative of it []) in object code or
  executable form [] provided that you accompany it with the complete
  corresponding machine-readable source code [] on a medium customarily
  used for software interchange. And the license further states that, if one
  makes the object code accessible without distributing it directly, then the
  same `download' method for the source code fulfills this
  condition.§4  So, no doubt: Taken literally, the LGPL requires
  you to distribute the source code and the object code together and by the same
  method: either both on (for example) DVD or both offered for download; but not
  the one on DVD and the other by a download from a repository. But the first
  specification also says, that the complete corresponding machine
  readable source code has to be distributed on a medium customarily
  used for software interchange.§4  The  considers the
  possibility to download files from the Internet as a distribution on a
  medium [today] customarily used for software interchange. Therefore, the
   requires for all open source use cases that refer to the distribution
  of binaries (LGPL-2.1-C3, LGPL-2.1-C5, LGPL-2.1-C7, LGPL-2.1-C9, and
  LGPL-2.1-CA) to make the source code of the corresponding library accessible
  via an Internet repository.
  
  In contrast to the LGPL-2.1, the GPL-3.0, which is included in the LGPL-3.0,
  explictily offers the option to distribute the sources via an Internet server
  ( , p. ). So, one may again
  conclude that the tasks that fulfill the corresponding LGPL-2.1 requirements
  together also fit the GPL-3.0 and the LGPL-3.0 conditions. 
  
The LGPL allows to [] modify your copy or copies of the
  Library or any portion of it [] and (to) copy and distribute such
  modifications [] only under some restrictions and
  condtions:§2 
  
  First, modified files must be marked as modifications and this must
    include the date of the modification.§2§5 This
    condition must be respected by all open source use cases concerning the
    distribution of the modified work [LGPL-*-C6 - LGPL-*-CB], because even if
    one primarily intends to distribute binaries, one has also to deliver the
    source code. The  `replaces' this requirement by the mandatory
    condition to mark each modified file and by the voluntary condition to
    update or create a general changelog file.
    
  Second, the license requires that the modified version does not depend
    on external data structures without [] (making) a good faith
    effort to ensure that, in the event an application does not supply such (a)
    function or table, the facility still operates, and performs whatever part
    of its purpose remains meaningful.§2d§2a The 
    rewrites this condition as the obligation to maintain the structural
    independence of the library in case of using the modified library as
    embedded component [LGPL-*-CA - LGPL-*-CB]. 
    
  Third, the LGPL-2.1 definitely requires, that
    the modified work must itself be a software
    library.§2  This conditions can directly be incorprated as an
    interdiction into all use cases which refer to the modification of a library
    [LGPL-2.1-C8 - LGPL-2.1-CB]. But it is difficult to respect this condition
    if one wants to modify a program which one has received under the terms of
    the LGPL-2.1. In principal, one can write an application and license it
    under the LGPL-2.1. But, as a consequence, that impedes the modification of
    this work because the result must be a library. 
 
    The LGPL-3.0 does not contain any such requirement. Hence, the  allows
    the distribution of modified programs (LGPL-*-C6, LGPL-*-C7) only if they
    are licensed under the terms of LGPL-3.0. For programs licensed under
    LGPL-2.1, the only option is to relicense the software under the terms of
    the regular GPL-2.0 (or, at your discretion, GPL-3.0).  This is explicitely
    allowed by the LGPL-2.1: You may opt to apply the terms of the
    ordinary GNU General Public License instead of this License to a given
    copy of the Library.§3 
  
  
Additionally, the LGPL-2.1 allows the licensee to distribute a
  program  developed on-top of the library (what the
  LGPL-2.1 calls a work that uses the libary§5, §6)
  as an exception to the Sections above in combination 
  with the library under terms of your choice,§6,
  provided that the licensee fulfills additional conditions:
  
  First, it must clearly be stated that the on-top development depends on the
  (modified) library. Second, the LGPL must be added into the distributed
  package.§6 In the LGPL-3.0, this condition is similarily
  integrated: On the one hand, the combined work is defined as
  a work produced by combining or linking an Application with the
  Library.§0 On the other hand, the LGPL-3.0 states that one
  [] may convey a Combined Work under terms of (his own) choice
  provided that one [a] clearly says that the on-top development uses the LGPL
  licensed library, [b] distributes the LGPL-3.0 and the GPL-3.0 license as part
  of the package, [c] includes all these (licensing) information in an existing
  copyright dialog, if any, [d] requires an appropriate shared library mechanism,
  and [e] offers the respective installion information.§4 These
  requirements can directly be inserted as conditions into the respective use
  cases for both LGPL versions (LGPL-*-CA, LGPL-*-CB).
  
The most difficult requirements of the LGPL-2.1 concern the distribution
  in the form of binaries. In a very strict reading, the LGPL does not require
  to link the on-top development and the libary only dynamically. At first, the
  LGPL mentions, that the [..] work (that uses the Library), in
  isolation, is not a derivative work of the Library []. But if it is
  linked to the library the resulting executable program becomes
  a derivative of the Library and that it is therefore
  [] covered by this License (LGPL-2.1). But the LGPL-2.1 
  directly continues this statement with the hint, that Section 6
  states terms for distribution of such executables.§5 Finally,
  section 6 directly starts with the statement: As an exception to the
  Sections above, you may also combine or link a `work that uses the
  Library' with the Library to produce a work containing portions of the
  Library, and distribute that work under terms of your choice.§6
  
  This is important to know, because until this section 6 one can not directly
  read or indirectly infer that the LGPL-2.1 distinguished the act of
  dynamically linking a program and a library from that of statically linking
  these parts. The LGPL only wants to ensure that the binaries of the library
  itself can be replaced by a newer version. And that is required by
  section 6.§6 
  From a practical point of view, this can only be guaranteed, if the binaries of
  the on-top development and the library are linked using a suitable
  shared library mechanism§6 or if one also gets all compiled,
  but not linked object-files of the on-top development and the library, either
  directly, or via using a a written offer, valid for at least three
  years, to give the same user the (respective) materials.§6  In
  the first case, the user can replace the received version of the library and
  can let the application be relinked  automatically. In the second case, he has
  to do it manually. It is important to know that both these ways exist if one
  wants or must distribute statically linked works. The LGPL-2.1 does not forbid
  to distribute statically linked applications. But it requires to enable the
  receiver to relink the work. 
  
  The LGPL-3.0 has reduced these complex conditions in a special way: First, it
  does not use the words `statically linked' or `dynamically' linked at
  all. Second it defines the combined work `only' as the result of
  combining or linking an Application with the
  Library.§0  But then it requires for the distribution of the
  combined works that one has either to convey the Minimal
  Corresponding Source under the terms of this License, and the Corresponding
  Application Code in a form suitable for, and under terms that permit, the user
  to recombine or relink the Application with a modified version of the Linked
  Version to produce a modified Combined Work [] or that one must
  presuppose that the receiver uses [] suitable shared library
  mechanism for linking with the Library [] that [] operate properly
  with a modified version of the Library []§4 Finally,
  the LGPL-3.0 adds that in the first case the these materials which enables the
  relinking must be distributed [] in the manner specified by
  section 6 of the GNU GPL[-3.0] for conveying Corresponding
  Source.§4  And this section 6 of the GPL-3.0 allows the well
  known method to convey the object code [] accompanied by a
  written offer [] to give anyone [] access to copy the
  Corresponding Source from a network server at no charge.§6
  Therefore, the  can condense these conditions into the requirement,
  either to distribute dynamically linkable parts, or to distribute statically
  linked applications (accompanied) [] with a written offer,
  valid for at least three years, to give the same user the [complete]
  materials,§6 so that he can relink the application. It is
  clear, that this condition only applies to the use cases LGPL-*-C5 and
  LGPL-*-CB. 
  
MIT licensed software
MIT
MIT
MIT License
MIT
The MIT license is known as one of the most permissive licenses. Thus, the
MIT specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
nodx = [font=, rectangle, draw, fill=gray!20, 
    text width=2.4cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l61) at ( 2.4, 9.2) MIT;
[nodb] (l51) at ( 0.0, 7.8) recipient: 
 4yourself;
[nodb] (l52) at ( 4.8, 7.8) recipient: 
 2others;
[nodb] (l41) at ( 2.5, 6.2) state: 
 unmodified;
[nodb] (l42) at ( 7.0, 6.2) state: 
 modified;
[nodb] (l31) at ( 5.0, 4.6) type: 
 proapse;
[nodb] (l32) at ( 9.0, 4.6) type: 
 snimoli;
[nodx] (l21) at ( 7.5, 2.8) context: 
 independent;
[nodx] (l22) at (10.5, 2.8) context: 
 embedded;
[leaf] (l11) at ( 0.0, 0.0) MIT-C1 using software only for yourself;
[leaf] (l12) at ( 2.5, 0.0) MIT-C2 distributing unmodified package;
[leaf] (l13) at ( 5.0, 0.0) MIT-C3 distributing modified program;
[leaf] (l14) at ( 7.5, 0.0) MIT-C4 distributing modified library as independent package;
[leaf] (l15) at (10.5, 0.0) MIT-C5 distributing modified library as embedded package;
[edge] (l61) -- (l51);
[edge] (l61) -- (l52);
[edge] (l51) -- (l11);
[edge] (l52) -- (l41);
[edge] (l52) -- (l42);
[edge] (l41) -- (l12);
[edge] (l42) -- (l31);
[edge] (l42) -- (l32);
[edge] (l31) -- (l13);
[edge] (l32) -- (l21);
[edge] (l32) -- (l22);
[edge] (l21) -- (l14);
[edge] (l22) -- (l15);
 
MIT-C1: Using the software only for yourself
MIT-C1
  01 
  03 
  06
  09
  
  that you received MIT licensed software, that you will use it
  only for yourself and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
  
    You are allowed to use any kind of MIT licensed software in any
      sense and in any context without any obligations if you do not give the
      software to third parties and if you do not modify the existing copyright
      notices and the existing permission notice.
  
  
MIT-C2: Passing the unmodified software
MIT-C2
  02S 
  05S 
  07S 
  02B 
  05B 
  07B 
  that you received MIT licensed software which you are now going to
  distribute to third parties in the form of unmodified binaries or as unmodifed
  source code files. In this case it makes no difference if you distribute a
  program, an application, a server, a snippet, a module, a library, or a plugin
  as an independent package.
  OSUC-02S,  OSUC-02B, OSUC-05S, OSUC-05B, OSUC-07S,
    OSUC-07B 
 
  
    
    
  
  
MIT-C3: Passing a modified program
MIT-C3
  04S
  04B
  that you received an MIT licensed program, application, or server
  (proapse), that you modified it, and that you are now going to distribute this
  modified version to third parties in the form binaries or as source code
  files.
  OSUC-04S, OSUC-04B 
  
    
    
    
     
    
  
  
MIT-C4: Passing a modified library independently
MIT-C4
  08S
  08B
  that you received an MIT licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the the form of binaries
  or as source code files, but without embedding it into another larger software
  unit.
  OSUC-08S, OSUC-08B 
  
    
    
    
  
  
MIT-C5: Passing a modified library as embedded component
MIT-C5
  10S
  10B
  that you received an MIT licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binaries or
  as source code files together with another larger software unit which contains
  this code snippet, module, library, or plugin as an embedded component,
  regardless whether you distribute it in the form of binaries or as source code
  files.
  OSUC-10S, OSUC-10B 
  
    
    
    
    
    Arrange your distribution so that the original licensing
      elements (especially the MIT license text containing the specific
      copyright notices of the original author(s), the permission notices and
      the MIT disclaimer) clearly refer only to the embedded library and do not
      disturb the licensing of your own overarching work. It's a good tradition
      to keep the libraries, modules, snippet, or plugins in separate
      directories, which contain also all licensing elements.
  
  
Discussions and Explanations
The MIT-License is known as one of the most permissive licenses. It is a very
short license containing (0) a copyright notice, (1) a paragraph saying that you
are allowed to do almost anything you want, followed (2) by the condition that
you have to include the existing copyright notes and the permission
notes [] in all copies or substantial portions of the software,
and (3) closed by the well known disclaimer. But the license doesn't
talk about the difference of source code and object code. So, you have to find
the right way by yourself. 
Here are our readings:
  If you do not modify the received MIT licensed application, neither for
    your own purposes, nor for handing over the program to 3rd parties, you can 
    conclude that all copyright notices and permission notices are already
    correct.
  Nevertheless, we added the hint not to modify these licensing elements
    in the context of the use case used by yourself. This is implied by
    the MIT license itself. It requires explicitly that the above
      copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Softwarealso into
    those copies you make for your own purposes on your own machines. 
  If you modify the MIT licensed application, regardless for which
    purpose, you are simply not allowed to erase or modify existing copyright
    notes and permission notices. You may add your own modifications under new
    conditions, but the old notices must survive. 
  We request that you also keep the MIT disclaimer. This is not
    explicitely required by the license. The permission notices, which is
    required to be preserved, most likely refers to the text between the
    copyright notice and the disclaimer and, hence, does not include the latter.
    But another possible, although less likely interpretation is that the whole
    text of the license is what permission notice refers to.  
MPL-2.0 licensed software
MPL 
MPL-2.0
Mozilla Public License 2.0
2.0
MPL
The Mozilla Public License clearly distinguishes the distribution of source code
from the distribution of binaries: First, it allows the Distribution of
Source Form.§3.1 Then, it specifies the conditions for a
Distribution of Executable Form.§3.2 Additionally, the
MPL-2.0 contrasts the distribution of Covered Software with the
distribution of a Larger Work.§3.3 So, taken as whole, the
MPL-2.0 mainly focusses on the distribution of software. Thus, for finding the
relevant executable task lists, the following MPL-2.0 specific open source use
case structure
   
 
can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l71) at (4,10) MPL-2.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) MPL-2.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  MPL-2.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  MPL-2.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  MPL-2.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  MPL-2.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  MPL-2.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  MPL-2.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  MPL-2.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  MPL-2.0-C9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
  
 
MPL-2.0-C1: Using the software only for yourself
MPL-2.0-C1
  01 
  03 
  06 
  09
  that you received MPL-2.0 licensed software, that you will use it
    only for yourself, and that you do not hand it over to any third party in
    any sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
    You are allowed to use any kind of MPL-2.0 software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
    
    
  
MPL-2.0-C2: Passing the unmodified software as source code
MPL-2.0-C2
  02S 
  05S 
  07S 
  that you received MPL-2.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified source code files
    or as unmodified source code package. In this case it makes no difference if
    you distribute a program, an application, a server, a snippet, a module, a
    library, or a plugin as an independent or as an embedded unit.
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    
  
  
    
    
  
MPL-2.0-C3: Passing the unmodified software as binaries 
MPL-2.0-C3
  02B 
  05B 
  07B
  that you received MPL-2.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified binary files or as
    unmodified binary package. In this case it does not matter if you distribute
    a program, an application, a server, a snippet, a module, a library, or a
    plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
     
    
    
  
    MPL-2.0-C2
    
    
  
  
    
    
  
MPL-2.0-C4: Passing a modified program as source code
MPL-2.0-C4
  04S 
  that you received an MPL-2.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package.
  04S
  
    
    
    
    
    
    
  
 
  
    
    
  
MPL-2.0-C5: Passing a modified program as binary
MPL-2.0-C5
  04B 
  that you received an MPL-2.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary
    files or as a binary package.
  04B
  
     
    
    
    MPL-2.0-C4
    
    
    
    
  
  
    
    
  
MPL-2.0-C6: Passing a modified library as independent source code
MPL-2.0-C6
  08S
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    source code files or as a source code package, but without embedding it into
    another larger software unit.
  08S
  
    
    
    
    
    
    
  
  
    
    
  
MPL-2.0-C7: Passing a modified library as independent binary
MPL-2.0-C7
  08B
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    binary files or as a binary package but without embedding it into another
    larger software unit.
  08B
  
     
    
    
    MPL-2.0-C6
    
    
    
    
  
  
    
    
  
MPL-2.0-C8: Passing a modified library as embedded source code
MPL-2.0-C8
  10S
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    source code files or as a source code package together with another larger
    software unit which contains this code snippet, module, library, or plugin
    as an embedded component.
  10S
  
    
    
    
    
    
    
    
  
  
    
    
  
MPL-2.0-C9: Passing a modified library as embedded binary
MPL-2.0-C9
  10B
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    binary files or as a binary package together with another larger software
    unit which contains this code snippet, module, library, or plugin as an
    embedded component.
  10B
  
    
    
    
    MPL-2.0-C8
    
    
    
    
    
  
  
    
    
  
Discussions and Explanations
The MPL-2.0 offers a section Responsibilities which contains nearly all
requirements.§3 Only for some subordinate aspects, one has also to
reflect other paragraphs.pars pro to cf.§3 - concerning the trademarks
With respect to this structure, we can detect the following tasks:
In a more general attitude, the MPL-2.0 states that it []
  does not grant any rights in the trademarks, service marks, or logos of any
  Contributor---except as it may be necessary to comply with other
  requirements of the license.§2.3 The  rewrites the message
  as the interdiction to promote own services and products by and with such
  elements. 
  
The MPL-2.0 also generally prescribes that you may not remove or
  alter the substance of any license notice (including copyright notices, patent
  notices, disclaimer of warranties, or limitations of liabiliy) contained
  within the Source Code Form []§3.4 This focussing to the
  substance of any license notice refers to the allowance to
  [] alter any license notices to the extent required to remedy
  known factual innacuracies.§3.4  Following its principle to offer
  one reliable way and to ignore variants of secondary importance, the 
  simplifies this condition to the general proscription to modify any licensing
  material for all use cases [MPL-2.0-C1 -- MPL-2.0-C9]. But for emphasizing
  that this is a job which must be activily done, the  additionally
  rewrites this interdiction into all 2others use cases [MPL-2.0-C2 --
  MPL-2.0-C9] as the task to retain the licensing elements in the form one has
  obtained them. 
  
Moreover, the MPL-2.0 requires for all distributions of [the]
  source [code] form that all modifications of the software [] 
  must be under the terms of (the MPL-2.0) and that the distributor
  [] must inform all recipients that the software
  [] is governed by the terms of (the MPL-2.0), and how (the
  recipients) can obtain a copy of this license.§3.1  For the
  respective use case (MPL-2.0-C2, MPL-2.0-C4, MPL-2.0-C6, MPL-2.0-C8), the
   rewrites these conditions so that each MPL-2.0 source code package
  must neccessarily contain the MPL-2.0 itself as textfile and an additional 
  licensing file or statement strictly following the text given by the addendum
  of the MPL-2.0.Exhibit A Because the MPL-2.0 is only a license with
  weak copyleft, the  proposes to separate the MPL-2.0 licensed,
  embedded component from the enclosing program (MPL-2.0-C8). 
  
But the MPL-2.0 does not explicitly require marking all modifications.
  Nevertheless, this is state of the art in computer emgineering. Therefore,
  with respect to the cases of distributing modified source code (MPL-2.0-C4,
  MPL-2.0-C6 and MPL-2.0-C8), the  proposes to mark all modifications
  inside of the source code and to update the description of the functional
  changes. In case of distributing the modified software in the form of
  binaries, it should be sufficient to describe the modifications only on the
  functional level. 
  
Furthermore, the MPL-2.0 requires that the Covered Software---in 
  all cases of distributing it in an Executable Form (MPL-2.0-C3,
  MPL-2.0-C5, MPL-2.0-C7, MPL-2.0-C9)---[] must also be made
  available in Source Code Form [] and that the distributor
  [] must inform recipients of the Executable Form how they can
  obtain a copy of such Source Code Form by reasonable means in a timely manner,
  at a charge no more than the cost of distribution to the
  recipient.§3.2.a  The  rewrites these conditions as the
  obligation to offer a download service at no charge and to point towards this
  services inside of the distributed package.
  
In this context, the MPL-2.0 allows to distribute the binaries under terms
  of another license [] provided that that the license for the
  Executable Form does not attempt to limit or alter the recipients’ rights in
  the Source Code Form under this License.§3.2.b This possibility
  might become important for those cases where the license compatibility must
  explicitly be managed. Normally, it should be sufficient also to distribute
  the binaries under the MPL-2.0. Thus, in case of distributing binaries
  (MPL-2.0-C3, MPL-2.0-C5, MPL-2.0-C7, MPL-2.0-C9), the  proposes to
  insert into the distribution packages the MPL-2.0 itself and an additional
  licensing file or statement strictly following the text given by the addendum
  of the MPL-2.0.Exhibit A But again, because the MPL-2.0 is only a
  license with weak copyleft, the  proposes to separate the MPL-2.0
  licensed embedded component from the overarching program (MPL-2.0-C9).
  
Finally, one clearly has to state that the distribution of the source code
  required by the previous rule must, of course, follow the rules of distributing
  the software. Thus, the  requires in all cases of a binary distribution
  to execute also the task-lists of the respective source code use cases.
Microsoft Public License
MSPL 
MS-PL
Microsoft Public License
MS-PL
The MS-PL license is also one of the most permissive licenses. Thus, the
MS-PL specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l71) at (4,10) MS-PL;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) MS-PL-C1 using software only
for yourself;
[leaf] (l12) at (2.5,0)  MS-PL-C2  distributing unmodified
software;
[leaf] (l14) at (5.4,0)  MS-PL-C3   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  MS-PL-C4   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  MS-PL-C5   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  MS-PL-C6 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  MS-PL-C7  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  MS-PL-C8   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l51) -- (l12);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
MS-PL-C1: Using the software only for yourself
MS-PL-C1
  01 
  03 
  06
  09
  
  that you received MS-PL licensed software, that you will use it
  only for yourself and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
  
    You are allowed to use any kind of MS-PL licensed software in any 
      sense and in any context without any other obligations if you do not give
      the software to 3rd parties. 
  
  
     
  
MS-PL-C2: Passing the unmodified software
MS-PL-C2
  02S 
  05S 
  07S 
  02B 
  05B 
  07B 
  that you received MS-PL licensed software which you are now going to
  distribute to third parties in the form of unmodified binaries or as unmodifed
  source code files. In this case it makes no difference if you distribute a
  program, an application, a server, a snippet, a module, a library, or a plugin
  as an independent package.
  OSUC-02S, OSUC-02B, OSUC-05S,  OSUC-05B, OSUC-07S,
    OSUC-07B 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received) are completely retained in your package. 
  
    Incorporate a complete copy of the MS-PL license into your 
      package, regardless whether you distribute a source code or a binary
      package.
      
  
    It's a good tradition to let the documentation of your
      distribution and/or your additional material also contain a link to the
      original software (project) and its homepage. 
  
  
     
  
MS-PL-C3: Passing a modified program as source code
MS-PL-C3
  04S
  that you received an MS-PL licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package.
  OSUC-04S 
 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received) are completely retained in your package. 
 
    Incorporate a complete copy of the MS-PL license into your
      package. 
  
    If you do not want to publish your modifications under the
      MS-PL too, then cleanly separate your own sources and licensing documents
      from original elements of the adopted work. 
  
    Mark your modifications in the sourcecode.
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with the prohibitions stated below). 
  
    You are allowed to expand an existing copyright notice of the
      program to mention your own contributions. 
  
    It is a good practice of the open source community, to let the
      copyright notice which is shown by the running program also state that the
      program is licensed under the MS-PL license (as far as this does not
      clashes with the prohibitions stated below). Because you are already
      modifying the program, you can also add such a hint, if the  original
      copyright notice lacks such a statement. 
  
  
     
  
MS-PL-C4: Passing a modified program as binary
MS-PL-C4
  04B
  that you received an MS-PL licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  OSUC-04B 
 
  
  
    Mark your modifications in the source code even if you do not
      intend to distribute it. 
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below). 
  
    It is a good practice of the open source community, to let the
      copyright notice which is shown by the running program also state that the
      derivative work is based on a version originally licensed under the MS-PL
      license (as far as this does not clashes with the prohibitions stated
      below), perhaps by linking to the project homepage of the original.
      Because you are already modifying the program, you can also add such a
      hint, if the original copyright notice lacks such a statement. 
  
  
     
  
MS-PL-C5: Passing a modified library independently as source code
MS-PL-C5
  08S
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  OSUC-08S 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received) are completely retained in your package. 
 
    Incorporate a complete copy of the MS-PL license into your
      package. 
  
    If you do not want to publish your modifications under the
      MS-PL too, then cleanly separate your own sources and licensing documents
      from original elements of the adopted part(s). 
  
    Mark your modifications in the sourcecode. 
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below). 
  
  
    
  
MS-PL-C6: Passing a modified library independently as binary
MS-PL-C6
  08B
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  OSUC-08B 
 
  
    Mark your modifications in the source code even if do not want
      to distribute it. 
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below). 
  
  
     
  
MS-PL-C7: Passing a modified library as embedded source code
MS-PL-C7
  10S
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  OSUC-10S 
 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received are completely retained in your package. 
 
    Incorporate a complete copy of the MS-PL license into your
      package. 
  
    If you do not want to publish your modifications or your
      overarching application under the MS-PL too, then cleanly separate your
      own sources and licensing documents from original elements of the adopted
      work. 
  
    Mark your modifications in the sourcecode.
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below).
    It is a good practice of the open source community, to let the
      copyright notice shown by your overarching program also state that it is
      based on a component originally licensed under the MS-PL license, perhaps
      by linking the project homepage of the original (as far as this does not
      clashes with the prohibitions stated below).  
  
  
     
  
MS-PL-C8: Passing a modified library as embedded binary
MS-PL-C8
  10B
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  OSUC-10B 
 
  
    Mark your modifications in the source code even if do not want
      to distribute it. 
  
    It's a good tradition to let the documentation of your
      distribution and/or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below).
  
    It is a good practice of the open source community, to let the
      copyright notice shown by your own overarching program also state that it
      is based on a component originally licensed under the MS-PL license, 
      perhaps by linking the project homepage of the original (as far as this
      does not clashes with the prohibitions stated below).
  
  
     
  
Discussions and Explanations
The MS-PL is also a very permissive and short license. It requires to do:
(a) You must preserve existing licensing elements. (b) You must distribute
the source code as whole or portions of the source code under the
MS-PL. (c) You must add a copy of the license if you distribute (parts of) the
source code. (d) If you distribute a binary package, you must distribute (the
parts of) the work under a license that complies with this (MS-PL)
license[cf.][wp]MsplOsiLicense2013a.
The most confusing clause is probably the condition, to []
distribute any portion of the software in compiled or object code form []
only [] under a license that complies with this license. But a closer
examination is lighting the situation: The only other conditions of the license
which refer to the context of distributing binaries are the requirements a) not
to abuse trademarks, b) not to bring a patent claim against any contributor, and
c) not to expect any warranties or guarantees with respect to the distributed
portion[cf.][wp. §3A, §3B, §3E]MsplOsiLicense2013a.
Based on these readings we decided 
 
  to let you incorporate a copy of the license into your
  distribution even if it only contains the binaries of the unmodified version:
  if you have not modified it, you do not lose any advantage if you add the
  license, too. So, this is the best method to fulfill the MSL-PL binary
  condition.
  to erase all mandatory conditions in case of the binary
  distributions: the patent restriction of the MS-PL itself is already covered
  by the MS-PL patent section of the  , p.
  MSPL and the no warranty clause of the MS-PL by
  the  section concerning the power of the MS-PL 
 while the trademark
  restrictions are explicitly added into the prohibition section.
  to erase the hints to a voluntarily updated copyright dialog in
  case of distributing a snimoli independently because the copyright dialog
  normally is designed by the overarching work which uses the library, not by
  the library itself.
PostgreSQL License
PGL 
PostgreSQL
PostgreSQL license
PGL
Like the MIT License Postgres License is a very permissive licenses. Thus, the
PostgreSQL specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
nodx = [font=, rectangle, draw, fill=gray!20, 
    text width=2.4cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=2cm, text centered, minimum height=4em]
edge = [draw, -latex']
[]
[nodv] (l61) at ( 2.4, 9.2) PostgreSQL;
[nodb] (l51) at ( 0.0, 7.8) recipient: 
 4yourself;
[nodb] (l52) at ( 4.8, 7.8) recipient: 
 2others;
[nodb] (l41) at ( 2.5, 6.2) state: 
 unmodified;
[nodb] (l42) at ( 7.0, 6.2) state: 
 modified;
[nodb] (l31) at ( 5.0, 4.6) type: 
 proapse;
[nodb] (l32) at ( 9.0, 4.6) type: 
 snimoli;
[nodx] (l21) at ( 7.5, 2.8) context: 
 independent;
[nodx] (l22) at (10.5, 2.8) context: 
 embedded;
[leaf] (l11) at ( 0.0, 0.0) PostgreSQL-C1 using software only for yourself;
[leaf] (l12) at ( 2.5, 0.0) PostgreSQL-C2 distributing unmodified package;
[leaf] (l13) at ( 5.0, 0.0) PostgreSQL-C3 distributing modified program;
[leaf] (l14) at ( 7.5, 0.0) PostgreSQL-C4 distributing modified library as independent package;
[leaf] (l15) at (10.5, 0.0) PostgreSQL-C5 distributing modified library as embedded package;
[edge] (l61) -- (l51);
[edge] (l61) -- (l52);
[edge] (l51) -- (l11);
[edge] (l52) -- (l41);
[edge] (l52) -- (l42);
[edge] (l41) -- (l12);
[edge] (l42) -- (l31);
[edge] (l42) -- (l32);
[edge] (l31) -- (l13);
[edge] (l32) -- (l21);
[edge] (l32) -- (l22);
[edge] (l21) -- (l14);
[edge] (l22) -- (l15);
PostgreSQL-C1: Using the software only for yourself
PostgreSQL-C1
  01 
  03 
  06
  09
  
  that you received PostgreSQL licensed software, that you will use it
  only for yourself, and that you do not hand it over to any 3rd party in any
  sense. 
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
 
  
    You are allowed to use any kind of PostgreSQL licensed software in any
      sense and in any context without any other obligations if you do not give
      the software to third parties and if you do not modify the existing
      copyright notices or the existing permission notice.
  
  
PostgreSQL-C2: Passing the unmodified software
PostgreSQL-C2
  02S 
  05S 
  07S 
  02B 
  05B 
  07B 
  that you received PostgreSQL licensed software which you are now going to
  distribute to third parties in the form of unmodified binaries or as unmodifed
  source code files. In this case it makes no difference if you distribute a
  program, an application, a server, a snippet, a module, a library, or a plugin
  as an independent package. 
  OSUC-02S,  OSUC-02B, OSUC-05S, OSUC-05B, OSUC-07S, OSUC-07B
     
  
    
    
  
  
PostgreSQL-C3: Passing a modified program
PostgreSQL-C3
  04S 
  04B
  that you received a PostgreSQL licensed program, application, or
  server (proapse), that you modified it, and that you are now going to distribute this
  modified version to third parties in the form binaries or as source code
  files.
 
  OSUC-04S, OSUC-04B
     
  
    
    
    
    
    
  
  
PostgreSQL-C4: Passing a modified library independently
PostgreSQL-C4
  08S
  08B
  that you received a PostgreSQL licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binaries or
  as source code files together with another larger software unit which contains
  this code snippet, module, library, or plugin as an embedded component,
  regardless whether you distribute it in the form of binaries or as source code
  files.
  OSUC-08S, OSUC-08B
     
  
    
    
    
  
  
PostgreSQL-C5: Passing a modified library as embedded component
PostgreSQL-C5
  10S 
  10B
  that you received a PostgreSQL licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binaries or
  as source code files together with another larger software unit which contains
  this code snippet, module, library, or plugin as an embedded component,
  regardless whether you distribute it in the form of binaries or as source code
  files.
  OSUC-10S, OSUC-10B
     
  
    
    
     
    
    
  
  
Discussions and Explanations
The PostgreSQL-License follows the structure of the MIT license: it, too, contains 
(1) a copyright notice, 
(2) a paragraph saying that you are allowed to do almost anything you want,
    followed 
(3) by the condition that the copyright notice, the permission notes, and the
    disclaimer [] apperar in all copies, and 
(4) the well known disclaimer.
Moreover, like the MIT license, the PostgreSQL does not talk about the
difference between source code and object code. So, you can apply the analysis
of the MIT license  
also to the PostgreSQL.
PHP-3.0 licensed software
PHP 
PHP-3.0
PHP 3.0 License
3.0
PHP
The PHP-3.0 license contains a few more conditions than the MIT license and
additionally distinguishes the redistribution of source
code from the redistribution in binary form.
Nevertheless, the PHP-3.0 license focusses only on the redistribution or---as we
call it in the the 2others use
cases. Thus, the PHP-3.0 specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
[]
[nodv] (l71) at (3.5,10) PHP-3.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) PHP-3.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  PHP-3.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  PHP-3.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  PHP-3.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  PHP-3.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  PHP-3.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  PHP-3.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  PHP-3.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  PHP-3.0-C9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
 
 
PHP-3.0-C1: Using the software only for yourself
PHP-3.0-C1
  01 
  03 
  06
  09
  
  that you received PHP-3.0 licensed software, that you will use it
    only for yourself, and that you do not hand it over to any third party in
    any sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
  
    You are allowed to use any kind of PHP-3.0 software in any sense
      and in any context without any obligations as long as you do not give the
      software to third parties.
  
  
    
  
PHP-3.0-C2: Passing the unmodified software as source code
PHP-3.0-C2
  02S
  05S 
  07S 
  that you received PHP-3.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified source code files
    or as unmodified source code package. In this case it makes no difference if
    you distribute a program, an application, a server, a snippet, a module, a
    library, or a plugin as an independent or as an embedded unit.
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    
  
  
    
   
PHP-3.0-C3: Passing the unmodified software as binary
PHP-3.0-C3
  02B 
  05B 
  07B 
  that you received PHP-3.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified binary files or as
    unmodified binary package. In this case it does not matter if you distribute
    a program, an application, a server, a snippet, a module, a library, or a
    plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
    
     
    
    
    
  
  
    
  
PHP-3.0-C4: Passing a modified program as source code
PHP-3.0-C4
  04S
  that you received a PHP-3.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package.
  04S
  
    
    
    
    
     
 
    
  
  
    
  
PHP-3.0-C5: Passing a modified program as binary
PHP-3.0-C5
  04B
  that you received a PHP-3.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary
    files or as a binary package.
  04B
  
    
    
    
    
  
  
    
  
PHP-3.0-C6: Passing a modified library as independent source code
PHP-3.0-C6
  08S
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package, but without embedding it into another
    larger software unit.
  08S
  
    
    
    
    
  
  
    
  
PHP-3.0-C7: Passing a modified library as independent binary
PHP-3.0-C7
  08B
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary files
    or as a binary package but without embedding it into another larger software
    unit.
  08B
  
    
    
    
    
  
  
    
  
PHP-3.0-C8: Passing a modified library as embedded source code
PHP-3.0-C8
  10S
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package together with another larger software unit
    which contains this code snippet, module, library, or plugin as an embedded
    component.
  10S
  
    
    
    
    
     
 
    
    
  
  
    
  
PHP-3.0-C9: Passing a modified library as embedded binary
PHP-3.0-C9
  10B
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary
    files or as a binary package together with another larger software unit
    which contains this code snippet, module, library, or plugin as an embedded
    component.
  10B
  
    
    
    
    
    
  
  
    
  
Discussions and Explanations
First of all, it might surprise some readers that the  also describes
the open source use cases which concern the distribution of binary files
although it deals with the PHP-3.0 license. PHP is a script language. Thus,
delivering the source code seems to be a must. But one has to consider that the
PHP-3.0 license could also be applied to works which are based on other
languages constituted on the compiler paradigm. Or there might a PHP compiler be
used. 
It might also surprise some readers that in case of the binary distribution of
modifications the condition to repoduce the php license in the documentation is
a must, while its reproduction in a copyright screen of the program is a
should. This is directly caused by the binary-condition of the php license
which expressly requires that Redistributions in binary form must
reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the
distribution. But of course, implementing the must and the
should is best. 
Open Source Licenses and Their Legal Environments [tbd]
In this chapter we analyze why to know a license alone is not enough. At the end
you will know that open source licenses are embedded into the legal environment
of a state. And you will know in which sense the German legal environment
predetermines your readings of open source licenses.
Conclusion
This chapter shortly describes what the OSLiC is, how it should be used, and how
it can be read. It shall be written as top-down explanation.
Appendices
Some Additional Remarks on the OSLiC Quotation Style
We have already characterized the general tone of our
footnotes . Let us now
briefly explain a little peculiarity of our bibliography:
Modern times have also changed the humanities. Formerly a book or an article
must be printed for being ripe to be quoted. Our statements relied on static,
readily prepared works. Nowadays even university libraries sometimes offer those
books and articles as PDF files which are printed in the original. As a scholar,
now you must rely on the equality of the printed version and the PDF file -- at
least with respect to the page numbers and the appearance. You can not verify the
equivalence -- at least to a certain degree.
Moreover: in case of such 'e-books' and 'e-articles' the libraries often do not
offer the pdf files themselves but links to the download pages of the publisher.
Formerly as a scholar you could trust that your readers would be able to
retrieve the quoted work if they want to verify your citations. It's one task of
our libraries to hold available our scientific sources. But now they do not buy
any longer the books, but the right to download files over the university net.
In this case these PDF files are not stored on the serves of the university
library. By using the link provided by the publisher each student or each reader
downloads his own file -- case by case. Therefore -- as a scholar -- you now have
to trust that the publisher, who provides the link, will not change that pdf
file that you have cited.
But it gets even worse: While it might be that publishers modify their work
secretly (even it is not very likely that they do it), it's a definite feature
of the web that its pages are frequently changed. Hence we must ask
ourselves: Can we seriously argue on the basis of statements and documents which
might disappear? Can we quote such possibly volatile sources? The problem is: we
must do it, especially if we write about an internet topic -- and even if we want
to write a really reliable compendium.
So, what can we do? First, we must confide in our readers, that they either
will retrieve our sources or -- if they can not find them -- that they
believe that we really have found and read what we have written and
quoted. Second, we store all these e-wares 
 we
read 
. And thirdly we should lay open to our readers the
different levels of reliableness of our sources. Therefore we use
the following markers in our bibliographic data 
:
  Print / Copy:- The source is printed and we saw either the printed work
  really or we get an official copy by our library. Hence you should also be able
  to get the work in a library, at least in those we used (UB Frankfurt or ULB
  Darmstadt).
  BibWeb/[PDF/] :- The source might be printed, but we read only the
  electronic version (PDF or other type of format), offered by and over the
  net of our university libraries (UB Frankfurt or ULB Darmstadt).
  FreeWeb/[PDF/] :- We read the electronic version offered by the
  free web. In this case we add the url 
 and the date when we downloaded /
  saw the text.
Some Widespread Open Source Myths
From the viewpoint of an internet student we have to consider that the web
offers a mass of rumors concerning the nature of open source software
(Licenses). Here are some of the myths[At least one time even a
scientific legally discussing book is talking about the myth around open
source licenses -- although only as part of  the title: cf][1ff,
especially 209ff]GuiOvd2006a we met:
 
BE CAREFUL: THIS SECTION MUST THOROUGHLY BE REVIEWED AND REWRITTEN. 
IT'S ONLY AN OUTLINE!!! Do not quote part of it. It must be verified.
  [open source tries to improve the world ethically] :- No, there's a clear
  ban to exclude persons, groups, purposes. Thus, there is no chance to exclude
  anyone from using open source software because he is an ethical or moralic
  malefactor.
  [Changed open source software must be re-published] :- No, in a double
  sense! There are OS licenses which allow the proprietarization of the
  modified code. And even the LGPL and the GPL, which clearly try to prevent
  the proprietarization, do not require generally that a modified code must be
  (re-)published. Only if you give your modfied (L)GPL licensed application as
  binary to anybody, then you have to handover the modified code, too.
  [Modified open source software must be given back to the whole community]
  :- No. Again, there are OS licenses which allow the proprietarization of the
  modified code. And even the LGPL and the GPL -- which clearly require, that you
  also publish the modified code, if you give the modified binary to anybody --
  do not require that you distribute your modification around the world. LGPL and
  GPL clearly say that you have to hand over the code to those persons you
  give the binary to. And if you only give your improvement only one person or a
  group of persons, then you must handover your code only to that persons or
  only to all members of that group.
  [Published open source software is open for ever] :- No, if this myth
  says that also all future versions will have to be distributed under an open
  source license. The copyright holder ever holds the copyright. They can change
  the licence of next release of its software -- but only for the following
  release, not for the current or for former versions. Those releases, which
  already have been distributed under an open source license, indeed remain
  open.
  [Software can either be open source software or proprietary software] :-
  No. The copyright holders themselves can additionally distribute the code
  under other conditions when ever they want to do it. That's not a question of
  the licence, but of the copyright.  
  [The opposite of open source software is commercial Software] :- No.
  First, you are also allowed to use the open source software in any commercial
  purpose. There's only one point which is excluded in OSS: you are not allowed
  to ask for a licence fee if you distribute 'open source software'. Second,
  there are many other forms like freeware, public domain software or anything
  else which is neither open source software nor Commercial Software. It's
  pointless to take the question of money as a criterion for distinguish open
  source software and its opposite. Moreover: Proprietary Software as opposite
  of open source software should be defined ex negativo: all kind of software,
  which does not fit the OSD is proprietary.
  [open source software prohibits to earn money] :- No, you are allowed to
  invent each business model you want. There's only one exception: you are not
  allowed to ask for a licence fee if you distribute open source software. This
  limitation is based on the open source definition which clearly states that a
  license -- which wants to become an open source license -- shall not
  restrict any party from selling or giving away the software as a component of
  an aggregate software distribution containing programs from several different
  sources and that the license under this circumstances [] shall
  not require a royalty or other fee for such sale[cf.][§1]OSI2012a.
  If you combine this constraint with the requirements that an open source
  license [] must not restrict anyone from making use of the
  program [][cf.][§6]OSI2012a and that it []
  must allow distribution in source code as well as compiled form
  [][cf.][§2]OSI2012a, you can generally conclude that none of
  the open source licenses may require a fee for using and/or distributing the
  program. But being paid for the service to install the program, to collect
  and compile a customer specific version, and/or to monitor the environment is
  of course not excluded by this condition.
  
  Historically this mistake might be evoked by Debian: The GNU project missed
  its kernel while the Linux kernel was already distributed as part of
  collections which also include GNU software. Then, in 1983? Ian Murdock was
  supported by RMS and its FSF to build a really free distribution (Debian)
  containg GNU software and the Linux kernel. But Ian Murdock states also, that
  Debian does not want to earn money.
  [Modifications of open source software must be marked] :- No. This is not
  a defining postulation of the OSD. The OSD allows licenses to require the mark
  of modifications. But it does not require from all licenses to require the mark
  modifications for being an open source license.
  [Modifications of open source software must be marked by your personal
  data] :- No, it is only required to mark modifications so that a reader could
  distinguish the modifications from the original code. It's required for saving
  the integrity of the original author. And therefore it is not required as a
  constitutive criterion by the OSD. It might be that a license additionally
  requires your name. But that is not feature of open source software in general.
  And at least the licenses discussed by us do not require to insert your name.
  [The open source Definition determines the conditions to use open source
  software] :- No. The Open Source Definition determines which licenses
  are open source licenses, nothing more. The OSD is a set of necessary
  conditions to be an open source license. It determines the freedom and the
  responsibilities of a user as a set of more or less abstract rules. But it
  does not constitute a set of sufficient tasks which a user has to perform for
  fulfilling any open source license. Open source licenses may differ by
  instantiating the OSD criteria. So, if you want to know what you have to do to
  fulfill a license, you have to go back to the real license of that software
  you are using.
This section outlines reflections by which
we initially focused ourselves on the question why we need an OSLiC and how its
content and form should be derivated from these needs.
Why
Do we need another book about open source? Do you need another book about
open source software? Let us address this question from the viewpoint of what we
already know, what we instinctively believe and what we may have heard. For
example you may presume one or more of the following statements are correct. Or
you may even have experienced similar perceptions from your peers or managers.
Or you have been told they describe 'open source':
  The Open Source Definition offers rules to use open source software.
  Modified open source software must be published.
  Modified open source software must be given back to the community.
  All generations of open source software will remain open for ever.
  Software can either be open source software or proprietary software.
  The opposite of open source software is commercial software.
  open source software prohibits to earn money.
  Modifications of open source software must be marked explicitly.
  Modifiers of open source software must identify themselves.
  When distributing an open source binary it’s enough point to a download
  page to obtain the source code.
  The aim of open source software is to improve the world ethically.
  open source software is viral and infectious.
Do these conceptions sound familiar to you? Unfortunately, whatever we might
believe or wish for, these concepts are incorrect. Naturally we will discuss
this issue later on. For the moment let us assume they are indeed
incorrect 
.
So, again: Do we need another book about open source software? We,
that is -- in this case and at least initially -- the large German company
Deutsche Telekom AG. Arguing from the perspective of a large company
requires not only identifying the common misconceptions, but catering for the
unique needs of a large Enterprise. And indeed the very size of the company
brings its own problems.
Large companies use more open source software in more varied contexts than small
companies. There is an important question that every company should ask:
'Are we sure that we respect all those requirements of open source
software we have to respect?'. But large companies cannot answer this question
as easily as small companies: the large number of diverse open source
deployments in different contexts mean that case by case governance, a model
that may work in small concerns, is far from appropriate for our needs. This
leads to wasting both time and money. Further, the chances of success are small:
training at least one employee in each software team as an open source software
License expert is unrealistic in terms of cost-efficiency and reliability.
Nevertheless even large companies want to and try to fulfill the rules of open
source software thoroughly -- especially Deutsche Telekom AG. When this
company realized that the question Are we sure that we respect all those
rules of open source software correctly which we have to respect could be
problematic, it directly asked some of its employees known as open source
enthusiasts to establish a service and a process for answering this question.
So, it is no surprise that we, the initial authors of this Open Source
License Compendium, were asked by our employer Deutsche Telekom AG.
Naturally we were proud to work on an open source topic officially. But while we
were doing our job we had to ask ourselves if we perhaps needed another
book on open source. Our answer was Yes, we do! Let us shortly explain,
why:
First, we already knew that there exists supporting software. These
meta-programs take the code of any other application and try to list those
open source components being 'covered' by that application 
. But we had also
already realised that this supporting software did not always match the way we
thought the problem should be solved. Second, we recognized fairly quickly that
we need a reliable guide. We personally were asked to give the ok for
projects of our company. We could not answer such requests on the base of
'Oh yes, I read this in the Heise-Ticker a few days ago' -- even
if the Heise-Ticker had described the situation completely correctly. We
ourselves had to be more reliable than this 
. Naturally we already knew a great deal about open source
software. Even so, our knowledge was not as systematic as necessary. We looked
for an open source compendium which adequately described what a project or
product development team had to do to fulfill the criteria of its open source
licenses. We wanted to use that compendium to the basis of our recommendations.
We were very thorough but we did not find what we were looking for. Our 'little'
bibliography attest our seriousness. What we found was a lot of information
releated to individual issues spread over many sources. We did not find answers
to our question even in the specific literature. Let us describe three little
steps to increase the understanding of the issue:
Without open source licenses there is no open source movement. Nevertheless in
dealing with open source licenses, this is sometimes neglected. Take the
Apache Web Server as an example: No doubt, it is one of the most important
pieces of open source software 
 with a specific license[cf.][
wp]AsfApacheLicense20a. Moreover: the success of the open source movement
in the commercial world depends directly on the decision of IBM to replace its
corresponding own component in the IBM WebSphere Application Server
with the free Apache Web Server[cf.][287ff]Moody2001a.
Meanwhile many companies use the Apache Web Server to act as a web
provider. Currently the Apache http server -- as it has to be named
correctly -- is used more than twice as much as all the other http server
software together[cf.][wp]Netcraft2011a. Hence many business
models depend on the Apache License. Another aspect is that even the famous
Apache Cookbook, which explains the installation, the configuration, and
the maintainance of an Apache Web Server in details[cf.][et
passim]CoaBow2004a, does not mention anything about the license which allows
for installation, configuration and maintenance. Neither the index lists the
word 'license'[cf.][245ff, esp. p. 250]CoaBow2004a, nor the chapters
'Installation'[cf.][1ff]CoaBow2004a or the chapter
'Miscellaneous'[cf.][219ff]CoaBow2004a mentions the license question
in a serious way. There's only one short hint as to the advantage of open source
software, i.e. that everybody is allowed to install it[cf.][1: 
einer der Vorzüge von open source software besteht darin, dass
jedermann die Erlaubnis zur Erzeugung eines eigenen Installationskits hat
]CoaBow2004a. Can you be sure that you are allowed to do what you are
doing on the base of such a phrase?
Naturally, the Apache Cookbook is not a book for lawyers, it is a book for
administrators and developers. They do not want to get bogged down by
legalities, they want to set up an Apache Web Server as fast as possible and get
down to work. Indeed, the Apache Cookbook offers a good support. But not only as
a company you have to ask yourself whether you are really allowed to do what you
are doing. Can you find the answer in the Apache Cookbook? No. Can you
find it in the license itself? Yes, but it is difficult 
. So again: Can you find your answer in another book, which is
Amazon's current top recommendation for the search term 'apache
server' ? Not
really: Sascha Kersken's Apache 2.2 Handbook offers a license chapter, but it is
only two pages long[cf.][111f]Kersken2009a. Moreover, the rights and
duties are condensed into just 5 bullet points which taken together do not
explain when the software and the license have to be handed over to a customer
and when you are allowed to hide your
improvements[cf.][112]Kersken2009a.
This brings us to the question of what prevents us from using something like a
'general license cookbook' which explains all the necessary details and
which offers  quick access to the relevant points:
Of course we also browsed the internet. At least for German speaking people
there is an excellent site concerning the topic open source licenses.
offered by iffross, which, loosely translated, means an
Institute for Legal Aspects of the Free and open source
software 
, founded in 2000 as a private institute to
track the phenomenon 'free software' from the viewpoint of (German)
lawyers[cf.][wp]ifross2011b. Besides many other
aspects this site offers a very well and thoroughly elaborated
FAQ[cf.][wp]ifross2011c and a large list of open
source licenses and other related licenses: moreover, evidently it is
classifying the open source licenses in those 'without copyleft-effect' (BSD),
in those with 'strict copyleft-effect' (GPL) and in those with 'restricted
copyleft-effect' (LGPL)[cf.][wp]ifross2011a.
However, even this excellent site does not fulfill our needs. It does not offer
those context specific to-do lists which companies, developers or project
managers can use to ensure their open source software is used in a regular
manner.
We therefore evaluated that standard book which is listed in the most legal
bibliographies 
: the book of Jaeger and Metzger which concerns -- loosely translated
-- the judicial framework requirement for open source
software[cf.][V -- It can not be any surprise that both authors,
Mr. Jaeger and Mr. Metzger are members of ifross (cf.
http://www.ifross.org/personen/, wp)]JaeMet2002a. Even the most
earliest edition of this book already had a clear structure in its chapter
'copyright': For each license mentioned (or at least for each license cluster)
it offered a subchapter for the rights and a subchapter for the
duties[cf.][30ff]JaeMet2002a of the software user[For
getting a good survey of the structure and the line of thought see the contents
cf.][VIIIf]JaeMet2002a. Many other important aspects of the topic
open source are discussed, too[pars pro toto: have a
look at the chapter concerning the liability: cf.][137ff]JaeMet2002a.
But we needed more than this. Despite the quality of the book we were certain
that we could not hand over this book to our programmers with the recommendation
check your touched licenses and follow the instructions of the relevant
subchapters. This book did not contain simply checkable to-do lists,
neither in the first edition[cf.][VIff]JaeMet2002a and in the second
edition[cf.][VIIff]JaeMet2006a nor in the recently published third
edition[cf.][VIIIff. Naturally we use this latest edition for adopting
or discussing systematical aspects]JaeMet2011a. So, how can a company or a
developer or a project manager be sure of fulfilling the requirements of the
open source licenses sufficiently if he/she does not have a verified list
telling him 'do this, and in case of that, do that, and finally do also
this'? Why should he himself implicitly become an open source licenses expert
who has to extract the necessary steps out of the literature?
While we were searching for an existing open source compendium, we found an
article with the title 'Compendium for the Publication of open source
software' . It aims to be a 'pragmatic
guidebook' and an 'assistance' for 'publishing software under the conditions of
an open source license'[cf.][166f (originally: ein
pragmatischer Ratgeber zur Veröffentlichung einer Software
unter den Rahmenbedingungen einer Open-Source-Lizenz) ]BreGlaGra2008a.
Moreover, at the end of this article, its authors formulate ambitiously that
their 'guide' should be carried out, section by section -- for getting a legally
water tight process of publishing open source software[cf.][186
(originally: ein Ratgeber, der es erlaubt  () die zu
berücksichtigende Aspekte (strukturiert abzuarbeiten) ()  und einen
rechtlich nicht angreifbaren Veröffentlichungsprozess zu
ermöglichen) ]BreGlaGra2008a.
The authors of this article describe something close to what we were looking
for. Indeed, the article lists important aspects which have to be taken in
consideration if you want to deal open source software correctly: It announces
that no obligation exists to publish code either if you embed GPL code into your
proprietary code or if you modify the GPL code. It is only if you hand over your
binary to other persons that you have to distribute the code too, but only to
them and not to the general public[cf.][170 and 181]BreGlaGra2008a.
Additionally the articles explains exactly that software -- at least in Germany --
can only be acknowledged as open source software by transferring the rights to
use -- the 'Nutzungsrechte' -- to other people, while the copyright itself
-- the 'Urheberpersönlichkeitsrecht' -- is not transferable and belongs to
the author[cf.][173]BreGlaGra2008a. Moreover, besides other aspects
the articles briefly and deeply discusses the problem of the No-Warranty-Clauses
which are not valid in Germany and which will therefore automatically be
replaced by the liability rules for a
donation[cf.][177]BreGlaGra2008a. And last but not least this article
actually summarizes the idea of Copyleft and the differences between LGPL and
GPL[cf.][181]BreGlaGra2008a.
However some gaps remain. The article does not analyze in which cases a
University or a company perhaps must publish its developments based
on open source software. It does not discern between different licenses
and conditions. It also does not discuss what Universities or companies,
which (re-)use and/or distribute open source software (internally), must do to
fulfill the touched open source licenses. And finally this article
does not offer the step by step list as promised.
We did, however, feel supported by this article, in two ways. First, it was a
well written summary of some main problems. Second, it stated the necessity to
have a compendium for being able to establish a legally 'water-tight' process of
publishing open source software[cf.][186]BreGlaGra2008a. We
seemed to be justified in our assumptions. But the open source compendium we
were looking for had to be more practical, more processable, more distinguishing
and more elaborated.
So again: Did we need a new book about open source software? We had looked for a
reliable integrated open source compendium. But we found separate pieces of
information and -- as we know today -- some rumors. Our answer was clear:
naturally we did not need a new general book about open source. But what was
lacking was a description of what responsible developers, project managers or
product developers require to fulfill open source licenses. We needed an
Open Source License Compendium.
At the best such an Open Source License Compendium would contain a set
of simply to process 'For-Fulfilling-The-License-To-Do-Lists'.
Additionally it should offer an intuitively user-friendly search option for
these lists. In any case, it should share developers and project managers the
effort of having to become open source license experts. For the other users, it
should also clearly explain why one has to do this and not that. Hence a
reliable Open Source License Compendium should not only list what one
has to do, but should offer both, thoroughly verified reliable details and
clearly condensed guidance.
Although we did not find such an open source compendium we were familiar with
the spirit of the open source community. Hence we followed one of its most
simple rules: 'what you miss you must develop on your own'. Some
principles should help us to achieve our targets:
  [To-do lists as the core, discussions around them]: Our work should be
  split into two parts. As its core we wanted to offer a
  set of to-do-Lists. Each of these lists should be relevant to one specific
  open source license and should be clustered by the open source specific use
  cases. Around this all those aspects of open source software which influence the
  interpretation of the licenses and the rules core should be precisely
  characterized. Nevertheless, the users should be able to skip
  details and go directly to the section they require.
  [Quotations with thoroughly specified sources]: Even if our users should
  not be obliged to read every part of the compendium they should not be
  required to believe us. We wanted to be revisable. Because our sources and our
  conclusions should be easily verifiable, we decided to use the academic
  citations and list bibliographic data extensively on the basis that our task
  should be to collect information, not to invent new 'facts'.
  [Not the internet alone, also books and articles]: We wanted to go back
  to the originals even if the internet was full of more or less modified
  copies. We wished to get reliable facts and descriptions. Therefore we decided
  to evaluate not only the internet but also scientific sources -- for example --
  offered by university libraries.
  [Not clearing out the forest land, but cutting out a swathe]: Even if we
  had to deal with licenses and their legal aspects we did not want to get lost
  in detailed discussions. It should not be our task to find out whether a
  specific kind of handling would still be legal or already forbidden.
  We did not want to fight against the licenses. We did not want to stretch
  their ambit or to test their boundary. We wished to accept open source
  licenses as they are: rules written from developers for developers. And even
  if some parts of these licenses would not be valid with respect to a legal
  system[And indeed for example for the GPL one can argue in this way:
  Even if you take the GPL as a contract of the type 'donation' respectively
  Schenkung, it is presented in the form of AGBs respectively
  Allgemeine Geschäftsbedingungen and must therefore follow the
  general AGB rules.'Regrettably' in Germany these general AGB rules do not
  allow to exclude each type of warranty. If we follow Oberhem, §11 and §12 of
  the GPL must be invalid in Germany because of these general AGB rules.
  Moreover, for Oberhem even §5 -- the important clause of the GPL by which you
  can only get the right to use and to distribute GPL software if you respect
  the rules of the GPL -- seems also to be invalid respectively
  unwirksam. But the good message is that the GPL as whole is not
  invalid even if it contains invalid clauses.][128, 133ff, 150ff, esp. 146,
  159]Oberhem2008a, we wanted to take them as our guideline -- at least while
  they do not violate more general laws .
  We simply wanted to find one proven way to cross the maybe slightly
  unsure forest of open source licenses. Even if indeed some clauses of the
  licenses finally were not enforceable against us we wanted to respect them
  'voluntarily'. We wanted to deliver a set of rules which support users and
  remove the possibility of becoming involved in license disputes with open
  source developers or the Free Software Foundation.
  [Take the text seriously]: On the other side we wanted to take our
  license texts as they were. If they lacked anything[The systematical
  underdetermination of licenses is a problem being also known in the open
  source respectively Free Software movement. Following the biography of RMS his
  main judicial counselor Moglen has stated, that there is uncertainty
  in every legal process ()  and that it seemed to be silly to try
  () to take out all the bugs (). Nevertheless -- so
  Moglen resp. Williams -- the goal of Richard Stallman was the complete
  opposite: He tried () to remove uncertainty which is
  inherently impossible. But -- and that's the nub of this analysis --
  Moglen had to follow Stallmann because of RMS character. And he had to
  summarize their work so, that () the resulting elegance (of the
  GPL; KR.), the resulting simplicity (of the GPL; KR.) in design almost
  achieves what it has to achieve. Hence we are asked to take the license
  texts themselves seriously. cf.][177f]Williams2002a, we would interpret the
  open issues in the spirit of the open source idea. But where the text was
  clear and definite we wanted to take its propositions as a definite decision --
  even if that meaning stood against well known open source 'facts'.
  [Trust the swarm]: We did not want to use our own research alone as a
  basis. We knew that the swarm is ever stronger than a set of some randomly
  selected experts. Therefore we decided to publish our text as a still
  unfinished work, starting with an early release 0.2. And then we wanted to
  invite the community to complete the compendium together with us. We would
  elaborate our open source compendium as a set of LaTeX- and BibTeX files which
  could be developed and managed in GIT or any other version control system. And
  finally we would publish our text under a Creative Commons Attribution-Share
  Alike German 3.0 license, to allow other people to correct us, to help us or
  even to take our results for their own purposes.
And so we did. Here is the result. Feel free to use it -- according to our
licensing.
What
Now we can briefly explain how one should be able to use the compendium:
  [The Same Idea, Different Licenses] :- Here you will find background
  information to help you interpret open source licenses in the sense of the
  Free Software movement[At least at this place you are perhaps
  expecting that we use the logograms FLOSS, F/OSS, F/LOSS, or whatever. As you
  will read later on the word Free is ambiguous and has strained the
  use of the concept Free Software. Later on we will also talk about
  the invention of the concept open source designed as a 'replacement'
  and acting as a 'splitter'. The mentioned logograms are introduced to
  re-establish or -- at least -- to underline the common history and the common
  center of 'both' movements, whereby the word Libre shall resolve the
  ambiguity of the word Free. For a first survey cf.] [
  wp]wpFloss2011a, the open source software movement[For
  another brief and informative introduction cf.][231ff esp. p. 
  232f]Fogel2006a, or the GNU-Project 
. We discuss
  different ways to cluster open source licenses. Finally we present our own
  taxonomy based on the labels 'protecting the developer', 'protecting the
  licensed code' and 'protecting the on-top-developments'. If you are familiar
  with the methods of grouping different open source licenses and particular
  if you know that you can not authorize your doings on the base of descriptions
  of such license groups, then it is enough, in order to understand our line of
  thought, to briefly note our taxonomy and its wording.
  [The Problem of Derivated Works] :- This chapter is important. In the
  spirit of software developers we try to explain which kinds of programming
  evoke a derivated work and which not. Our to-do lists will refer to this
  analysis.
  [The Problem of Combining Different Licenses] :- You should
  not ignore this chapter. We will explain why and how combining software
  of different licenses is not as dangerous as it is often told. The results of
  this chapter influence the structure of our to-do lists.
  [open source software and Money] :- Here we will shortly
  discuss ways in which money is no problem. If you already know that it is only
  prohibited to require payment for the act of licensing a piece of open source
  software to second or third parties and if you already know that this is only
  forbidden by some licenses, and not by all, than you can postpone the reading
  of this chapter.
  [The Problem of Implicitly Freeing Patents] :- Here we
  will illuminate some aspects of software patents and how the are handled by
  some open source licenses. You should know what licenses implicitly do with
  your patents. But it is not our intention to write a software patent
  compendium.
  [Open Source Use Cases as Principle of Classification] :- This is an
  important chapter. We explain our categories 'Use as it is', 'Modify the
  Code', 'With Redistribution', 'Without Redistribution', 'Isolated Initial
  Development', 'On-Top-Development': we develop and discuss our taxonomy with
  respect to the side effects of 'combining different licenses' and 'generating
  derivated works'. This taxonomy will determine the following chapters.
  [open source licenses: Find Your Specific To-do Lists] :- This is a kind
  of summary which joins the relevant aspects and elaborates the 'finder
  for your to-do lists'. This is the chapter which you probably will reuse
  frequently, even if you do not want to read any of our explanations.
  [open source license Fulfillment: Classified To-do Lists] :- This chapter
  offers all classified to-do lists. The structure of its subchapters will
  match the structure of our finder and the structure of our taxonomy.
  [open source licenses and Their Legal Environments] :- Here we discuss
  why using open source software in a regular manner is not only a question of
  the licenses themselves but of the kind of the surrounding legal system.
  [Appendices: Some Widespread Open Source Myths] :- Here we make good on
  our promise to explain why all the propositions mentioned at the beginning of
  this chapter are wrong. You might read this chapter as a special introduction
  or a reminder epilogue whenever you want to do.
[etseqq]et seqq.and the following ones
[id]id.idem = latin for 'the same', be it a man, woman or a group
[ibid]ibid.ibidem = latin for 'at the same place'
[ifross]ifrossInstitut für Rechtsfragen der Freien und Open Source
Software
[lc]l.c.loco citato = latin for 'in the place cited'
[np]np.no page numbering
[wp]wp.webpage / webdocument without any internal (page)numbering
[nst]n.st.not stated
[njear]n.y.year not stated / no year
[nlocation]n.l.location not stated / no location
[ub]UB'Universitätsbibliothek' = library of university X
[ulb]ULB'Universitäts-  Landesbibliothek' = library of university and state X
[apl]ApLApache License
[bsd]BSDBerkeley Software Distrobution (License)
[mit]MITMassachusetts Institute of Technology (License)
[mspl]Ms-PLMicrosoft Public License
[pgl]PgLPostgres License
[php]PHPPHP (License)
[epl]EPLEclipse Public License
[eupl]EUPLEuropean Union Public License
[lgpl]LGPLGNU Lesser General Public License
[mpl]MPLMozilla Public License
[gpl]GPLGNU General Public License
[agpl]AGPLGNU Affero General Public License
[nabbr]n.abbr.no abbreviation (known)
[zge]ZGE / IPJZeitschrift für geistiges Eigentum [ISSN: 1867-237x]
[itrb]ITRBDer IT-Rechtsberater [ISSN: 1617-1527]
[cri]CRiComputer Law Review international [ISSN: 1610-7608]
[btlj][n.abbr.]Berkeley Technology Law Journal
[eclr]E.C.L.R.European Competition Law Review
[iesw][n.abbr.]IEEE Software [ISSN: 0740-7459]
[cuitj][n.abbr.]Cutter IT Journal [ISSN: 1048-5600]
[uoclr][n.abbr.]University of Chicago Law Review
[uoilr][n.abbr.]University of Illinois Law Review
[uoplr][n.abbr.]University of Pittsburgh Law Review
[ddt]DDTDrug Discovery Today [ISSN: 1359-6446]
[rdm][n.abbr.]RD Management [ISSN: 1467-9310]
[jleo]JLEOJournal of Law, Economics,  Organization [ISSN: 1465-7341]
[ijomi][n.abbr.]International Journal of Medical Informatics [ISSN: 1386-5056]
[slr][n.abbr.]Stanford Law Review [ISSN: 00389765]
[bise]BISEBusiness  Information Systems Engineering [ISSN: 1867-0202]
[joals][n.abbr.]Journal of Academic Librarianship [ISSN: 0099-1333]
[eait][n.abbr.]Ethics and Information Technology [ISSN: 1388-1957]
[jais]JAISJournal of the Association for Information Systems [ISSN:
1536-9323]
[josas][n.abbr.]Journal of Systems and Software [ISSN: 0164-1212]
[iialr][n.abbr.]International Information and Library Review [ISSN: 1057-2317]
[sthv]STHVScience, Technology  Human Values [ISSN: 0162-2439]
[cue][n.abbr.]Computers  Education [ISSN: 0360-1315]
[eer]EEREuropean Economic Review [ISSN: 0014-2921]
[icc]ICCIndustrial and Corporate Change [ISSN: 0960-6491]
[ca][n.abbr.]Cultural Anthropology [ISSN: 1548-1360]
[sqj][n.abbr.]Software Qualilty Journal [ISSN: 0963-9314]
[jmir]JMIRJournal of Medical Information Research [ISSN: 1438-8871]
[joce][n.abbr.]Journal of Comparative Economics [ISSN: 0147-5967]
[orgsci][n.abbr.]Organization Science [ISSN: 1047-7039]
[iam][n.abbr.]Information  Management [ISSN: 0378-7206]
[rp]RPResearch Policy [ISSN: 0048-7333]
[jsis]JSISJournal of Strategic Information Systems [ISSN: 0963-8687]
[isj]ISJInformation Systems Journal [ISSN: 1365-2575]
[jise]JISEJournal of Information Science and Engineering [ISSN:
1016-2364]
[dss]DSSDecision Support Systems [ISSN: 0167-9236]
[cihp]CiHBComputers in Human Behavior [ISSN: 0747-5632]
[iep]IEaPInformation Economics and Policy [ISSN: 0167-6245]
[tosem]ToSEMTransactions on Software Engineering Methodology [ISSN:
1049-331X]
[commacm]CotACMCommunications of the ACM [ISSN: 0001-0782]
[interactions][n.abbr.]interactions[ISSN: 1072-5520]
[jcsc]JCSCJournal of Computing Sciences in [Small] Colleges [ISSN:
1937-4771]
[linuxjournal]LJLinux Journal [ISSN: 1075-3583]
[networker][n.abbr.]netWorker [ISSN: 1091-3556]
[queue][n.abbr.]Queue [ISSN: 1542-7730]
[sigmisdb]SIGMIS DatabaseACM SIGMIS - The Data Base for Advances in
Information Systems [ISSN: 0095-0033]
[sigcas]SIGCASACM SIGCAS Computers and Society [ISSN: 0095-2737]
[sigsoft]SIGSOFT SENSIGSOFT Software Engineering Notes [ISSN:
0163-5948]
[toit]ToITTransaction on Internet Technology [ISSN: 1533-5399]
[sigbul]SIGCSE BulletinSIGCSE Bulletin [ISSN: 0097-8418]
[ubiquity]UbiquityUbiquity - The ACM IT Magazine and Forum [ISSN:
1530-2180]
[bwv]BWVBerliner Wissenschafts-Verlag GmbH
[cr]CRComputer und Recht. Zeitschrift für die Praxis des Rechts der
Informationstechnologien
Introduction
quote
This chapter briefly describes the idea behind the , the way it should be
used and the way it can be read---which is indeed not quite the same.
quote
This book focuses on just one issue: What needs to be done in order to act
in accordance with the licenses of those open source software we use?
The Open Source License Compendium aims at reliably answering this
question---in a simple and easy to understand manner. However, it is not just
another book on open source in general. Meanwhile, there are
tons of literature dealing with open source. Trying to expand your knowledge by
means of books and articles might let you get lost in literature: our list of
secondary literature may adumbrate this `danger of being overwhelmed'. But
nevertheless, our bibliography at the end of the  is not complete.
Moreover, it is not intended to be complete. It is only an extract representing
the background information we did not directly cite in the . If we were
forced to indicate two books for attaining a good overview on the topic of
open source (licenses) we would name (a) the `Rebel Code' ([for a
German version cf.][passim]Moody2001a---[for an English version
cf.][passim]Moody2002a) and (b) the `legal basic conditions'
([cf.][passim]JaeMet2011a). But fortunately, we are not forced to
do so. The intention is, rather, for it to be a tool for simplifying the
activities for achieving license conformity.
This compendium was created out of necessity at Deutsche Telekom AG to
counter a challenge some of its software developers and project managers were
facing: Of course, the company itself wants to behave as license compliantly as
its employees, but, unfortunately, they could not find a reference text which
simply lists what precisely must be done in order to comply with the license of
that piece of open source being used.
As some of these co-workers in Telekom projects, even we---the initial authors
of the not want to become open source license experts only for being
able to use open source software in accordance with their respective licenses. We
did not want to become lawyers. We just wanted to do more efficiently, what
in those days claimed much time and many resources. We were searching for clear
guidance instead of having to determine a correct way through the jungle of open
source licenses---over and over again, project for project. We loved using the
high-quality open source software to improve our performance. We liked using it
legally. But we did not like to laboriously discuss the legal constraints of the
many and different open source licenses.
What we needed was an easy-to-use handout which would lead us without any
detours to executable lists of work items. We wished to obtain to-do lists,
tailored to our usecases and our licenses. We needed reliable lists of tasks we
only had to execute for being sure that we were acting in accordance with the
open source license. When we started out, such a compendium did not exist.
For solving this problem our company took three decisions:
The first decision our company arrived at was to support a small group of
employees to act as a board of open source license experts: They should
offer a service for the whole company. Projects, managers, and developers should
be able to ask this board what they have to do for complying with a specific
open Source License under specific circumstances. And this board should answer
with authoritative to-do lists whose executions would assure that the requestors
are acting according to the corresponding open source licenses. The idea behind
this decision was simple. It would save cost and increase quality if one had one
central group of experts instead of being obliged to select (and to train)
developers---over and over again, for every new project. So, the OSRB 
(the Telekom Open Source Review Board) was founded as an internal expert
group---as a self-organizing, bottom-up driven community.
The second decision our company took was to allow this Telekom OSRB to
collect their results systematically---in the form of a reusable compendium.
The idea behind this decision was also simple: The more the internal service
became known, the more the workload would increase: the more work, the more
resources, the more costs. So, such a compendium should save costs and enable
the requestors to find answers by themselves without becoming license experts:
For all default cases, they should find an answer in the compendium instead of
having to request that their work is analyzed by the OSRB. Thus, the planned
Telekom Open Source License Compendium will prevent the need
to increase the size of the OSRB in the future.
The third decision our company reached was to allow the Telekom OSRB to
create the compendium in the same mode of cooperation that open source projects
usually use. Again, a simple reason evoked this ruling: If in the future---as a
rule---not a reviewing OSRB, but a simple manual should assure the open 
source license compliant behavior of projects, programmers, and managers, this
book had of course to be particularly reliable. There is a known feature of the
open source working model: the ongoing review by the cooperating community
increases the quality. Therefore, the decision not only to write an internal
`Telekom handout,' but to enable the whole community to use, modify, and 
redistribute a broader Open Source License Compendium was a decision for
improving quality. Consequently, the OSRB decided to publish the
 as a set of sources, publicly available via the open
repository GitHub. Get the code by using the link
https://github.com/dtag-dbu/oslic; get project information by
http://dtag-dbu.github.com/oslic/ or by
http://www.oslic.org/.  And it licensed the  under Creative
Commons Attribution-ShareAlike 3.0 Germany License. This text is
licensed under the Creative Commons Attribution-ShareAlike 3.0 Germany License
(http://creativecommons.org/licenses/by-sa/3.0/de/): Feel free
to share (to copy, distribute and transmit) or to remix (to
adapt) it, if you [] distribute the resulting work under the
same or similar license to this one and if you respect how you must
attribute the work in the manner specified by the author(s) []):
In an internet based reuse please mention the initial authors in a suitable
manner, name their sponsor Deutsche Telekom AG and link it to
http://www.telekom.com. In a paper-like reuse please insert a short
hint to http://www.telekom.com, to the initial authors, and to their
sponsor Deutsche Telekom AG into your preface. For normal citations
please use the scientific standard.
But to publish the  as a free book has another important
connotation---at least for the Telekom OSRB: It is also intended to be an
appreciative giving back to the open source community which has
enriched and simplified the life of so many employees and companies over so many
years. 
Altogether, the  follows five principles:
description
  [To-do lists as the core, discussions around them] Based on a simple
  form for gathering information concerning the use of a piece of open
  source software and its license, the  shall offer an easy to use finder
  taking the requestor to the respective to-do list for ensuring license
  conformity. In addition, all these elements of the  should comprehensibly
  be introduced and discussed without disturbing the usage itself.
  [Quotations with thoroughly specified sources]QuotationPrinciple
  The  shall be revisable and reliable. It shall comprehensibly argue and
  explicitly specify why it adopts which information, from whom, in which
  version, and why. For that purpose, we are using an `old-fashioned'
  bibliographic style with footnotes, instead of endnotes or inline-hints.
  We want to enable the users to review or to ignore our comments and hints just
  as they prefer---but on all accounts without being disturbed by large inline
  comments or frequent page turnings. We know that modern writer guides prefer
  less `noisy' styles ([pars pro toto cf.][passim]Mla2009a). But
  for a reliable usage---challenged by the often modified internet
  sources---these methods are still a little imprecise (for details
   , pp. sec:QuotationAppendix. For a short
  motivation of the style used in the  [cf.][
  passim]Reincke2012a. For a more elaborated legitimizing version
  [cf.][passim]Reincke2012b). 
  [Not clearing the forest, but cutting a swath] The  has to deal with
  licenses and their legal aspects, no doubt. But it shall not discuss all
  details of every aspect. It shall focus on one possible way to act according
  to a license in a specific usecase---even if it is known that there might be
  alternatives. The  shall not counsel projects with respect to
  their specific needs. This must remain the task for lawyers and legal experts.
  The  cannot and shall not replace a legal review or a legal advice by
  lawyers. It shall inspire developers, managers, open source experts, and
  companies to find good solutions, which they finally should have reviewed by
  legal counselors. For the German readers let us repeat again: The
   naturally respects the German Rechtsdienstleistungsgesetz. It only
  contains legal reflections addressed to a general public. Its content may only
  be read as a nur an die Allgemeinheit gerichtete Darstellung und
  Erörterung von Rechtsfragen.
  
  [Take the license text seriously!] The  shall not give general
  lectures on legal discussions, much less shall it participate in them. It
  shall only find one dependable way for each license and each usecase to comply
  with the license. The main source for this analysis shall be the exact reading
  of the open source licenses themselves---based on and supported by the
  interpretation of benevolent lawyers and rationally arguing software
  developers. The  shall respect that open source licenses are written for
  software developers (and sometimes by developers).
  
  [Trust the swarm!] The  shall be open for improvements and
  adjustments encouraged and stimulated also by other people than employees of
  Deutsche Telekom AG.
description
Based on these principles the  offers two methods for being used:
First and foremost the readers expect to simply and quickly find those to-do
lists fitting their needs. Here is the respective process:
   For the well known `quick and dirty hackers'---as we tend to be, 
  too---we have integrated a shortcut: If you already know the license of the 
  open source package you want to use and if you are very familiar with the 
  meaning of the open source use cases we defined, then you might directly 
  jump to the corresponding license specific chapter, without `struggling' 
  with OSLiC 5 query form (  p. 
  OSLiCStandardFormForGatheringInformation), the taxonomic
  Open Source Use Case Finder (
  OSLiCUseCaseFinder) or the Open Source Use
  Case page ( OSUCListff.): Some of the chapters
  dedicated to specific open source licenses start with a license specific
  finder offering a set of license specific use cases---which, according to the
  complexity of the license, in some cases could be stripped down. But the
  disadvantage of this method is that you have to apply your knowledge about the
  use cases and their side effects by yourself without being systematically guided
  by the  process.
decision = [diamond, draw, fill=gray!20, 
    text width=4.5em, text badly centered, node distance=4cm, inner sep=0pt]
preparation = [rectangle, draw, fill=gray!30, 
    text width=11.5em, text centered, rounded corners, minimum height=3em]
 
lprocs = [rectangle, draw, fill=gray!40, 
    text width=11.5em, text centered, rounded corners, minimum height=3em]
    
processing = [rectangle, draw, fill=gray!40, node distance=2.4cm,
    text width=15em, text centered, rounded corners, minimum height=4em]
    
line = [draw, -latex']
cloud = [draw, ellipse, text centered, fill=gray!10]
 
    
tikzpicture[node distance =1.5cm, auto]
    
    
  [cloud, anchor=south, text width=7em] (start) at (1,10) 
     open source 
 components;
  [preparation, below of=start] (select) 
    select next open source component;     
  [preparation,  below of=select] (analyze) 
    analyze its role as part of software system;
     
  [preparation,  below of=analyze] (determine) 
    determine usage of final software product / service;     
    
  [preparation,  below of=determine] (detect) 
    detect respective open source license;
    
  [lprocs,  below of=detect] (fillin)
    fill in the 5 query form ( p.
    OSLiCStandardFormForGatheringInformation);
    
  [decision, right of=fillin] (success) success?;
  
  [processing,  below of=success] (traverse)
    traverse taxonomic Open Source Use Case Finder
    ( OSLiCUseCaseFinder)  jump to indicated
    Open Source Use Case page (
    OSUCListff.);
    
  [processing,  below of=traverse] (find)
    Determine page of license and use case specific to-do
    list being presented in license specific chapter;
 
  [processing,  below of=find] (process)
    Jump to indicated page  process license and use case specific
    to-do list ( OSUCToDoListsff.);
    
  [decision, right of=process] (other) more?;
  [cloud, right of=other, anchor=west] (stop) stop;
  [line] (start) -- (select);  
     
  [line] (select) -- (analyze);      
  [line] (analyze) -- (determine);
  [line] (determine) -- (detect);       
  [line] (detect) -- (fillin);
  [line] (fillin) -- (success);
  
  [line] (success) - node [near start] no (analyze);
  [line] (success) -- node [near start] yes (traverse);             
  
  [line] (traverse) -- (find);              
  [line] (find) -- (process);
  [line] (process) -- (other);
  [line] (other) - node [near start] yes (select);
  [line] (other) -- node [near start] no (stop);                      
tikzpicture
Second, the readers might wish to comprehend the whole analysis. So, we briefly
discuss open source license taxonomies as the basis for a license compliant
behavior.  OSLIC sec:LicenseTaxonomies,
pp. sec:LicenseTaxonomies  We consider some side effects of acting
according to the open source licenses.  OSLiC
sec:SideEffects, pp. sec:SideEffects Finally,
we study the structure of open source use cases.  OSLiC
sec:OSUCdeduction, pp. sec:OSUCdeduction
So, let us close our introduction by using, modifying, and (re)distributing a
well known wish of a well known man: Happy (Legally) Hacking.
Open Source: The Same Idea, Different Licensessec:LicenseTaxonomies
quoteThis chapter describes different license
models which follow the common idea of free open source software. We want to
discuss existing ways of grouping licenses to underline the limits of building
such clusters: These groups are often used as `virtual prototypical licenses'
which are supposed to provide simplified conditions for acting according to
the respective real license instances. But one has to meet the requirements of a
specific license, not one's own generalized idea of a set of licenses.
Nonetheless, we, too,  offer a new way of structuring the world of the open
source licenses. We will use a novel set of grouping criteria by referring
to the common intended purpose of licenses: each license is designed to protect
something or someone against something or someone. Following this pattern, we
can indeed summarize all Open Source Licenses in a comparable way.
quote
Grouping open source licenses Talking about licenses is sometimes a bit
tricky: Normally, they have a longer official name and a well known, often
abbreviating inofficial nickname. But that's not enough for talking about a
specific license adequately: one has additionally to refer to the version of the
license itself. The Linux Foundation offers a set of normalized names and
identifiers, to minimize the confusion how to denote a license correctly
([cf.][wp]LinuxFounSpdxList2014a). The OSLiC tries to use these
SPDX identifiers as far as possible. But sometimes the OSLiC wants to group
specific licenses by their authors without discriminating the release numbers.
Then, the OSLiC uses prefixes of the SPDX. is commonly done.
Even the set of the open source licenses[cf.][
wp]OSI2012b itself is already a cluster being established by a set of grouping
criteria: The distribution terms of each software license that intends
to become an open source license [] must comply with the []
criteria of the Open Source Definition,[cf.][
wp]OSI2012a maintained by the Open Source
Initiative[cf.][wp]OSI2012c and often abbreviated as
OSD. So, this OSD demarcates `the group of [potential] open source
licenses' against `the group of not open sources licenses.' More
precisely: meeting the OSD is only a necessary condition for becoming an
open source license. The sufficient condition for becoming an open
source license is the approval by the OSI, which offers a process for the
official approval of open source license ([cf.][
wp]OSI2012d).
Another way to cluster the Free Software Licenses is specified by the
Free Software Definition. This FSD contains four conditions
which must be met by any free software license: any FSD compliant license must
grant the freedom to run a program, for any purpose [],
the freedom to study how it works, and adapt it to (one's) needs
[], the freedom to redistribute copies [], and finally
the freedom to improve the program, and release your improvements
[][cf.][41]Stallman1996a Surprisingly this definition
implies that the requirement the sourcecode must be openly accessible
is `only' a derived condition. If the freedom to make changes and the
freedom to publish improved versions shall be meaningful, then the
access to the source code of the program is a prerequisite.
Therefore, accessibility of source code is a necessary condition for
free software.[cf.][41]Stallman1996a
The difference between the OSD and the FSD has often been described as a
difference of emphasis:
   This is also the viewpoint of Richard M. Stallman: 
  On the one hand, he clearly states that the Free Software
  movement and the open source movement generally []
  disagree on the basic principles, but agree more or less on the practical
  recommendations and that he [] (does) not think of the open
  source movement as an enemy.  On the other hand, he delineates the two
  movements by stating that for the open source movement, the issue of
  whether software should be open source is a practical question, not an ethical
  one, while for the Free Software movement, non-free software is a
  social problem and free software is the solution
  ([cf.][55]Stallman1998a). RmsFsPriority Consequently, Richard
  M. Stallman summarizes the positions in a simple way: [] `open
  source' was designed not to raise [] the point that users deserve
  freedom. But he and his friends want to spread the idea of freedom
  and therefore [] stick to the term `free software'
  ([][59]Stallman1998a). For a brush-up of this position, expressing
  again that (o)pen source is a development methodology [and that] free
  software is a social movement with an ethical imparative
  [cf.][31]Stallman2009a 
Although both definitions []
(cover) almost exactly the same range of software, the Free Software
Foundation---as it is said---prefers [] (to emphazise) the
idea of freedom [] while the OSI wants to underline the
philosophically indifferent development methodology.[pars pro
toto: cf.][232]Fogel2006a
A third method to group of free software and free software licenses is specified
by the Debian Free Software Guideline, which is embedded into the
Debian Social Contract. This DFSG contains nine defining
criteria, which---as Debian itself says---have been [] adopted
by the free[sic!] software community as the basis of the Open Source
Definition.[cf.][wp]DFSG2013a
A rough understanding of these methods might result in the conclusion that these
three definitions are extensionally equal and only differ intensionally.
But that is not true. To unveil the differences, let us compare the clusters
OSI approved licenses, OSD compliant licenses, DFSG
compliant licenses, and FSD compliant licenses extensionally, by asking
whether they could establish different sets of licenses. Indeed,
for analyzing the extensional power of the definition we have to regard all
potentially covered licenses, not only the already existing licenses, because
the subset of really existing licenses still could be expanded be developing new
licenses which fit the definition.
First, the difference most easy to determine is that of an unidirectional
inclusion: By definition, the OSI approved licenses and the OSD
compliant licenses meet the requirements of the OSD.[cf.][
wp]OSI2012a But only the OSI approved licenses have successfully
passed the OSI process[cf.][wp]OSI2012a and therefore are
officially listed as open source licenses.[cf.][
wp]OSI2012b
Hence, on the one hand, OSI approved licenses are
open source licenses and vice versa. On the other hand, both---the
OSI approved licenses and the open source licenses---are
OSD compliant licenses, but not vice versa.
Second, a similar argumentation allows us to distinguish the DFSG compliant
licenses from the OSI approved licenses. As it is stated, the OSD
[] is based on the Debian Free Software Guideline and any
license that meets one definition almost meets the
other.[cf.][233]Fogel2006a But then again, meeting the definition is
not enough for being an official open source license: the license has to be
approved by the OSI.[cf.][wp]OSI2012b Thus, it follows that
all OSI approved licenses are also DFSG compliant licenses, but
not vice versa.
Third, by ignoring the few exceptions which have appeared
over the years,[cf.][233]Fogel2006a it can be said that,
because of their `kinsmanlike' relation, at least the OSD compliant
licenses are also DFSG compliant licenses and vice versa.
Last but not least, it must be stated that the (potential) set of free software
licenses must be greater than all the other three sets: On the one side, the FSD
requires that a license of free software must not only allow to read the
software, but must also permit to use, to modify, and to distribute
it.[cf.][41]Stallman1996a These conditions are covered by at least
the first three paragraphs of the OSD concerning the topics Free
Redistribution, Source Code, and Derived
Works.[cf.][wp]OSI2012a On the other side, the OSD contains
at least some requirements which are not mentioned by the FSD and which
nevertheless must be met by a license in order to be qualified as an OSD
compliant license. For example, see the condition that the
license must be technology-neutral ([cf.][wp]OSI2012a). It
follows then that there may exist licenses which fulfill all conditions of the
FSD and nevertheless do not fulfill at least some conditions of the
OSD. Again: we must consider the extensional potential of the
definitions, not the set of really existing licenses. In this context, it is
irrelevant that actually all existing Free Software Licenses like GPL, LGPL or
AGPL indeed are also classfied as open source licenses. We are referring to the
fact that there might be generated licenses which fulfill the FSD, but not the
OSD. So, the set of all (potential) Free Software Licenses must be
greater than the set of all (potential) open source licenses and greater
than the set of OSD compliant licenses.
All in all, we can visualize the situation as follows:
center
tikzpicture
LICTAX
[ellipse,minimum height=5.8cm,minimum width=11.6cm,draw,fill=gray!10] (l0210) at (5,5)
 ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=All Software Licenses,
              postaction=decorate] (0,6.1) arc (120:60:10cm);
[ellipse,minimum height=4.4cm,minimum width=10cm,draw,fill=gray!20] (l0210) at (5,5)
 ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=FSD Compliant Licenses,
              postaction=decorate] (0,5.4) arc (120:60:10cm);
              
[ellipse,minimum height=3cm,minimum width=8.4cm,draw,fill=gray!30] (l0210) at (5,5)
 ;
             
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=OSD Compliant Licenses,
              postaction=decorate] (0,4.7) arc (120:60:10cm);
              
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=DFSG Compliant Licenses,
              postaction=decorate] (0,5) arc (240:300:10cm);
          
[ellipse,text width=4.4cm, text centered,minimum height=1.6cm,minimum width=6cm,draw,fill=gray!40] (l0210) at (5,5)
 OSI approved licenses = 
 open source licenses
;
tikzpicture
center
It should be clear without longer explanations that these clusters don't allow
to extrapolate to the correct compliant behaviour according to the open source
licenses: On the one hand, all larger clusters do not talk about the open
source licenses. On the other hand, the open source license cluster
itself only collects its elements on the basis of the OSD which does not stipulate
concrete license fulfilling actions for the licensee.
The next level of clustering open source licenses concerns the inner
structure of these OSI approved licenses. Even the OSI itself has recently
discussed whether a different way of grouping the listed licenses would better fit
the needs of the visitors of the OSI site.[cf.][wp]OSI2013a
And finally the OSI came up with the categories popular and widely used
(licenses) or with strong communities, special purpose licenses,
other/miscellaneous licenses, licenses that are redundant
with more popular licenses, non-reusable licenses, superseded
licenses, licenses that have been voluntarily retired, and 
uncategorized licenses.[cf.][wp]OSI2013b
Another way to structure the field of open source licenses is to think in
types of open source licenses by grouping the academic
licenses, named as such because they were originally created by academic
institutions,[cf.][69]Rosen2005a the reciprocal
licenses, named as such because they [] require the
distributors of derivative works to distribute those works under same
license including the requirement that the source code of those derivative works
be published,[cf.][70]Rosen2005a the standard
licenses, named as such because they refer to the reusability of
industry standards,[cf.][70]Rosen2005a and the
content licenses, named as such because they refer to
[] other than software, such as music art, film, literary works
and so on.[cf.][71]Rosen2005a
Both kinds of taxonomies directly help to find the relevant licenses that should
be used for new (software) projects. But again: none of these categories 
allows us to infer license compliant behaviour, because the categories are
mostly defined based on license external criteria: whether a license is
published by a specific kind of organization or whether a license deals with
industry standards or other kind of works than software inherently does not
determine a license fulfilling behaviour.
Only the act of grouping into academic licenses and 
reciprocal licenses touches the idea of license fulfillment
tasks, if one---as it has been done---expands the definition of the  
academic licenses by the specification that these licenses
[] allow the software to be used for any purpose whatsoever with
no obligation on the part of the licensee to distribute the source code of
derivative works.[cf.][71]Rosen2005a With respect to this additional
specification, the clusters academic licenses and the
reciprocal licenses indeed might be referred as the
main categories of (open source)
licenses:[cf.][179]Rosen2005a By definition, they are constituting
not only a contrary, but contradictory opposite. However, it must  be kept in
mind that they constitute an inherent antagonism, an antinomy inside of the set
of open source licenses. Hence, it is at least a little confusing to say
that the open source license (OSL) is a reciprocal license and
the Academic Free License (AFL) is the exact same license without the
reciprocity provisions ([cf.][180]Rosen2005a): If the BSD license is an
AFL and if an AFL is not an OSL and if the OSI approves only OSLs, then the BSD
license can not be an approved open source license. But in fact, it still is 
([cf.][wp]OSI2012b).
Similiar in nature to the clustering into academic licenses and 
reciprocal licenses is the grouping into permissive licenses, 
weak copyleft licenses, and strong copyleft licenses: 
Even Wikipedia uses the term permissive free software licence in the
meaning of a class of free software licence[s] with minimal
requirements about how the software can be redistributed and contrasts
them with thecopyleft licences as those with reciprocity
/share-alike requirements.[cf.][wp]wpPermLic2013a
Some other authors name the set of academic licenses the
permissive licenses and specify the reciprocal licenses as
restrictive licenses, because in this case---as a consequence of the
embedded copyleft effect---the source code must be published in case
of modifications. They also introduce the subset of strong
restrictive licenses which additionally require that an (overarching)
derivative work must be published under the same license.[pars pro toto
cf.][57]Buchtala2007a The next refinement of such clustering concepts
directly uses the categories [open source] licenses with a strict
copyleft clause,[Originally stated as Lizenzen mit einer
strengen Copyleft-Klausel. Cf.][24]JaeMet2011a [open source]
licenses with a restricted copyleft clause,[Originally stated as
Lizenzen mit einer beschränkten Copyleft-Klausel.
Cf.][71]JaeMet2011a and [open source] licenses without any copyleft
clause.[Originally stated as Lizenzen ohne Copyleft-Klausel.
Cf.][83]JaeMet2011a Finally, this viewpoint can directly be mapped to the
categories strong copyleft and weak copyleft: While on the one
hand, only changes to the weak-copylefted software itself become
subject to the copyleft provisions of such a license, [and] not changes to the
software that links to it, on the other hand, the strong copyleft
states [] that the copyleft provisions can be efficiently imposed
on all kinds of derived works.[cf.][wp]wpCopyleft2013a
Based on this approach to an adequate clustering and labeling,
   Finally, we should also mention that there exists still other
  classifications which might become important in other contexts. For example,
  the ifross license subsumes under the main category Open Source
  Licenses the subcategories Licenses without Copyleft Effect,
  Licenses with Strong Copyleft, Licenses with Restricted
  Copyleft, Licenses with Restricted Choice, or Licenses
  with Privileges---and lets finally denote these categories also licenses
  which are not listed by the OSI ([cf.][wp]ifross2011a). This is
  reasonable if one refers to the meaning of the OSD ([cf.][
  wp]OSI2012a). The  wants to simplify its object of study by
  referring to the approved open source licenses ([cf.][
    wp]OSI2012d) listed by the OSI ([cf.][wp]OSI2012b).
we can develop the following picture:
center
tikzpicture
OSLICTAX
[ellipse,minimum height=8.5cm,minimum width=14cm,draw,fill=gray!10] (l0100) at (6.8,6.8)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= OSI approved licenses,
              postaction=decorate] (-0.8,6.5) arc (142:38:9.5cm);
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=open source licenses,
              postaction=decorate] (-0.8,6.5) arc (218:322:9.5cm);
              
[ellipse,minimum height=6.2cm,minimum width=4cm,draw,fill=gray!20] (l0100) at (2.75,6.8)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= permissive licenses,
              postaction=decorate] (0.9,7.4) arc (180:0:1.8cm);
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0101) at (1.9,7.7)  Apache-2.0;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0102) at (3.6,7.7)  BSD-X-Clause;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0103) at (1.9,6.7)   MIT;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0104) at (3.6,6.7)   MS-PL;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0105) at (1.9,5.7)   Post-greSQL;
[rectangle,draw,text width=1.3cm, text height=0.36cm, fill=gray!40, text
centered] (l0106) at (3.6,5.7)   PHP-3.X;
[ellipse,minimum height=6cm,minimum width=8.5cm,draw,fill=gray!20] (l0200) at (9.2,6.5)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= copyleft licenses,
              postaction=decorate] (7.5,8.5) arc (120:60:4cm);
[ellipse,minimum height=4.5cm,minimum width=4.2cm,draw,fill=gray!30] (l0210) at (7.45,6.5)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= weak copyleft licenses,
              postaction=decorate] (5.4,6.2) arc (180:0:2cm);
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0211) at (6.7,6.9)   EPL-1.X;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0212) at (8.2,6.9)   EUPL-1.X;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0213) at (6.7,5.7)   LGPL-Y.Y;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0214) at (8.2,5.7)   MPL-X.Y;
[ellipse,minimum height=4.5cm,minimum width=3cm,draw,fill=gray!30] (l0220) at (11.4,6.5)
  ;
 
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= strong copyleft,
              postaction=decorate] (10.4,7) arc (180:0:1cm);
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= licenses,
              postaction=decorate] (10.4,5.4) arc (180:360:1cm);        
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0221) at (11.4,6.8)   GPL-X.Y;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0222) at (11.4,5.6)   AGPL-3.X;
tikzpicture
center
This extensionally based clarification of a possible open source license
taxonomy is probably well-known and often---more or less explicitly---
referred to. Even the FSF itself uses the term `permissive non-copyleft
free software license' ([pars pro toto: cf.][wp/section `Original BSD
license']FsfLicenseList2013a) and contrasts it with the terms `weak copyleft'
and `strong copyleft' ([pars pro toto: cf.][wp/section `European
Union Public License']FsfLicenseList2013a) Unfortunately, this taxonomy
still contains some misleading underlying messages:
Permissive has a very positive connotation. So, the antinomy of
permissive licenses versus copyleft licenses implicitly signals,
that the permissive licenses are in some sense better than the
copyleft licenses. Naturally, this `conclusion' is evoked by
confusing the extensional definition and the intensional power of the labels.
But that is the way we---the human beings---like to think. 
Anyway, this underlying message is not necessarily `wrong.' It might be
convenient for those people or companies who only want to use open source
software without being restricted by the obligation to give something
back as it has been introduced by the `copyleft.' De facto,
copyleft is not copyleft. Apart from the definition, its effect
depends on the particuar licenses which determine the conditions for
applying the copyleft `method.' For example, in the GPL, the copyleft effect is
bound to the criteria of `being distributed.' Later on, we will collect these
conditions systematically (see chapter sec:OSUCdeduction, pp.
sec:OSUCdeduction). Therefore, here we still permit ourselves to use a
somewhat `generalizing' mode of speaking. But there might be other people and
companies who emphasize the protecting effect of the copyleft licenses. And,
indeed, at least the open source license Although RMS naturally prefers
to call it a Free Software License (s. p. RmsFsPriority)
 GPL As the original source [cf.][
wp]Gpl20FsfLicense1991a. Inside of the , we constantly refer to the
license versions which are published by the OSI, because we are dealing with
officially approved open source licenses. For the `OSI-GPL' [cf.][
wp]Gpl20OsiLicense1991a has initially been developed to protect the freedom,
to enable the developers to help their neighbours, and to get the
modifications back:
   The history of the GNU project is multiply told. For
  the GNU project and its initiator [cf. pars pro toto][
  passim]Williams2002a. For a broader survey [cf. pars pro toto][
  passim]Moody2001a. A very short version is delivered by Richard M. Stallman
  himself where he states that---in the years when the early free community was
  destroyed---he saw the nondisclosure agreement which must be signed ,
  [] even to get an executable copy as a clear []
  promise not to help your neighbour: A cooperating community was
  forbidden. ([cf.][16]Stallman1999a).
So, Copyleft is defined
as a [] method for making a program free software and requiring
all modified and extended versions of the program to be free software as
well.[cf.][89]Stallman1996c It is a method Based on the
American legal copyright system, this method uses two steps: first one states,
[] that it is copyrighted [] and second one adds those
[] distribution terms, which are a legal instrument that gives
everyone the rights to use, modify, and redistribute the program's code or any
program derived from it but only if the distribution terms are unchanged
([cf.][89]Stallman1996c). by which [] the code and the
freedoms become legally inseparable.[cf.][89]Stallman1996c Because
of these disparate interests of hoping not to be restricted and hoping to be
protected, it could be helpful to find a better label---an impartial name for
the cluster of permissive licenses. But until that time, we should at
least know that this taxonomy still contains an underlying declassing message.
The other misleading interpretation is---counter-intuitively---prompted by using
the concept of `copyleft licenses.' By referring to a cluster of copyleft
licenses as the opposite of the permissive licenses, one implicitly also
sends two messages: First, that republishing one's own modifications is
sufficient to comply with the copyleft licenses. And, second, that the
permissive licenses do not require anything to be done for obtaining the
right to use the software. Even if one does not wish to evoke such an
interpretation, we---the human beings---tend to take the things as simple as
possible. And indeed, in the experience of the authors sometimes
such simplifications gain their independent existence and determine decisions at
the management level. But that is not the fault of the managers. It is their
job to aggregate, generalize and simplify information. It is the job of the
experts to offer better viewpoints without overwhelming the others with
details. But because of several aspects, this understanding of the antinomy of
copyleft licenses and permissive licenses is too misleading for
taking it as a serious generalization:
On the one hand, even the `strongly copylefted' GPL imposes other obligations
in addtion to republishing derivative works. For example, it also requires
giving [] any other recipients of the [GPL licensed] Program a
copy of this License along with the Program.[cf.][wp.
§1]Gpl20OsiLicense1991a Furthermore, the `weakly copylefted' licenses require
also more and different criteria to be fulfilled for acting in accordance with
these licenses. For example, the EUPL requires that the licensor, who does not
directly deliver the binaries together with the sourcecode, must offer a
sourcecode version of his work free of charge, The German version of the
EUPL uses the phrase problemlos und unentgeltlich(sic!) auf den
Quellcode (zugreifen können) ([cf.][3, section 3]EuplLicense2007de)
while the English version contains the specification the Source Code is
easily and freely accessible ([cf.][2, section 3]EuplLicense2007en)
while the MPL requires that under the same circumstances a recipient
[] can obtain a copy of such Source Code Form [] at a
charge no more than the cost of distribution to the recipient
[][cf.][section 3.2.a]Mpl20OsiLicense2013a
And last but not least, also the permissive licenses require tasks 
to be fulfilled for a license compliant usage---moreover, they also require
different things. For example, the BSD license demands that the
(re)distributions [] must (retain [and/or]) reproduce the above copyright
notice []. Because of the structure of the copyright notice,
this compulsory notice implies that the authors / copyright holders of the
software must be publicly named.[cf.][wp]BsdLicense2Clause As
opposed to this, the Apache License requires that if the Work includes
a NOTICE text file as part of its distribution, then any Derivative Works that
You distribute must include a readable copy of the attribution notices contained
within such NOTICE file which often means that you have to present central
parts of such files publicly[cf.][wp. section
4.4]Apl20OsiLicense2004a---parts which can contain much more information than
only the names of the authors or copyright holders.
So, no doubt---and contrary to the intuitive interpretation of this taxonomy---
each open source license must be fulfilled by some actions, even the most
permissive one. And for ascertaining these tasks, one has to look into these
licenses themselves, not the generalized concepts of licenses taxonomies. Hence
again, we have to state that even this well known type of grouping of open
source licenses does not allow to derive a specific license compliant behavior:
The taxonomy might be appropriate, if one wants to live with the implicit
messages and generalizations of some of its concepts. But the taxonomy is not an
adequate tool to determine, what one has to do for fulfilling an open
source license. A license compliant behaviour for obtaining the right to use a
specific piece of open source software must be based on the concrete
open source license by which the licensor has licensed the software.
There is no shortcut.
Nevertheless, human beings need generalizing and structuring viewpoints for
enabling themselves to talk about a domain---even if they finally have to
regard the single objects of the domain for specific purposes. We think that
there is a subtler method to regard and to structure the domain of open
source licenses. So, we want to offer this other possibility to cluster the
open source licenses: even if we also have to concede that,
ultimately, one has to always look into the license itself
We think that, in general, licenses have a common purpose: they should protect
someone or something against something. The structure of this task is based on
the nature of the word `protect' which is a trivalent verb: it links someone or
something who protects, to someone or something who is protected and both
combined to something against which the protector protects and against the other
one is protected. Licenses in general do that. Moreover, to protect
the rights of the licensees is explicitly mentioned in the
GPL-2.0,[cf.][wp. Preamble]Gpl20OsiLicense1991a in the
LGPL-2.1,[cf.][wp. Preamble]Lgpl21OsiLicense1999a and the
GPL-3.0[cf.][wp. Preamble]Gpl30OsiLicense2007a---by which the
LGPL-3.0 inherits this purpose.[cf.][wp.
prefix]Lgpl30OsiLicense2007a Following this viewpoint, we want to generally
assume that open source licenses are designed to protect: They can protect
the user (recipient) of the software, its contributor resp. developer and/or
distributor, and the software itself. And they can protect them against
different threats:
itemize
  First, we assume, that---in the context of open source software---the
  user can be protected against the loss of the right to use it, to modify it,
  and to redistribute it. Additionally, he can be protected against patent
  disputes.
  Second, we assume, that open source contributors and distributors can be
  protected against the loss of feedback in the form of code improvements and
  derivatives, against warranty claims, and against patent disputes.
  Third, we assume, that the open source programs and their specific forms
  ---may they be distributed or not, may they be modified or not, may they be
  distributed as binaries or as sources---can be protected against the
  re-closing resp. against the re-privatization of their further development.
  Fourth, we want to assume that new on-top developments being based on
  open source components can be protected against the privatization for enlarging
  the world of freely usable software. In a more rigid version, this
  capability of a license could also be identified as the power to protect the
  community against a stagnation of the set of open source software---but this
  description is at least a little to long to be used by the following pages
itemize
With respect to these viewpoints, one gets a subtler picture of the license
specific protecting power. Thus, we are going to describe and deduce the
protecting power of each of the open source licenses on the following pages.
Table tab:powerOfLicenses summarizes the results as a quick
reference.  table tab:powerOfLicenses on p.
tab:powerOfLicenses. In February 2014, the Black Duck list of the
Top 20 Open Source Licenses additionally mentions the Artistic License
(AL), the Code Open Project License, the Common Public License, the zlib/png
License, the Academic Free License (AFL), the Microsoft Reciprocal License
(MS-RL) and the Open Software License (OSL) ([cf.][
wp.]wpBlackDuck2014a). The Code Open Project License and Common Public License
are still not OSI approved open source licenses. ([cf.][
wp.]OSI2012b). Thus, finally the OSLiC should additionally analyze not only
the AGPL and the CDDL, but also the AL, the AFL, the MS-RL, the OSL and the
zlib/png License for being able to justiufiably say, that the OSLiC covers the
most important open source licenses.
table
minipage
Open Source Licenses as Protectors
tab:powerOfLicenses
tabularccccccccccccccccc
  2cOpen &
  13care protecting
3-15
  2cSource &
  4c Users &
  3cContributors &
  5cOpen Source Software &
  4*270On-Top Develop.  
  
10-14
  2cLicenses 'indicates that the
  license protects with respect to the meaning of the column, `' indicates
  that the license does not protect with regard to the meaning of the column,
  and `--' indicates, that the corresponding statement must still be evaluated.
  Slanted names of licenses indicate that these licenses are only
  listed in this table while the corresponding mindmap ( p.
  OSCLICMM) does not cover them  &
  4c &
  3c(Distributors) &  
  not &
  4cdistributed as 
  & 
3-911-14
  2c &
  4cwho have already got &
  3cwho spread open & 
  dis- &
  2cunmodified &
  2cmodified 
  & 
  11-14
  2c &
  4csources or binaries &
  3csource software & 
  [t]1cmtributed & 
 270sources  &
 270binaries  &
 270sources  &
 270binaries  
 & 
3-15
  2c &
  13cagainst
3-15
  2c &
  3cthe loss of & 
  3*270Patent Disputes &
  3*270Loss of Feedback & 
  3*270Warranty Claims & 
  3*270Patent Disputes & 
  5c
  & 
  2c &
  3cthe right to &
  & & & &
  5cRe-Closings / Re-Privatization &
  3*270Privatization
   
3-5
  2c & 
  270use it & 
  270modify it & 
  270redistribute it  &
  &  &  &  &
  5cof already opened software
  & 
  Apache & 2.0 & & & &
  &  & & &  &
   &  & &  &  
  2*BSD & 3-Cl & & & & 
     &  & &   &
     & &  & &  &  
2-15
   & 2-Cl & & & & 
     &  & &   &
     & &  & &  &  
  MIT &   & & & &
   &  & &  &  &
   &  & &  &  
  MS-PL &   & & & &
  &  & & &  &
   &  & &  &  
  PostgreSQL &   & & & &
   &  & &  &  &
   &  & &  &  
  PHP & 3.0 & & & &
   &  & &  &  &
   &  & &  &  
  CDDL & 1.0 & & & &
  -- & -- & -- & -- & -- & -- & -- & -- & -- & -- 
  EPL & 1.0 & & & &
  & & & &  &
   & & & &  
  EUPL & 1.1 & & & &
  & & & &  &
   & & & &  
  2*LGPL & 2.1 & & & &
    & & &  &  &
   & & & &  
2-15
   & 3.0 & & & &
   & & & &  &
   & & & &  
  3*MPL & 1.0 & --  & --  & --  &
   -- & --  & -- & -- & -- &
   --  & -- & -- & -- & -- 
2-15
   & 1.1 & --  & --  & --  &
   -- & --  & -- & -- & -- &
   --  & -- & -- & -- & -- 
2-15
   & 2.0 & & & &
  & & & &  &
   & & & &  
  MS-RL &   & & & &
  -- & -- & -- & -- & -- & -- & -- & -- & -- & -- 
  AGPL & 3.0 & & & &
   & & & & &
   & & & & 
  2*GPL & 2.1 & & & &
    & & &  &  &
   & & & & 
2-15
  & 3.0 & & & &
   & & & &  &
   & & & & 
tabular
minipage
table
The protecting power of theThe GNU Affero General Public License (AGPL)
AGPL
[TODO...]
The protecting power of theThe Apache License
(Apache-2.0)
APL
As an approved open source license,[cf.][wp]OSI2012b
the Apache License
   The Apache License, version 2.0 is maintained by the
  Apache Software Foundation ([cf.][wp]AsfApacheLicense20a).  Of
  course, the OSI is hosting a duplicate of the Apache license
  ([cf.][wp]Apl20OsiLicense2004a) and is listing it as an
  officially approved open source license ([cf.][wp]OSI2012b). The
  Apache license 1.1 is classified by the OSI as superseded
  license([cf.][wp]OSI2013b). In the same spirit, the Apache
  Software Foundation itself classifies the releases 1.0 and 1.1 as
  historic ([cf.][wp]AsfLicenses2013a). Thus, the 
  only focuses on the most recent license Apache-2.0 version. For those who have
  to fulfill these earlier Apache licenses it could be helpful to read them as siblings of
  the BSD-2-Clause and BSD-3-Clause licenses.
protects the user against the loss of the
right to use, to modify and/or to distribute the received copy of the source
code or the binaries.[cf.][wp. §2]Apl20OsiLicense2004a
Furthermore, based on its patent clause,   pp.
APL the Apache-2.0 protects the users against patent
disputes.[cf.][wp. §3]Apl20OsiLicense2004a Because of this
patent clause and the disclaimer of warranty together with the
limitation of liability, the Apache license also protects the
contributors and distributors against patent disputes and warranty
claims.[cf.][wp. §3, §7, §8]Apl20OsiLicense2004a Finally, the
Apache-2.0 protects the distributed sources themselves against a change of the
license which would convert the work to closed software, because,
first, one [] must give any other recipients of the Work or
Derivative Works a copy of (the Apache) license, second, in the Source
form of any Derivative Works that (one) distributes, one has []
to retain [] all copyright, patent, trademark, and attribution notices
[], and third, one must [] include a readable copy [
of the] NOTICE file being supplied by the original package one has
received.[cf.][wp. §4]Apl20OsiLicense2004a
But the Apache License does not protect the contributors against the loss of
feedback because it does not `copyleft' the software: the Apache license does
not contain any sentence requiring that one has also to publish the source code.
In the same spirit, the Apache-2.0 does not protect the undistributed software or the
distributed binaries against re-closing (neither in unmodified nor in
modified form) because the Apache License allows to (re)distribute the
binaries without also supplying the sources---even if the binaries rest upon
sources modified by the distributor. Finally, the Apache-2.0 does not protect the
on-top developments against privatization.
The protecting power of theThe BSD licenses
BSD2
BSD3
As approved open source licenses,[cf.][wp]OSI2012b the
BSD Licenses
   BSD has to be resolved as Berkely Software Distribution. 
  For details of the BSD license release and namings
  [cf.][wp. editorial]BsdLicense3Clause 
protect the user against
the loss of the right to use, to modify and/or to distribute the received copy
of the source code or the binaries.[cf.][wp. §1ff]OSI2012a
Additionally, they protect the contributors and/or distributors against warranty
claims of the software users, because these licenses contain a `No Warranty
Clause.'[one for all version cf.][wp]BsdLicense2Clause And
finally they protect the distributed sources against a change of the license
which closes the sources, because each modification and redistributions
of [the] source code must retain the [] copyright notice, this list of
conditions and the [] disclaimer:[cf.][
wp]BsdLicense2Clause Therefore it is incorrect to distribute BSD licensed
code under another license---regardless of whether it closes the sources or
not.
   In common sense based discussions you may have heard that BSD
  licenses allow to republish the work under another, an own license. Taking the
  words of the BSD License seriously that is not valid under all circumstances:
  Yes, it is true, you are not required to redistribute the sourcecode of a
  modified (derivative) work. You are allowed to modify a received version and to
  distribute the results only as binary code and to keep your improvements closed.
  But if you distribute the source code of your modifications, you have retain the
  licensing, because Redistribution [] in source [], with or
  without modification, are permitted provided that [] (the) redistributions
  of source code [] retain the above copyright notice, this list of
  conditions and the following disclaimer ([cf.][
  wp]BsdLicense2Clause)
But the BSD Licenses protect neither the users nor the contributors
and/or distributors against patent disputes (because they do not contain any
patent clause). They do not protect the contributors against the loss of
feedback (because they do not `copyleft' the software). Moreover, they do not
protect the undistributed software or the distributed binaries against
re-closing---neither in unmodified nor in modified form---because they
allow to redistribute only the binaries without also supplying the source
code. see both, the BSD-2-Clause License ([cf.][
wp]BsdLicense2Clause), and the BSD-3Clause License ([cf.][
wp]BsdLicense3Clause) Finally, the BSD licenses do not protect the on-top
developments against privatization.
The protecting power of theThe CDDL [tbd]
CDDL
As an approved open source license,[cf.][wp]OSI2012b
the Common Develop and Distribution License protects the user
against the loss of the right to use, to modify and/or to distribute the
received copy of the source code or the binaries[cf.][wp. 
§?]Cddl10OsiLicense2004a
[]
The protecting power of theThe Eclipse Public License (EPL)
EPL
As an approved open source license,[cf.][wp]OSI2012b
the Eclipse Public License
   The Eclipse Public License, version 1.0 is maintained by the Eclipse
  Software Foundation ([cf.][wp]Epl10EclipseFoundation2005a).
  Of course, also the OSI is hosting a duplicate ([cf.][
  wp]Epl10OsiLicense2005a). 
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries§2a. 
Furthermore, based on its patent clause,   
pp. EPL the EPL protects the users also against
patent disputes.§2b  §2c Besides this patent clause, the EPL contains the
sections no warranty and disclaimer of
liability.§5  §6 These three elements together protect the
contributors/distributors against patents disputes and warranty
claims. Finally, the EPL protects the distributed sources themselves
against a change of the license which would reset the work
as closed software: First, the Eclipse Public Licenses requires that 
if a work---released under the EPL---[] is made available in
source code form [] (then) it must be made available under this (EPL)
agreement, too while this act of `making avalaible' must incorporate
a copy of the EPL into each copy of the [distributed]
program or program package.§3 But in opposite to the permissive
licenses, the EPL does not only protect the distributed source code---regardless
whether it is modified or not. The EPL also protects the distributed modified or
unmodified binaries: The EPL allows each modifying contributor and
distributor [] to distribute the Program in object code form
under (one's) own license agreement [] provided this license clearly
states that the source code for the Program is available and where the
licensees can [] obtain it in a reasonable manner on or
through a medium customarily used for software exchange.§3, esp. §3.b.iv
Thus, one has to conclude that the EPL is a copyleft license.
But the Eclipse Public License is not a license with strong copyleft; the EPL
uses `only' a weak copyleft effect:
   Even if one can find contrary specifications in the
  internet. [Pars pro toto cf.][wp]ifross2011a: This page is
  listing the EPL in the section Other Licenses with strong Copyleft
  Effect
Indeed, the EPL says that for each EPL
licensed program---distributed in object form---a place must be made
known where one can get the corresponding source code.§3, esp. §3.b.iv
The term `Program' is defined as any Contribution distributed in
accordance with [] (the EPL) while the term `Contribution'
refers---besides other elements---to changes to the Program, and
additions to the Program.§1 Unfortunately, this is a circular definition:
`Program' is defined by `Contribution'; and `Contribution' is defined by
`Program.' Nevertheless, one has to read the license benevolently.
Uncontroversial should be this: If one distributes any modified EPL licensed
program, library, module, or plugin, then one has to publish the modified source
code, too. If one adds some own plugins or additional libraries which
are used by an EPL licensed program (which on behalf of this use must have been
modified by adding [sic!] procedure calls) then one has to publish the code of
both parts: that of the program and that of the added elements. In this sense,
the EPL clearly protects the binaries against re-closings like other weak
copyleft using licenses. But if one distributes only an EPL licensed library
which is used as a component by another not EPL licensed on-top program, then
this library does not depend on the top development---provided that the library
itself does not call any (program) functions or procedures delivered by the
overarching on-top development. Hence, nothing is added to the library; and
hence, no other code than that of the library must be published. Therefore, the
EPL does not use the strong copyleft effect in the meaning of---for example --
the GPL.
 
The protecting power of theThe European Union Public License (EUPL)
EUPL
As an approved open source license,[cf.][wp]OSI2012b
the European Union Public License
   The European Union Public License, version 1.1 is maintained by the
  European Union and hosted under the label Joinup 
  ([cf.][wp]EuplLicense2007en).  This EUPL has officially been
  translated into many languages, among others into German 
  ([cf.][wp]EuplLicense2007de). Because of this multi lingual
  instances, the OSI does not offer its own version, but just a landing page
  linked to the lading page of the European host Joinup 
  ([cf.][wp]Eupl11OsiLicense2007a). 
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries.§2
Furthermore, based on its patent clause  
pp. EUPL, the EUPL protects the users against
patent disputes.§2, at its end Besides this patent clause, the EUPL
additionally contains a Disclaimer of Warranty and a
Disclaimer of Liability.§7  §8 These three elements
together protect the contributors/distributors against patents disputes and
warranty claims. Finally, the EUPL also protects the distributed sources against
a re-closing/re-privatization and the contributors against the loss of
feedback. This protection is based on two steps: First, the European Public
License contains a particular paragraph titled Copyleft clause which
stipulates that copies of the Original Work or Derivative Works based
upon the Original Work must be distributed under the terms of (the
European Union Public) License.§5 Second, the EUPL requires that
each licensee---as long as he [] continues to distribute and/or
communicate the Work---has also to [] provide [] the
Source Code, either directly or by [] (indicating) 
a repository where this Source will be easily and freely available
[]§5 This condition seems to be so important for the EUPL that
the license repeats its message: in another paragraph the EUPL requires again
that if the Work is provided as Executable Code, the Licensor provides
in addition a machine-readable copy of the Source Code of the Work along with
each copy of the Work [] or indicates, in a notice [], a repository
where the Source Code is easily and freely accessible for as long as the
Licensor continues to distribute [] the Work.§3 Based on 
the meaning of Work which is defined by the EUPL as the
Original Work and/or its Derivative Works§1 it must be concluded
that the EUPL is a copyleft license. 
But nevertheless, the European Union Public License is not a license with strong
copyleft: On the one hand, if one takes the core of the EUPL then the license
seems to protect not only the modifications of the original work against
re-closings and (re-)privatization, but also the on-top developments because
normally you have to publish the source code in both cases. Understood in this
way, the EUPL would be a `strong copyleft license.' But on the other hand, the
EUPL additionally contains a Compatibility clause stating that
if the Licensee Distributes [] Derivative Works or copies thereof
based upon both the Original Work and another work licensed under a Compatible
Licence, this Distribution [] can be done under the terms of this
Compatible Licence§5---while the term Compatible Licence
is explicitly defined by a list of compatible licenses, for example the Eclipse
Public License.Appendix. Based on this compatibility clause the
obligation to publish the code of an on-top development can be subverted: As
first step, you could release a little, more or less futile on-top application
licensed under the Eclipse Public License
   Taking the license text very seriously, it is not even necessary
  that this little futile application must depend on the EUPL library by calling
  functions of EUPL library. The license text only says that another
  [any other] work licensed under a Compatible Licence can be distributed
  together with derivative works. By this wording, the license itself
  is establishing a contrast between the derivative work and the other
  work---what indicates that the other work has not necessarily also to be a
  derivative work. 
which uses a library licensed under the EUPL. As second step, you add this `EUPL
library' which you now may also distribute under the EPL instead of retaining
the EUPL licensing. So, finally you obtain the same work under the Eclipse
Public License which is a weak copyleft license  ,
p. EPL. Hence the protection of the EUPL-1.1 is
not as comprehensive as one might assume on the basis of the license text
itself,
   This kind of specifiying the protective power of the EUPL is
  initially presented by the FSF ([cf.][wp. section `European Union
  Public License']FsfLicenseList2013a). The EU answers that publishing such a
  trick will comprise its user in the eyes of the open source community
  ([cf.][wp]FsfEuplRecomment2013). That is undoubtely true. But
  unfortunately, this argument does not close the hole in the protecting shield
  put up by the EUPL.
it can at most be a weak copyleft license---even if the reader might get the
impression that the authors of the EUPL wished to write a strong copyleft
license. Howsoever, the EUPL license does not protect the on-top developments
against a privatization. 
The protecting power of theThe GNU General Public License (GPL)
GPL
The GNU General Public License---also known as GPL---is maintained and offered
by the Free Software Foundation and hosted as part of the well known
GNU operating system homepage.[cf.][
wp]FsfGnuOsLicenses2011a Currently, there are two versions of the GPL which
are classified as OSI approved open source licenses[cf.][
wp]OSI2012b, the GPL-2.0
   For the original version, offered by the FSF 
  [cf.][wp]Gpl20FsfLicense1991a. For the version, offered by the 
  OSI [cf.][wp]Gpl20OsiLicense1991a.
and the GPL-3.0.
   For the original version, offered by the FSF 
  [cf.][wp]Gpl30FsfLicense2007a. For the version, offered by the
  OSI [cf.][wp]Gpl30OsiLicense2007a.
Although both versions of the GPL aim for the same results and the same spirit,
they differ with respect to textual and arguing structure. Therefore, it is
helpful to treat these two licenses separately.  
GPL-2.0
GPL2
The protecting power of the GPL-2.0 can easily be determined: First, the license
allows the users of a received software to copy and distribute
unmodified copies of the [] source code§1 as well
as to [] modify [] copies [] or any portion of it,
[] and (to) distribute such modifications []§2---
not only in the form of source code, but also in the form of
binaries.§3 Thus---and in accordance of being an approved
open source license[cf.][wp]OSI2012b---the GPL-2.0
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries. Second, it
protects the contributors against warranty claims§11, §12
and---based on its copyleft effect§3---also against the
loss of feedback. Third, the GPL-2.0 protects the source code itself in a nearly
complete mode against privatization: even if one initially distributes only the
binary version of a modification which one has generated (as a work
based on the original) by copying any portion of the original work
into this new derivative work,§2 then one has nevertheless to offer
a possibility to get the source code§4---namely for the
modified work as whole.§3 This modified work based on the
[original] Program has to be read in a very broad sense; it []
means either the Program or any derivative work under copyright law: that is to
say, a work containing the Program or a portion of it, either verbatim or with
modifications and/or translated into another language.§0 Hence, in
the context of software distribution, the GPL-2.0 does not only protect the
software against re-privatization, but also possible on-top developments against
privatization. 
But the GPL-2.0 does not protect against patent disputes 
, p. GPL2---neither the users, nor the
contributors or distributors---and it does not protect the (modified) software
which is not distributed against (re-)privatization.
   This is a `lack' in the GPL which the AGPL wants to close: you are
  indeed allowed to modify and install a GPL-2.0 licensed server software on
  your own machine for offering a service based on this modified software
  without being obliged to give your improvements back to the
  community. But---at least in Germany---this viewpoint seems to have to respect
  rigorous limits. Sometimes, it is said that even distributing software over
  the parts of a holding is already a distribution which---in the case of 
  GPL-2.0 licensed software---would evoke the obligation to distribute the
  source code, too. [IMPORTANT: citation still needed!]
GPL-3.0
GPL3
An important modification of the GPL-3.0 is evoked by the use of the new wording
to propagate or to convey a covered work: On the
one hand a covered work denotes either the unmodified Program
or a work based on the Program. This work based on the Program is
defined as a modified version of an earlier instance of the
program which has been derived from this earlier instance by (copying
it) from or (adapting) all or part of it in way other than exactly copying the
earlier instance.§0 On the other hand, to propagate a
work denotes copying, distribution (with or without modification),
making available to the public and any other kind of treating the work
[] except executing it on a computer or modifying a private
copy.
   [cf.][wp. §0]Gpl30OsiLicense2007a. The GPL 3.0 wants
  to cover the copyright systems of all countries of the world without dealing
  with their particular constraints directly. Therefore it generally states,
  that the meaning of the phrase to propagate a work---in the spirit
  of the FSF---is whatever the specific copyright system wants to be covered by
  these words, [] except executing it on a computer or modifying
  a private copy.
Third, the GPL 3.0 specifies that to convey a work []
means any kind of propagation that enables other parties to make or receive
copies.§0 This specification shall later on help to clarify that
it is an act of distribution if the recipient himself actively copies or fetches
a program. 
Referring to this new wording, the GPL-3.0 allows as a basic
permission to [] make, run and propagate covered works
[] without conditions so long as your license otherwise remains in
force.§2 This might be read as anything is allowed without
any restrictions---provided there does not exist any rule which must be
respected. Based on these specifications, the use and the modification of a
GPL-3.0 program only for yourself is not restricted.
   In general, you have to infer that you do not have to fulfill any
  tasks if you are using a piece of open source software only for
  yourself---namely based of the fact that the particular license rules focus 
  only on the distribution of the software, not on the private use. But in the
  GPL-3.0, this assertion concerning the private use becomes more explicit: It is
  one of your basic permissions to [] make, run and
  propagate covered works that you do not convey, without conditions so long as
  your license otherwise remains in force. And to propagate a work
  refers to anything [] except executing it on a computer or
  modifying a private copy 
  ([cf.][wp. §2 and §0]Gpl30OsiLicense2007a). 
  Thus, the GPL-3.0 supports your total freedom on your own machine: Do whatever
  you want to do; anything goes---as long as you do not hand the result over to
  any third party in any sense.  
So, in general---like all the other open source licenses and in accordance to
the OSD[cf.][wp]OSI2012a---also the GPL protects the user
against the loss of the right to use, to modify and/or to distribute the
received copy of the source code or the binaries.§3, §4, §5, and §6 
Furthermore, based on its patent clauses, the GPL-3.0 protects the users and the
contributors of a software against patent disputes.
    , p. GPL3
Additionally, the GPL-3.0 tries to protect the contributors or distributors
against warranty claims by its well known Disclaimer of
Warranty§15 and Limitation of
Liability§16 which must explicitly made been known at least in  
each case of source code distribution.§4 Finally, the most forceful
protection of the GPL-3.0 concerns the protection against the loss of feedback
and against the privatization: Whenever you distribute a GPL-3.0 licensed
program in the form of binaries, you have to make the source accessible,
too.§6 Moreover, this obligation concerns every covered 
work, hence not only the unmodified original, but also any modification or
adaption derived by any other kind of copying parts of the original into the
resulting work:§0 You may convey a covered
work in object code form under the terms of sections 4 and 5, provided that you
also convey the machine-readable Corresponding Source under the terms of this
License.§6 So, no doubt: the GPL wants also the source code of
all on-top developments to be published, not only the modified programs and
libraries used as base of these on-top developments. The single mode of use, the
GPL does not protect against privatization, is the mode of using the software
only for yourself.
   Quite the contrary: The GPL-3.0 explicitly allows to
  delegate the modification to third parties and allows to distribute the source
  code as working base [] to others for the sole purpose of having
  them make modifications exclusively for you [] 
  ([cf.][wp. §2]Gpl30OsiLicense2007a).
The protecting power of theThe GNU Lesser General Public License (LGPL)
LGPL
The LGPL is maintained and offered by the Free Software Foundation and hosted as
part of the well known GNU operating system
homepage.[cf.][wp]FsfGnuOsLicenses2011a The meaning of the
name LGPL was changed in the course of time. First, in 1991, it should be
resolved as GNU Library General Public License and should denote the
first released version of the library GPL which was []
numbered 2 because it goes with version 2 of the ordinary GPL. Today, this
license is marked as superseded by the GNU Lesser General Public
License[cf.][wp]Lgpl20FsfLicense1991a. This newer
LGPL version from 1999 was released as the successor of the GNU
Library Public License, version 2, hence [as] the version
number 2.1.[cf.][wp]Lgpl21FsfLicense1999a Finally, in June
2007, the---for now---last version of the LGPL was released---namely with a
new structure: While GPL-2.0 and LGPL-2.1 are similar, but independent licenses,
the LGPL-3.0 has to be read as an addendum to GPL-3.0. At the beginning of the
LGPL-3.0 license, the content of the corresponding GPL-3.0 was included into
the LGPL by the sentence that this version of the GNU Lesser General
Public License incorporates the terms and conditions of version 3 of the GNU
General Public License, supplemented by the additional permissions listed
below.[cf.][wp]Lgpl30FsfLicense2007a Based on these
differences, it seems to be suitable to treat the different LGPLs separately.
LGPL-2.1
LGPL2
Like the other versions of the GPL or LGPL, the LGPL-2.1 also explicitly
describes its purpose as the task to protect the rights of
the software users: it states that generally all [] the GNU
General Public Licenses are intended to guarantee your freedom to share and
change free software []Preamble Of course, the LGPL-2.1 is
an approved open source license[cf.][wp]OSI2012b which
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries.§1, §2, §4 
But the LGPL-2.1 does not offer any sentences to infer that it grants any patent
rights to the software user.  ,
p. LGPL2 So, it does not protect anyone against
patent disputes, neither the users, nor the
contributors/distributors. Instead of this, the LGPL-2.1 contains a special 
section No Warranty offering two paragraphs which together establish
the protection of the contributors and distributors against warranty
claims.§15, §16 Finally, the LGPL-2.1 also protects the
distributed sources against a re-closing/re-privatization and the
contributors against the loss of feedback. For that purpose, the LGPL-2.1 on the
one hand states that the recipient [] may modify (his) copy or
copies of the Library or any portion of it [] and copy and distribute such
modifications [] provided that the results of these modifications are
[] licensed at no charge to all third parties under the terms of
(the LGPL-2.1).§2 On the other hand, this LGPL version allows to
distribute such modifications in object code or executable form
provided that one accompanies these entities [] with the complete
corresponding machine-readable source code which itself must be distributed
under the terms of the LGPL-2.1.§4
But contrary to the GPL, the LGPL does not require to publish the code of an
overarching program or any on-top development: It distinguishes the
work that uses the Library from the work based
on the Library: First, it defines the Library as any
software library or work licensed under the LGPL-2.1 and adds that
a `work based on the Library' means either the Library or any
derivative work under copyright law.§0, emphasis ours 
Second, it defines the work that uses the Library as any
[] program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or linked
with it whereas this work that uses the Library---taken
in isolation---clearly [] is not a derivative work of
the Library []
   [cf.][wp. §5, emphasis ours]Lgpl21OsiLicense1999a. To
  be exact: the LGPL states also, that this work can nevertheless become a
  derivative work under the particular circumstances of being linked to the
  library. But even then, the LGPL allows to treat this `derivative work' as a
  work which is not a derivative work, provided one fulfills some additional
  conditions. With respect to this viewpoint, the hint of the LGPL that the
  non-derivative work becomes a derivate work by linking it, seems not to be as
  crucial as one might expect.
Third---and explictily as an exception to the Sections above---the
LGPL-2.1 allows to [] combine or link a work that uses
the Library with the Library to produce a work containing portions of the
Library, and distribute that work under terms of (one's own) choice provided
one (accompanies) the work with the complete corresponding
machine-readable source code for the Library. Together, these three
specifications clearly require that one must publish/distribute the source
code of the library itself---regardless, whether it is modified or not, and
regardless, whether one distributes the code directly or makes `only' written
offer for receiving the source code of the library separately.§6
But these  specifications do not require that one also must publish/distribute
the source code of the work that uses the library or---as the  is
using to say---the the on-top developments.
Thus---no surprise---it has to be inferred that the LGPL does not protect the
on-top developments against a privatization. And of course, that is the reason why
it is called the GNU Lesser General Public License.
LGPL-3.0
LGPL3
The LGPL-3.0 wants to be read as an extension of the GPL-3.0. For that purpose,
it explicitly [] incorporates the terms and conditions of
version 3 of the GNU General Public License, supplemented by (some) additional 
permissions []just before §0 Thus, the LGPL-3.0 inherits
the most parts of the protecting power of the GPL-3.0---except those parts which
deal with the overarching on-top development: In opposite of the GPL-3.0, the
LGPL allows to embed LGPL-3.0 licensed libraries into libraries of higher
complexity§3, into on-top applications§4
and into sets of reorganized library systems.§5 Moreover, the
LGPL-3.0 allows to convey these overarching units under terms
of (one's own) choice.§4  Therefore, one is not necessarily obliged to
publish the source code of these on-top developments, too
   To be exact:  The LGPL-3.0 wants to assure that combined
  works can be re-combined on the base of newer versions of the embedded
  library. For that purpose, one has either to use a suitable shared
  libary mechanism which allows to replace the embedded library without
  relinking the larger unit, or one has to publish at least the minimal
  corresponding source [code] and a set of binaries by which the user himself
  can relink the overarching unit on the base of a newer version ob the embedded
  library ([cf.][wp. §4]Lgpl30FsfLicense2007a)
---but, of course,  one is obliged to publish the source code of the (modified)
embedded libraries themselves. 
Based on the already described protecting power of the GPL-3.0
  , p. GPL3  
and on these additional specifications of the LGPL-3.0, one can summarize the
protecting power of the LGPL-3.0 this way:
First, the LGPL protects the users against the loss of the right to use, to
modify and/or to distribute the received software. Additionally, it protects
them against patent disputes. Second, it protects the contributors and
distributors against the loss of feedback, against warranty claims and against
patent disputes. Finally, it protects the distributed software itself against
re-privatization.
But the LGPL-3.0 does not protect the undistributed source code and does not
protect the on-top developments against privatization.
The protecting power of theThe MIT license
MIT
As an approved open source license,[cf.][wp]OSI2012b
the MIT License
   `MIT' has to be resolved as Massachusetts
  Institute of Technology ([cf.][wp]wpMitLic2011a). 
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the binaries.
[cf.][wp 1ff]OSI2012a 
Additionally, it protects the contributors and/or distributors
against warranty claims of the software users, because it contains a `No
Warranty Clause.'[cf.][wp]MitLicense2012a And finally it
protects the distributed sources against a change of the license which would
close the sources, because the permission [] to use, copy,
modify, [] distribute, [] (is granted) subject to the []
conditions, [that] the [] copyright notice and this permission notice
shall be included in all copies or substantial portions of the
Software.
   [cf.][wp]MitLicense2012a. The argumentation
  why the source code is protected, but not the binary form follows that of the 
  BSD licenses: By these requirements, one is not obliged to redistribute the
  sourcecode of a modified (derivative) work. One is allowed to modify a received
  version and to distribute the results only in binary form and to keep one's
  improvements closed. But if one distribute the source code of the modifications,
  the licensing is retained, simply because the MIT [] permission
  note shall be included in all copies or substantial portions of the software.
But the MIT License does not protect the users or the contributors and/or
distributors against patent disputes (because it does not contain any patent
clause). Additionally, it does not protect the contributors against the loss of
feedback (because it does not `copyleft' the software). Moreover, the MIT
license does not protect the undistributed software or the distributed binaries
against re-closings---neither in unmodified nor in modified form---because it
allows to redistribute only the binaries without also supplying the source
code.[cf.][wp]MitLicense2012a Finally, the MIT license does
not protect the on-top developments against a privatization.
The protecting power of theThe Mozilla Public License (MPL)
MPL
 
As an approved open source license,[cf.][wp]OSI2012b
the Mozilla Public License
   In 2012, the Mozilla Public License 2.0 
  ([cf.][wp]Mpl20MozFoundation2012a) has been released as a
  result of a longer Revision Process([cf.][
  wp]Mpl11To20MozFoundation2013a) by which the  Mozilla Public License 1.1 
  ([cf.][wp]Mpl11MozFoundation2013a) has been ousted. The OSI is 
  also hosting its version of the MPL-2.0 ([cf.][
  wp]Mpl20OsiLicense2013a) and is listing it as an OSI approved license 
  ([cf.][wp]OSI2012b) while it classifies the MPL-1.1 as a
  superseded license([cf.][wp]OSI2013b). The Mozilla
  Foundation itself says concerning the difference between the two licenses that 
  the most important part of the license---the file-level copyleft---is
  essentially the same in MPL 2.0 and MPL 1.1 ([cf.][
  wp]Mpl11To20MozFoundation2013a). By reading the MPL-1.1, one could get the
  impression that fulfilling all conditions of the MPL-2.0 would imply also to act
  in accordance to the MPL-1.1. Thus the  focuses on the MPL-2.0, at least
  for the moment. Nevertheless, in this section we want to use the general label
  `MPL' without any release number for indicating that with respect to its
  protecting power the MPL-2.0 and the MPL-1.1 can be taken as equipollent.
protects the user against the loss of the right to use, to modify and/or to
distribute the received copy of the source code or the
binaries.§2.1.a  Furthermore, based on its split and distributed patent
clause,   pp. MPL the
MPL protects the users against patent disputes.§2.1.b, §2.3, §5.2
Besides this patent sections, the MPL additionally contains a
Disclaimer of Warranty and a Limitation of
Liability.§6  §7 These three elements together protect the
contributors/distributors against patents disputes and warranty claims.
Finally, the MPL also protects the distributed sources against a
re-closing/re-privatization and the contributors against the loss of
feedback: The MPL clearly says that, on the one hand, all distribution
of Covered Software in Source Code Form, including any Modifications []
must be under the terms of this License§3.1 and that, on the other
hand, MPL licensed software [] (distributed) in Executable
Form [] must also be made available in Source Code Form
[]§3.2 So, it must be inferred that the MPL is a copyleft
license. 
But nevertheless, the Mozilla Public License is not a license with strong
copyleft. It does not protect on-top developments against privatization: First,
the MPL does not use the term derivative work.
   [cf.][wp]Mpl20OsiLicense2013a. The MPL-1.1 uses the
  term derivative work only in the context of writing new
  versions of the license, not in the context of licensing software
  ([cf.][wp. §6.3]Mpl11MozFoundation2013a).
Instead of this, the MPL denotes the
[] (initial) Source Code Form [] and Modifications of such
Source Code Form by the label Covered Software§1.4---while
the term Modifications refers to any file in Source Code Form
that results from an addition to, deletion from, or modification of the contents
of Covered Software or any file in Source Code Form that results from an
addition to, deletion from, or modification of the contents of Covered
Software.
   [cf.][wp. §1.10]Mpl20OsiLicense2013a. The Mozilla
  Foundation denotes this reading by the term file-level copyleft
  ([cf.][wp]Mpl11To20MozFoundation2013a).
Second, the MPL contrasts the source code
form and its modifications with the Larger Work by specifying that the
larger work is [] material, in a seperate file or files, that is
not covered software.§1.7
Finally, the MPL states, that you may create and distribute a Larger
Work under terms of Your choice, provided that You also comply with the
requirements of this License for the Covered Software.§3.3 Based on
these specifications, one has to reason that an on-top development which depends
on MPL licensed libraries by calling some of their functions, is undoubtably a
derivative work,
   This follows from the general meaning of a derivative work as
  a benevolent software developer would read this term ( , pp.
  sec:BenevolentDerivativeWorkUnderstanding). But again: The MPL does
  not focus on this general aspect; it uses its own concept of a larger
  work.
but also only a larger work in the meaning of the MPL so that code of
this on-top application needs not to be published---provided, that the library
and the on-top development are distributed as different files.
   It might be discussed whether integrating a declaration of a
  function, class, or method into the on-top development by including the
  corresponding header files indeed means that one is including
  portions (of the Source Code Form) into a file which therefore has to be
  taken as Modification ([cf.][
  wp. §1.4]Mpl11MozFoundation2013a). From the viewpoint of a benevolent
  developer it should be difficult to argue that the including of declaring
  (header) files alone can evoke a derivative work. It is the call of the
  function in one's code which establishes the dependency. But that is not the 
  point, the MPL focuses. The MPL aims on the textual reuse of (defining) code
  snippets. Hence, one could ignore the textual integration of parts of the
  declaring header files: it should not trigger that one's own work becomes a
  modification in the eyes of the Mozilla Findation. But of course, one would
  circumvent the idea of the MPL if one hides defining code in header files and
  reuses that code by one's own compilation. This would undoubtably be an
  incorporation of portions and therefore would make the incorporating file
  becoming a modification of the MPL licensed initial work. 
Hence, the MPL is license with a weak copyleft effect and does not protect the
on-top developments against privatization.
The protecting power of theThe Microsoft Public License (MS-PL)
MSPL
As an approved open source license,[cf.][wp]OSI2012b
the Microsoft Public License protects the user against the loss of the right to
use, to modify and/or to distribute the received copy of the source code or the
binaries.§2 Furthermore, based on its patent
clause,   pp. MSPL the
MS-PL protects the users against patent disputes.§2.B and §3.B
Because of this patent clause and of its 
concise disclaimer of warranty, the MS-PL also protects the
contributors/distributors against patents disputes and warranty 
claims.§2B, §3B, §3D
Finally, the Microsoft Public License protects the distributed sources
themselves---and even portions of these sources---against a
change of the license which would reset the work as closed
software, because first, one [] must retain all copyright,
patent, trademark, and attribution notices that are part of the
software,§3C and because, second, one must also incorporate
a complete copy of this license into one's own distribution premised
one distributes the source code.§3D
But the Microsoft Public License does not protect the contributors against the
loss of feedback because it does not `copyleft' the software: The license does
not contain any sentence which requires that one has to publish the sources,
too.
   There seems to be some misunderstandings on the internet: The
  English wikipedia specifies the MS-PL as a permissive license and the MS-RL as
  a license with copyleft effect ([cf.][wp]wpMsSharedSources2013a).
  The German wikipedia says that the MS-PL is a license with a schwachen
  [weak] copyleft ([cf.][wp]wpMspl2013a). And it says also that
  the Microsoft Reciprocal License (MS-RL) is a license with weak
  copyleft, too ([cf.][wp]wpMsrl2013a). But for the very
  thoroughly working ifross license center, the MS-RL is a license
  with restricted (weak) copyleft, while the MS-PL is a permissive license with
  some selectable options ([cf.][wp]ifross2011a). Based on the
  license text itself and these other readings, we decided to take the MS-PL as
  a permissive license in accordance to the English wikipedia page and the
  ifross page.
In the same spirit, the MS-PL does not protect the undistributed
software or the distributed binaries against re-closings---neither in
unmodified nor in modified form---because the MS-PL License allows to
(re)distribute the binaries without also supplying the sources---even if the
binaries rest upon sources modified by the distributor. Finally, also the MS-PL
does not protect the on-top developments against a privatization.
The protecting power of theThe Postgres License
(PostgreSQL)
PGL
As an approved open source license,[cf.][wp]OSI2012b
the PostgreSQL License protects the user against the loss of the right to use,
to modify and/or to distribute the received copy of the source code or the
binaries.
Because of its disclaimer of warranty, the PostgreSQL also protects the
contributors/distributors against warranty claims. Finally, the
PostgreSQL protects the distributed sources themselves against a change of the
license which would reset the work as closed software, because the
copyright notice and the whole license must [] appear
in all copies.
But the PostgreSQL License does not protect the contributors against the loss of
feedback because it does not `copyleft' the software: The license does not
contain any sentence which requires that one has to publish the sources, too. 
In the same spirit, the PostgreSQL does not protect the undistributed software or the
distributed binaries against re-closings---neither in unmodified nor in
modified form---because the PostgreSQL allows to (re)distribute the binaries without
also supplying the sources---even if the binaries rest upon sources modified by
the distributor. Finally, the PostgreSQL does not protect the on-top developments
against a privatization.
The protecting power of theThe PHP License
PHP
As an approved open source license,[cf.][wp]OSI2012b
the PHP-3.0 License protects the user against the loss of the right to use, to
modify and/or to distribute the received copy of the source code or the
binaries. Because of its disclaimer of warranty, the PHP
license also protects the contributors/distributors against warranty
claims.  Finally, the PHP license protects the distributed
sources themselves against a change of the license which would
reset the work as closed software, because
redistributions of source code must retain the [] copyright
notice, this list of conditions and the [] disclaimer.
But the PHP-3.0 License does not protect the contributors against the loss of
feedback because it does not `copyleft' the software: The license does not
contain any sentence which requires that one has to publish the sources, too. 
In the same spirit, the PHP license does not protect the undistributed software
or the distributed binaries against re-closings---neither in unmodified nor in
modified form---because the PHP license allows to (re)distribute the binaries
without also supplying the sources---even if the binaries rest upon sources
modified by the distributor.
  
Summary
All these specifications can not only be summarized by a
table,  , p. tab:powerOfLicenses but also
by a mindmap as it is shown at the end of this chapter. Moreover, based on these
specifications, one could generate new groups of open source licenses, new
classes, like `user protecting licenses,' all of them because all of
them have to fulfill the OSD `patent disputes fending licenses' up to more
sophisticated taxonomies.
However, one must keep in mind that all of these grouping viewpoints do not
legitimate the conclusion that all members of a group can be respected by
fulfilling the same requirements. This would only be possible if the grouping
criteria would directly refer to the fulfilling tasks. Indeed, nearly all open
source licenses do differ with respect to these criteria, and even if the
differences are very small, they can't be neglected.
   Pars pro toto:
  Both, the BSD license and the Apache license require that you provide an
  indication to the developers of the application. But in case of the BSD license
  you have to publish the copyright notice/line, while in case of the Apache
  license you have exactly to present the content of the notice file distributed
  together with the application. 
So: reflecting on possible classes of open
source licenses is a good method to become familiar with the area of open source
licenses. But it is not a method to determine, what needs to be done to
obtain the right to use the software. For that purpose every license must be
considered individually.
tikzpicture
OSCLICMM
[rectangle,draw,text width=1.4cm] (l0100) at (9,4)
 BSD License ;
[text width=1.4cm] (l0101) at (8.25,3)
 3-Clauses ;
[text width=1.4cm] (l0102) at (10,3)
 2-Clauses ;
  
[rectangle,draw,text width=1.4cm] (l0200) at (10.2,5)
 MIT License ; 
  
[rectangle,draw,text width=1.4cm] (l0300) at (12,5.5)
 Apache License;
[text width=0.4cm] (l0301) at (12,4.5) 2.0;
[rectangle,draw,text width=1.4cm] (l0400) at (13,6.8)
 MicroSoft Public
License ;
  
[rectangle,draw,text width=2.0cm] (l0500) at (13,8)
PostgreS[Q] License;
  
[rectangle,draw,text width=1.4cm] (l0600) at (13,9)
PHP License;
[text width=0.4cm] (l0601) at (14.5,9)3.0;
  
[rectangle,draw,text width=1.4cm] (l0800) at (13,10.7)
 Mozilla Public License;
[text width=0.4cm] (l0801) at (14.5,10.2)1.1;
[text width=0.4cm] (l0802) at (14.5,11.2)2.0;
[rectangle,draw,text width=1.4cm] (l0900) at (13,12.25)
Eclipse Public License;
[text width=0.4cm] (l0901) at (14.5,12.25) 1.0;
 
[rectangle,draw,text width=1.5cm] (l1000) at (13,13.8)
European Public License; 
[text width=0.4cm] (l1001) at (14.5,13.3)1.1;
[text width=0.4cm,style=dotted] (l1002) at (14.5,14.3)1.2;
  
[rectangle,draw,text width=1.4cm] (l1100) at (13,15.5)
Lesser GNU Public License;
[text width=0.4cm] (l1101) at (14.5,15)2.1;
[text width=0.4cm] (l1102) at (14.5,16)3.0 ;
[rectangle,draw,text width=1.4cm] (l1200) at (13,17.5)
GNU Public License;
[text width=0.4cm] (l1201) at (14.5,17)2.1;
[text width=0.4cm] (l1202) at (14.5,18)3.0 ;
[rectangle,draw,text width=1.4cm] (l1300) at (13,19.5)
 Affero GNU Public License;
[text width=0.4cm] (l1302) at (14.5,19.5)3.0;
[rectangle,draw,text width=2.3cm] (n0100) at (10,8)
  protecting the user, the contributor  the initial code
   Permissive Licenses      
 ;
[rectangle,draw,text width=2.3cm] (n0200) at (10,12.5)
 protecting the user, the contributor, the
  initial code,  all direct derivations
  Weak Copyleft        
;
[rectangle,draw,text width=2.3cm] (n0300) at (10,16.5)
 protecting the user, the contributor, the 
  initial code, all direct derivations  the 
  (indirectly derived) on-top-developments
 
  Strong Copyleft    
 ;
[ellipse,draw,text width=1.6cm] (c110000) at (4.5,0)
 Patent Disputes;
[ellipse,draw,text width=1.6cm] (c120000) at (4.5,2)
 Loss of Rights ;
[ellipse,draw,text width=1.6cm] (c210000) at (4.5,4)
 Warranty Claims ;
 
[ellipse,draw,text width=1.6cm] (c220000) at (4.5,6)
 Loss of Feeback;
[ellipse,draw,text width=0.6cm] (c311000) at (6.2,8)
 reclosings;
[ellipse,,draw,text width=0.6cm] (c321000) at (6.2,10)
 reclosings ;
[ellipse,,draw,text width=0.6cm] (c331000) at (6.2,12)
 reclosings ;
[ellipse,,draw,text width=0.6cm] (c341000) at (6.2,14)
 reclosings ;
[ellipse,,draw,text width=0.6cm] (c351000) at (6.8,16.2)
 reclosings ;
[ellipse,,draw,text width=0.7cm] (c361000) at (7.5,17.5)
 privatizings ;
[ellipse,,draw,text width=1.6cm] (c411000) at (6.5,19)
 closings ;
[ellipse,draw,text width=1.5cm] (c310000) at (3,8)
  unmodified Sources;
[ellipse,draw,text width=1.5cm] (c320000) at (3.25,10)
  unmodified Binaries;
[ellipse,draw,text width=1.2cm] (c330000) at (3.5,12)
  modified Sources;
[ellipse,draw,text width=1.4cm] (c340000) at (3.25,14)
  modified Binaries;
[ellipse,draw,text width=2cm] (c350000) at (3.6,16)
  part of On-Top-Developments;
[ellipse,draw,text width=2.9cm] (c360000) at (3.4,17.5)
  On-Top-Developments;
[ellipse,draw,text width=1cm] (c100000) at (1,1)
  Users ;
[ellipse,draw,text width=0.8cm] (c200000) at (1,5)
  Contributors;
[ellipse,draw,text width=0.8cm] (c300000) at (1,12)
  distributed Software;
 
[ellipse,draw,text width=2.2cm] (c400000) at (1,19)
  undistributed Software; 
[ellipse,draw,text width=1.3cm] (c000000) at (0,8)
 open source license;
/in 
  l0100/l0101/,
  l0100/l0102/,
  l0300/l0301/,
  l0600/l0601/,
  l0800/l0801/,
  l0800/l0802/,
  l0900/l0901/,
  l1000/l1001/,
  l1000/l1002/,
  l1100/l1101/,
  l1100/l1102/,
  l1200/l1201/,
  l1200/l1202/,
  l1300/l1302/
  
  [dashed] () to  () ;
///in 
  n0100/l0100/270/150,       
  n0100/l0200/280/155,
  n0100/l0300/290/160,
  n0100/l0400/300/165,
  n0100/l0500/310/150,
  n0100/l0600/340/160,
  n0200/l0800/300/160,
  n0200/l0900/340/170,
  n0200/l1000/20/190,
  n0200/l1100/60/200,
  n0300/l1200/40/180,
  n0300/l1300/80/180 
  
  
  [dashed] () to  () ;
///in 
  c361000/n0300/0/180,
  c351000/n0300/0/180,
  c341000/n0300/45/190,
  c331000/n0300/50/200,
  c321000/n0300/55/210,
  c311000/n0300/60/220,
  c220000/n0300/25/225,
  c210000/n0300/25/230,
  c120000/n0300/25/235
  
  [<-,color=blue] () to [out=,in=] () ;
///in 
  c341000/n0200/330/170,
  c331000/n0200/0/180,
  c321000/n0200/0/180,
  c311000/n0200/20/190,
  c220000/n0200/15/220,
  c210000/n0200/15/230,
  c120000/n0200/15/235
  
  [<-,color=cyan] () to [out=,in=] () ;
///in 
  c331000/n0100/355/150,
  c311000/n0100/0/180,
  c210000/n0100/5/210,
  c120000/n0100/10/230
  
  [<-,color=red] () to [out=,in=] () ;
///in 
  c411000/l1300/0/180    
  [<-,color=green] () to [out=,in=] () ;
////in 
  c000000/c100000/protecting/260/120,
  c100000/c110000/against/360/180,
  c100000/c120000/against/360/180,
  c000000/c200000/protecting/270/180,
  c200000/c110000/against/340/150,
  c200000/c210000/against/0/180,
  c200000/c220000/against/0/180,
  c000000/c300000/protecting/90/230,
  c300000/c310000/as/300/180,
  c300000/c320000/as/330/180,
  c300000/c330000/as/0/180,
  c300000/c340000/as/30/180,
  c300000/c350000/as/60/180,
  c300000/c360000/as/70/180,
  c000000/c400000/protecting/100/240,
  c400000/c411000/against/0/180        
  [->,dotted,
    decoration=text along path,
              text align=center,
              text=,
              postaction=decorate,] () to [out=,in=] () ;
////in 
  c310000/c311000/against/0/180,
  c320000/c321000/against/0/180,
  c330000/c331000/against/0/180,
  c340000/c341000/against/00/180,
  c350000/c351000/against/0/180,
  c360000/c361000/against/0/180      
  [->,dotted,
    decoration=text along path,
              text align=center,
              text=,
              postaction=decorate,] () to [out=,in=] () ;
///in 
  c110000/l1302/0/305,
  c110000/l1202/0/303,
  c110000/l1201/0/301,
  c110000/l1102/0/299,
  c110000/l1101/0/297,
  c110000/l1002/0/295,
  c110000/l0901/0/290,
  c110000/l0802/0/285,
  c110000/l0400/0/275,
  c110000/l0301/0/270   
  [<-,color=gray] () to [out=,in=] () ;
tikzpicture
The problem of implicitly releasing patents
quoteIn this chapter, we briefly analyze
the effects of patent clauses in open source licenses---not in general, but with
respect to the license fulfilling tasks they require, also known as the
`implicit acceptance of a patent use' by distributing open source software.
quote
At least the free software movement frowns on the existence of software
patents.
   For an early and elaborate description on the effects of
  software patents based on the viewpoint of the free software movement
  [see][wp]Stallman2001a. This lecture seems to have been given
  more than once and printed later on ([cf.][wp]Stallman2002a).
  Within the first decade of 2000, the focus switched to a more political fight
  against software patents ([cf.][wp]Stallman2004a). But recently
  there seems to have appeared another turn in dealing with software patents:
  Not fighting against the patents, but mitigating their effects. The proposal is
  `[...] (to legislate) that developing, distributing, or running a program on
  generally used computing hardware does not constitute patent infringement'
  ([cf.][wp]Stallman2012a)
One of the best known witnesses for that attitude is the GPL itself. Its
preamble purports that [] any free program is threatened
constantly by software patents. One can read that the open
source community fears three risks: First, they are apprehensive of people who
hijack the idea of a piece of open source software they do not have developed,
register a corresponding patent, and finally try to earn money by preventing the
use of the software or by involving its users in patent
ligitations.[cf.][234]JaeMet2011a Second, they fear a bramble of
general software patents which practically prohibits them to develop open source
software legally.[cf.][234]JaeMet2011a Third, they anticipate the
possibility that (not quite benevolent) open source developers could try to
register patents with the intention of undermining the open source
principles.[cf.][235]JaeMet2011a
Howsoever, regardless whether one tries to fight against software patents or not,
software patents have become a reality. To abide by the law requires managing the
constraints of patents properly. Open source licenses know and respect this
necessity. Moreover, at least some of them try to manage the effect of software
patents by specific patent clauses[pars pro toto cf.]§3 or by several
sentences distributed in the license text.[pars pro toto cf.]wp But why
does the  have to deal with this topic, if the  does not want to
participate in general discussions?
Opposite to the other conditions of the open source licenses, their patent
clauses or propositions in general do not directly refer to a specific set of
actions which have to be executed for acting in accordance with the licenses. Open
source patent clauses normally do not join in the game `paying by doing.' So,
actually, it does not seem to be necessary to mention the patent clauses here.
Unfortunately, although the patent clauses do not directly say `do this or
that in these or those circumstances,' some of them nevertheless have side
effects which imply that the distributors of open source software already
have something done if they actually distribute a piece of open
source software. This implicit effect makes it necessary to deal with the patent
clauses even in an only pragmatic .
Patent clauses in open source licenses can have two different directions of
impact. They use two methods to protect the users of the open source software---
and sometimes these methods are combined:
itemize
  First, an open source license can assure that all contributors to and
  distributors of a piece of open source software grant to all users/
  recipients not only the right to use the open source software itself, but
  automatically and implicitly also the right to use all those patents 
  belonging to the contributors/distributors which as patents are necessary
  to use the software legally.
     There might arise a legal discussion
    whether even a distributor who does not contribute to the software development
    has to grant the necessary rights of his patent
    portfolio. The  does not want to participate in this discussion. We take a
    simple and pragmatic position: to be sure that you are acting according to
    an open source license with such a patent clause you should simply assume that
    you have to do so. If this default position is not reasonable for you it might
    be a good idea to consult legal experts which---perhaps---may find another
    way for you to use the software legally. 
  So, let us---a little simplifying and therefore only on the following few
  pages---name such licenses the granting licenses.
  Second, an open source license can try to automatically terminate the
  right to use, to modify, and to distribute the software if its user initiates
  litigations against any of the contributors/distributors with respect to an
  infringement of patent. That can be seen as a revocation of rights granted 
  earlier. So, let us name these license the revoking licenses.
itemize
Later on, we will summarize the concrete patent clauses of all the licenses
discussed in the  as a proof for the following classification:
small
center
tikzpicture
PATTAX
[ellipse,minimum height=8.5cm,minimum width=14.2cm,draw,fill=gray!10] (l0100) at (6.7,6.8)
  ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text=open source licenses,
              postaction=decorate] (-0.8,6.5) arc (218:322:9.5cm);
              
[ellipse,minimum height=6.2cm,minimum width=5cm,draw,fill=gray!20] (l0100)
at (2.5,6.8)   ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= without granting patent clauses,
              postaction=decorate] (0.75,7.5) arc (180:0:1.8cm);
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0101) at (2.5,8.6) MIT;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0102) at (1.7,7.6) BSD-X-Clause;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0103) at (3.4,6.4) LGPL-2.1;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0104) at (3.4,7.6) GPL-2.0;
[rectangle,draw,text width=1.2cm, text height=0.36cm, fill=gray!40, text
centered] (l0105) at (1.7,6.4) PHP-3.X;
[rectangle,draw,text width=1.4cm, text height=0.36cm, fill=gray!40, text
centered] (l0106) at (2.5,5.2) Post-greSQL;
[ellipse,minimum height=6cm,minimum width=8.5cm,draw,fill=gray!20] (l0200)
at (9.4,6.5)   ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= with granting patent clauses,
              postaction=decorate] (2.2,2) arc (180:0:7cm);
[ellipse,minimum height=4.5cm,minimum width=5.6cm,draw,fill=gray!30]
(l0210) at (8.4,6.1)   ;
[-,dotted,line width=0pt,white,
    decoration=text along path,
              text align=center,
              text= granting + revoking,
              postaction=decorate] (4.4,3.8) arc (180:0:4cm);
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0212) at (7.2,6.9)   Apache-2.0;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0211) at (9.6,6.9)   EPL-1.X;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0213) at (7.2,6.1)   MPL-X.Y;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0214) at (9.6,6.1)   MS-PL;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40, text
centered] (l0213) at (7.2,5.3)   LGPL-3.X;
[rectangle,draw, text width=2cm, text height=0.34cm, fill=gray!40,
text centered] (l0213) at (9.6,5.3)   GPL-3.0;
[rectangle,draw,text width=1.6cm, text height=0.34cm, fill=gray!40, text
centered] (l0214) at (8.4,4.5)   AGPL-3.0;
 
 
[rectangle,draw, text width=1.8cm, text height=0.34cm, fill=gray!40, text
centered] (l0221) at (11.6,8)   EUPL-1.X;
tikzpicture
center
small
But regardless of the final textual form a license uses to express its
granting or revoking positions, in any case one has to consider some aspects: 
itemize
  
  Overall, one has to keep in mind that of course no licensor, contributor
  and/or distributor can release the right to use any patents he does not own---
  not even if he tries to release them by an open source patent
  clause.
     The EPL is one of the licenses which insists on this aspect:
    It the second half of its patent clause, the EPL underlines that
    [] no assurances are provided by any Contributor that the
    Program does not infringe the patent or other intellectual property rights of
    any other entity. Moreover, it explicitly adds that [] if a
    third party patent license is required to allow Recipient to distribute the
    Program, it is Recipient's responsibility to acquire that license before
    distributing the Program ([cf.][wp §2c]Epl10OsiLicense2005a).
  Implictly touched patents of third parties not having contributed to the
  development and/or participated in the distribution can never be implicitly
  and automatically released on the base of such an (open source) patent clause:
  no rights, no right to release.
     This is an important aspect which is sometimes not considered by
    programmers. Inside of DTAG we had a fruitful discussion evoked by Mr. Stephan
    Altmeyer who---as patent lawyer---patiently explained this constraint to us. 
  Hence: even for those open source licenses which try to protect the users,
  finally the users themselves must nevertheless ensure that they do not violate
  the patents of third parties being unwillingly touched by the way the code
  works or the processes in which the software is used.
     Sometimes, this problem of willingly or
    unwillingly violated third party patents is seen as a weakness of open source
    software. But that is not true. It is a weakness of every software. Even a
    commercial licensor (developer) has only the right to license the use of those
    patents he really owns or he has `bought' for relicensing. Moreover, even
    commercial licensors can willingly or unwillingly violate patents of other
    persons.
  
  In the context of a granting license, one has also to consider that
  contributing to and distributing a piece of software implicitly evokes that
  all patents of the contributor and/or distributor are `given free' which are
  necessary to use the software as whole---including the more or less deeply
  embedded libraries. So, if one wants to check whether some of the core patents
  of one's patent portfolio are afflicted by a patent clause (and whether one
  therefore better should not use/distribute the corresponding piece of open
  source software), one should not forget to check the embedded libraries, too.
  
  Finally, one has to consider in the context of a granting license that
  its patent clause only releases the use of the patents in the meaning of
  `allowed to be used for enabling the use of the distributed software.' The
  patent clause does not release the patents generally. Thus, the threat of
  (unwillingly) releasing patents by open source software is not as large as
  sometimes feared: the use of the patent is only granted in combination with
  the software. On the one hand, you may not use the open source software
  without having the right to use the patent because the use of the patent is
  inherently necessary for using the software---regardless, whether the open
  source software is embedded into a larger process or not. On the other hand,
  you are not allowed to use patents---released by the patent clause of an open
  source license---without exactly that open source software which has been
  licensed under this open source license, because the patent clause only refers
  to the use of just that open source software.
  
  
  
  Summarized, one has to consider that the granting open source licenses
  automatically and implicitly force you to grant all the rights which are
  necessary to use the software legally. Open source contributors and
  distributors should know that. Again: It might be debatable whether
  this is also valid for the distributors which do not contribute anything to
  the development. That's a legal discussion the  does not wish to participate
  in. From the viewpoint of an open source user who only wants to have one
  reliable and secure way to use open source software compliantly, one should
  perhaps assume that there is no difference.
  With respect to the revoking licenses, one has to consider that their
  patent clauses contain negative conditions which may be read as interdictions.
  The  will integrate these conditions into specific `prohibits'-sections
  of its to-do lists.
  
  Finally one should mention that in some cases, the form of the
  revocation used by the revoking license refers to the use of the software, in
  other cases to the use of the patents. But nevertheless, one can reason that
  ---from the pragmatic viewpoint of a benevolent open source software user---
  this second case of patent revocation also implicitly terminates the right to
  use the software: If the use of a patent is necessary to use a piece of
  software legally, one is not allowed to use the software without having the
  right to use the patent, too; and if the use of the patent is not necessary
  for using the software, then the patent is not covered by the patent clause.
  So, in any case, this kind of patent clauses seems to terminate the right to
  use, distribute or modify the software. Hence, single users as well
  as companies or organizations should also respect such patent clauses if they
  want to be sure to use open source software compliantly.
itemize
The  wants to support its readers not only to act according to the licenses
in general, but also according to its patent clause. Thus, we now briefly cite
and summarize the meaning of particular patent clauses:
AGPL statements concerning patents
AGPL
(prelimiary text)
The AGPL-3.0 is a license derived from the GPL-3.0: apart from the preamble and
the paragraphs §11 and §13, they contain nearly the same text.
   compare [][]Agpl30OsiLicense2007a and
  [][]Gpl30OsiLicense2007a in both §1 §11
In §13, the AGPL explictly refers to the focus on a remote network
interaction which shall also be able to trigger the delivery of the
corresponding source code; and in §11, the AGPL establishes its specific patent
clause [cf.][§11 and §13]Agpl30OsiLicense2007a.
Like the GPL-3.0, the AGPL-3.0 tries to protect all licensees against patent
claims. This kind of protection is then established by three steps:
First, the AGPL-3.0 assures that each contributor grants a non
exclusive, worldwide, royalty free patent license under the contributor’s
essential patent claims, to make, use, sell offer for sale, import and
otherwise run, modify and propagate the contents of its contributor
version.§11 Furthermore, the patent license defines that this patent
license granted by the contributor is automatically extended to all downstream
recipients who later on receive any version of the work even if they indirectly
receive them by third parties and even if they receive a covered work or work
based on the program.§11
Second, the AGPL enforces not only the grant of patent licenses by the
contributors, the license even requires the same from licensees who
distributes the program unchanged: If, pursuant to or in connection
with a single transaction or arrangement, you convey, or propagate by procuring
conveyance of, a covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify or convey
a specific copy of the covered work, then the patent license you grant is
automatically extended to all recipients of the covered work and works based on
it.§11
Finally, the AGPL-3.0 introduces an revoking clause by stating that a licensee
[] may not initiate litigation (including a cross-claim or
counterclaim in a lawsuit) alleging that any patent claim is infringed by
making, using, selling, offering for sale, or importing the Program or any
portion of it§10 and that this licensee automatically
loses the rights granted by the AGPL-3.0 including any patent
licenses if he tries to propagate or modify a covered work against the
regulations of the AGPL-3.0.§8 
According to that, the AGPL-3.0 is like the GPL-3.0 a granting and a revoking
license: At first, one is granted the right to use all patents of all
contributors which are necessary to use the software legally. But if one
installs any litigation regarding an infringement of patents, then the rights
granted to him are revoked.
Apache-2.0 statements concerning patents
APL
Titled by the headline Grant of Patent License, the Apache License 2.0
contains a specific patent clause being comprised of two very long and condensed
sentences.§3 Outside of this patent clause, the word patent is
only used once again---for requiring that one [] must retain, in
the (sources) [] all [] patent [] notices []§4.3
The one core message of the Apache-2.0 patent clause is that
[] each Contributor hereby grants to You a perpetual, worldwide,
non-exclusive, no-charge, royalty-free, irrevocable [] patent license to
make, have made, use, offer to sell, sell, import, and otherwise transfer the
Work []
   [cf.][wp §3]Apl20OsiLicense2004a. The
  Contributor, Work, and You are defined in §1:
  Contributor refers to the original licensor and to all others whose
  contributions have been incorporated into the Work. The Work denotes
  the result of the development process regardless of its form. You
  denotes the licensees.
The second core message of the Apache-2.0 patent clause is the statement that
if You institute patent litigation against any entity [] alleging
that the Work [] constitutes [] patent infringement, then any patent
licenses granted to You [] shall terminate []§3
The third message of the Apache-2.0 patent clause is the statement, that the
[] license applies only to those patent claims licensable by such
Contributor that are necessarily infringed by their Contribution(s) alone or by
combination of their Contribution(s) with the Work to which such Contribution(s)
was submitted.§3
Thus, the Apache-2.0 is---as we use to say in this chapter---a granting and a
revoking license: At first you are granted to use all patents of all
contributors which are necessary to use the software legally. But if you---with
respect to the software---install any litigation concerning the infringement of
patents, then the rights granted to you are revoked.
CDDL statements concerning patents
CDDL
The patent clauses of the CDDL are similiar in spirit to the Apache License: 
The license grants rights to each contributors patents that are neccessarily
infringed by distributing or using the software. The license also revokes all
rights granted to someone who files a patent litigation with respect to the
software against any contributor.  The CDDL differs from other licenses in that
the litigant does not lose his rights automatically and immediately but gets a
grace period of 60 days. If he withdraws his claims during this period, the
license granted to him will not be terminated.
The actual wording used in the CDDL is complicated by the fact that the CDDL
distinguished between the Initial Developer and other
Contributors.  A Contributor receives a version of the
software to which he then adds some Modifications thus creating the
Contributor Version. For all practical purposes we can treat the
Initial Developer as another contributor who happens to not receive
any software and whose Contributor Version (officially called
Original Software) equals his Modifications.
The patent licenses are granted in the clause (b) of the sections titled
The Initial Developer Grant§2.1(b) and Contributor
  Grant.§2.2(b) Each contributor grants the licensee a
  world-wide, royalty-free, non-exclusive license under Patent Claims infringed
  by the making, using, or selling of Modifications made by that Contributor
  either alone and/or in combination with its Contributor Version [], to
  make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)
  Modifications made by that Contributor []; and (2) the combination of
  Modifications made by that Contributor with its Contributor Version [] 
This limits the patent license to patents infringed by code present in the
contributor version. And clause (d) limits the grant even further to exclude
infringements caused by[]third party modifications of Contributor
Version§2.2(d) or Covered Software in the absence of Modifications
made by that Contributor.§2.2(d)
This ensures that no contributor is required to tolerate an infringement of his
patents caused by code modified after he made his contribution and, in
particular, it is not possible to remove the contributors modifications completely
without also removing all other causes of infringement of the patent claims
because the patent license does not carry over to such a use of the software.
The section titled TERMINATION contains the usual defense
against patent infringement claims by declaring that any such claim
against a Participant
   The Contributor or Initial Developer against
  whom the claim is made
[] alleging that the Participant Software [] directly or indirectly
infringes any patent, then any and all rights granted directly or indirectly to 
You The party making the patent infringement claim
[] under Sections 2.1 and/or 2.2 of this
License shall, upon 60 days notice from Participant terminate prospectively and
automatically at the expiration of such 60 day notice period, unless [] 
You withdraw Your claim [] against such Participant either unilaterally or
pursuant to a written agreement with Participant.
Thus, not only has the Participant to actively initiate the termination of the
licenses, the licensee also has 60 days to either settle the case by an
agreement with the Participant or to withdraw his claims.
EPL statements concerning patents
EPL
The Eclipse Public License treats the patents necessary to use the program
in the same section and under the same headline Grant of Rights like
all the other rights: First, the EPL clearly states that [] each
Contributor [] grants (the recipient) a non-exclusive, worldwide,
royalty-free patent license under Licensed Patents to make, use, sell, offer to
sell, import and otherwise transfer the Contribution of such Contributor, if
any, in source code and object code form.§2.b Then the EPL delimits
the extend of this act of granting: Neither hardware patents of the contributors
are covered by this releasing patent clause, nor patents that concern aspects
out of the area of the initially intended software combination.§2.b
Finally, the EPL hints to the general fact that 3 party patents not
belonging to the contributors can never be implicity be released by such a
patent clause. Moreover, it gives the example that [] if a third
party patent license is required to allow Recipient to distribute the Program,
it is Recipient's responsibility to acquire that license before distributing the
Program.§2.c
Like other open source licenses, the EPL announces at its end that
if (a) Recipient institutes patent litigation against any entity
[] alleging that the Program [] infringes such Recipient's
patent(s), then such (granted) Recipient's rights [] shall terminate
[]§7
Thus, the EPL, too, is a granting and a revoking license: 
At first you are granted the use of all patents of all
contributors which are necessary to use the software legally. But if you---with
respect to the software---install any litigation concerning an infringement of
patents, then the rights granted to you are revoked.
EUPL statements concerning patents
EUPL
The European Union Public License contains a very brief patent clause. It only
states, that the Licensor grants to the Licensee royalty-free, non
exclusive usage rights to any patents held by the Licensor, to the extent
necessary to make use of the rights granted on the Work under this
Licence.end of §2
Furthermore the EUPL does not contain any patent specific revoking clause, but
only an abstract clause requiring that all [] the rights granted
hereunder will terminate automatically upon any breach by the Licensee of the
terms of the Licence§12. Thus, the EUPL is---as we are using to say
in this chapter---a granting license but not a revoking license.
GPL statements concerning patents
Although the GPL versions 2.0 and 3.0 are aiming for the same results, they
differ heavily with respect to textual and arguing structure. Therefore, it
should be helpful to treat these two licenses separately.
GPL-2.0
GPL2
The GPL-2.0 does not contain any specific patent clause by which it would grant
(and revoke) the rights to use those patents belonging to the contributors and 
being necessary to use the software in accordance with the legal patent system.
Instead of this, the preamble of the GPL-2.0 alleges that [] any
free program is threatened constantly by software patents and that the authors
of the GPL---for tackling this threat---[] had made it clear
that any patent must be licensed for everyone's free use or not licensed at
allPreamble. Unfortunately, this specification is only an indirect
claim which needs a lot of arguing for establishing a protective effect against
patent disputes. Howsoever, this paragraph of the GPL-2.0 does not directly
grant any rights to the software users to use necessary patents, too.
With respect to the patent problem, the GPL-2.0 also states that a licensee has
to fulfill the conditions of the GPL-2.0 completely, even if an existing patent
infringement---being imposed on the GPL licensee---[]
contradicts the conditions of this license so, that a waiver of the use of the
software is the only way to fulfill both constraints.§11 And
finally the GPL-2.0 allows the original copyright holder to add an
explicit geographical distribution limitation excluding [] countries
provided that these countries [] (restict) the distribution
and/or use of the library [] by patents []§12
Based on these statements, one cannot infer that the GPL-2.0 grants any patent
rights to the software user, neither directly, nor indirectly.
Thus, the GPL-2.0 is neither a granting nor a revoking license.
GPL-3.0
GPL3
Initially, the GPL-3.0 regrets that [] every program is
threatened constantly by software patents what should be seen as the
[] danger that patents applied to a free program could make it
effectively proprietary. And therefore---as the GPL-3.0 itself summarizes its
patent rules---[] the GPL assures that patents cannot be used to
render the program non-free.Preamble. This kind of protection is
then established by three steps. First, the GPL-3.0 stipulates that
each contributor grants [the licensees] a non-exclusive,
worldwide, royalty-free patent license under the contributor's essential patent
claims, to make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.§11
Second, the GPL-3.0 defines that this patent license granted by the contributor
[] is automatically extended to all recipients who later on
receive any version of the work, even if they indirectly receive them by third
parties and even if they receive a covered work or works
based on it.§11 Moreover, the GPL-3.0 also specifies that those
distributors of a covered work who have the right to use a patent
necessary for the use of the distributed software but who are not allowed to
relicense this patent to third parties must solve this problem by making the
source code available nevertheless, by depriving themselves or by
extending the patent license to downstream recipients.§11 
And finally, the GPL-3.0 also introduces a revoking clause by stating that a
licensee [] may not initiate litigation [] alleging that
any patent claim is infringed by making, using, selling, offering for sale, or
importing the Program or any portion of it§10 and that this
licensee automatically loses the rights granted by the GPL-3.0
including any patent licenses if he tries to propagate or modify a
covered work against the rules of the GPL-3.0.§8
Thus, GPL-3.0 is a granting and a revoking license: At first, one is granted the
right to use all patents of all contributors which are necessary to use the
software legally. But if you---with respect to the software---install any
litigation concerning an infringement of patents, then the rights granted to you
are revoked. 
LGPL statements concerning patents
As already mentioned above, the LGPL versions 2.1 and 3.0 differ heavily with
respect to textual and arguing structure. Therefore, they should be treated
separately.
LGPL-2.1
LGPL2
Like the GPL-2.0, the LGPL-2.1 does not contain any specific patent clause by
which it would grant (and revoke) the rights to use those patents belonging to
the contributors and being necessary to use the software in accordance with the
legal patent system.
Instead of this, the preamble of the LGPL-2.1 says that []
software patents pose a constant threat to the existence of any free program
and that the authors of the LGPL---for tackling this threat---
[] insist that any patent license obtained for a version of the
library must be consistent with the full freedom of use specified in this
license.Preamble
Unfortunately, this specification is again only an indirect claim which needs a
lot of arguing to establish a protective effect against patent disputes.
Howsoever, this paragraph of the LGPL-2.1 does not directly grant any rights to
the software users to use necessary patents.
With respect to the patent problem, the LGPL-2.1 also states that a licensee has
to fulfill the conditions of the LGPL-2.1 completely, even if an existing patent
infringement---being imposed on the LGPL licensee---
[] contradicts the conditions of this license so that a waiving
of the use of the software is the only way to fulfill both
constraints.§11 And finally the LGPL-2.1 allows the original
copyright holder to add an explicit geographical distribution limitation
excluding [] countries provided that these countries []
(restict) the distribution and/or use of the library [] by patents
[]§12 Based on these statements, one cannot infer that 
the LGPL grants any patent rights to the software user, neither directly, nor
indirectly.
Thus, the LGPL-2.1 is neither a granting nor revoking license.
LGPL-3.0
LGPL3
The LGPL-3.0 is an extension of the GPL-3.0. Before starting with a section
Additional Definitions, the LGPL-3.0 states that it []
incorporates the terms and conditions of version 3 of the GNU General Public
License and then supplements this GPL-3.0 content by some
additional permissions.wp The LGPL-3.0 itself does not
contain the word `patent,' but the GPL-3.0 does.§11
So, the LGPL-3.0 inherits its patent clause from the GPL-3.0 which is---as we
already described  , p.
GPL3---a granting and a revoking license.
 
MPL statements concerning patents
MPL
The MPL distributes its statements concerning the tolerated use of the patents
over three paragraphs: First, it clearly says that each Contributor
[] grants [the licensee] a world-wide, royalty-free,
non-exclusive license [] under Patent Claims of such Contributor to
make, use, sell, offer for sale, have made, import, and otherwise transfer
either its Contributions or its Contributor Version§2.1,
esp. §2.1.b Second, it hihlights some limitations.§2.3
And finally, the MPL introduces a revoking clause which signifies that the
rights, granted to the licensee [] by any and all Contributors
[] shall terminate if the licensee initiates litigation
against any entity by asserting a patent infringement claim [] alleging
that a Contributor Version directly or indirectly infringes any patent
[]§5.2
Thus, the MPL is a granting license and a revoking license.
MS-PL statements concerning patents
MSPL
First, the MS-PL contains a statement, by which [] each 
contributor grants (the software users) a non-exclusive, worldwide, royalty-free 
license under its licensed patents to make, have made, use, sell, offer for 
sale, import, and/or otherwise dispose of its contribution in the software or 
derivative works of the contribution in the software.§2.B Second,
the MS-PL says that if you bring a patent claim against any
contributor[] your patent license from such contributor to the software
ends automatically.§3.B 
Thus, the MS-PL is a granting and a revoking license: At first you are granted
to use all patents of all contributors which are necessary to use the software
legally. But if you install any litigation concerning an infringement of
patents with respect to the software, then the rights granted to you are revoked. 
Excursion: Why linking is a secondary criterium
sec:LinkingSecondary
quote
Distributing statically or dynamically linked software is often discussed as a
problem (and sometimes as a solution) for acting compliantly. In this chapter,
we briefly discuss why this aspect can mostly be ignored and why it does not
help to determine the existence of a derivative work.
quote
In some earlier versions of the , its finder subclassified some use cases
with respect to the way an application was `composed' as a larger unit: In the
previous form for gathering the necessary information, the  user had to
answer whether he was going to combine the received open source software
with other software components by linking them together statically, by linking
them dynamically, or by textually including (parts of) the open source software
into a larger unit. Today, this question has totally been erased. The
authors could convince themselves that it is not necessary to consider this
aspect.
Of course, we know that being linked statically or dynamically is often and
deeply discussed by license experts. Even on the European Legal
and Licensing Workshop, 2013 in Amsterdam, there was given an excellent lecture
concerning the nature and concequences of linking elf files. It seems to be an
important aspect:
[TBD: Discussion of the literature]
So, let us start with some undeniable facts: The  deals with 
the Apache-2.0 license,
the BSD 2-Clause license, 
the BSD 3-Clause license, 
the MIT license, 
the MS-PL, 
the PostgreSQL,
and the PHP license 
as instances of permissive licenses.
Additionally, the  treats 
the EPL, 
the EUPL, 
the LGPL,
   For LGPL-2.1 see [cf.][wp]Lgpl21OsiLicense1999a. 
  For LGPL-3.0 see  [cf.][wp]Lgpl30OsiLicense2007a. 
and the MPL
as licenses with weak copyleft. Finally, the  thoroughly discusses 
the GPL
   For GPL-2.0 see  [cf.][wp]Gpl20OsiLicense1991a 
  For GPL-3.0 see  [cf.][wp]Gpl30OsiLicense2007a  
and the AGPL
as licenses with strong copyleft.
   You can find html based instances of these licenses in the
     directory `licenses.' They have been downloaded from the
    OSI pages. All of the following statements refer to these files.
Only three of these licenses mention the word linking (or variants of
it): Using the command grep -i link *  grep -v
"<linklinksskip-link" in a shell---executed
as an operation on a set of html formatted license files---directly shows that
only the AGPL-3.0, the Apache-2.0, the GPL-2.0, the GPL-3.0, the LGPL-2.1 and
the LGPL-3.0 are using mutations of the word linking. Additionally, the
results of the command grep -i statical * show that only the LGPL-2.1
uses the word `statical,' while using the command grep -i dynamical *
only hints to the AGPL-3.0 and the GPL-3.0. Finally, the command grep -i
"shared" *---executed on the same set of files---shows that the term
shared libary is also only used by these licenses.
This analysis already indicates that being statically or dynamically linked
might not be as important for acting compliantly as it is often suggested.
If one reads the concrete statements, then one can see, that acting compliantly
depends only slightly and only rarely on the kind of being `combined':
  [Apache-2.0:] This version of the Apache license uses the word
  link only once for stating that [] Derivative Works shall not
  include works that remain separable from, or merely link [] to the interfaces of, 
  the Work and Derivative Works thereof.[cf.][wp.
  §0]Apl20OsiLicense2004a Thus, the Apache-2.0 does not use the criteria being
  linked for determining a derivative work, neither being linked in
  general, nor being statically linked, nor being dynamically
  linked. Hence, for acting in accordance to the Apache-2.0, this class of attributes
  can completely be ignored.
  [GPL-3.0:] The GPL-3.0 uses the word link three times: First, it
  defines the Corresponding Source for a work in object code
  form [as] all the source code needed to generate, install, and []
  run the object code and to modify the work []. Additionally the GPL-3.0
  also explains in this context that this definition shall include
  [] the source code for shared libraries and dynamically linked
  subprograms that the work is specifically designed to
  require[cf.][wp. §0]Gpl30OsiLicense2007a. Second, the
  GPL-3.0 allows [] to link or combine any covered work with a
  work licensed under version 3 of the GNU Affero General Public License into a
  single combined work, and to convey the resulting work.[cf.][
  wp. §13]Gpl30OsiLicense2007a Finally, the GPL-3.0 explains that
  the GNU General Public License [itself] does not permit incorporating
  your program into proprietary programs and that the LGPL might be a better
  license for those licensors who have written a subroutine library
  [] and may consider it more useful to permit linking proprietary
  applications with the library [][cf.][wp. last
  parapgraph]Gpl30OsiLicense2007a.
  
  So, also in this text, the features statically linked or
  dynamically linked are not used to trigger any license fulfilling
  actions. The conditions for Conveying Modified [] Versions
  refer to the work based on the Program[cf.][wp.
  §5]Gpl30OsiLicense2007a which itself denotes a modified
  version of the earlier work[cf.][wp.
  §0]Gpl30OsiLicense2007a. Moreover, the licensee---as modifier, distributor,
  and subsequent licensor---is required by the GPL-3.0 [] to
  license the entire work [which has been developed on the base of a GPL-3.0
  component], as a whole, under this License to anyone who comes into possession
  of a copy[cf.][wp. §5]Gpl30OsiLicense2007a. The GPL-3.0
  does not limit this claim---especially not by referring to a mode of being
  linked. Hence, also with respect to the GPL-3.0, one can completely ignore
  these features of the software, its use and its distribution for determining
  how to use the software compliantly.
  [AGPL-3.0:] Concerning the use and the meaning of the words
  dynamically and linking, the AGPL-3.0 exactly follows the
  structure of the GPL-3.0: first the terms arise in the context of defining the
  Corresponding Source;[cf.][wp.
  §0]Agpl30OsiLicense2007a then the word link helps to say that AGPL
  and GPL are compatible licenses;[cf.][wp.
  §13]Agpl30OsiLicense2007a and finally the word link is used to hint
  to the LGPL.[cf.][wp. §5]Agpl30OsiLicense2007a So, again,
  one can ignore the feature of being statically or dynamically linked if one
  wants to determine how to use the software compliantly.
  [GPL-2.0:] In the GPL-2.0, the word link only arises in the context
  of hinting to the LGPL.[cf.][wp. last
  paragraph]Gpl20OsiLicense1991a Moreover, the words statical and
  dynamical are not used in this text---not at all and in no sense: the
  copy left feature of the GPL depends `only' on a specification which refers to
  a work based on the Program [] that in whole or in part
  contains or is derived from the Program or any part thereof []
  [cf.][wp. §2]Gpl20OsiLicense1991a Thus, even in this old version
  of the GPL, the criteria of being linked---in which way ever---does not
  trigger any task for using the software compliantly.
  [LGPL-3.0:] In this license, variants of the word link are used to
  define the concept of a Combined Work which shall be the name for a
  [] work produced by combining or linking an Application with
  the Library.[cf.][wp. §0]Lgpl30OsiLicense2007a In the
  end the LGPL-3.0 allows to [] convey a Combined Work under
  terms of your choice [], provided that one distributes also all
  material (including the object files of the overarching on-top developments)
  necessary for enabling the receiver to relink the whole product with a
  later version of the library or that one presupposes the use of
  a suitable shared library mechanism so that the receiver can update
  the library simply by replacing the binary library file[cf.][
  wp. §4]Lgpl30OsiLicense2007a. For fulfilling these conditions it is
  sufficient to require that a distributor shall either distribute the
  on-top development and the library in the form of dynamically linkable parts
  or distribute the statically linked application together with a written offer,
  valid for at least three years, to give the user all object-files of the
  on-top development and the library, so that he can relink the application on
  its own behalf.
  [LGPL-2.1:] Even if the LGPL-2.1 argues more sophistically than all
  the other licenses, in its preamble this license clearly states what it wants
  to evoke: If you link other code with the library, you must provide
  complete object files to the recipients, so that they can relink them with the
  library after making changes to the library and recompiling it.
  [][cf.][wp. preamble]Lgpl21OsiLicense1999a For
  that purpose, the LGPL-2.1 defines at the beginning that if a program
  is linked with a library, whether statically or using a shared library, [then]
  the combination of the two is legally speaking a combined work, a derivative
  of the original library:[cf.][wp.
  preamble]Lgpl21OsiLicense1999a On the one hand a work that uses
  the Libary---which is only [] designed to work with the
  Library by being compiled or linked with it []---[] in
  isolation, is not a derivative work of the library []. On the other
  hand, it is no question for the LGPL-2.1, that linking a
  work that uses the Library with the Library creates an executable
  that is a derivative of the Library (because it contains portions of the
  Library).[cf.][wp. §5]Lgpl21OsiLicense1999a But then---
  as an exeption---the LGPL-2.1 allows to [] combine
  or link a work that uses the Library with the Library to produce a work
  containing portions of the Library, and distribute that work under terms of
  your choice. The right to do this is granted provided that the distributor
  either presupposes the use of a suitable shared library mechanism or
  that he distributes also the complete material (including the object files of
  the overarching on-top developments) which is necessary to enable the receiver
  to relink the whole product with a later incoming newer version of the
  library[cf.][wp. §6, §6b and §6c together with
  §6c]Lgpl21OsiLicense1999a. Again, for fulfilling all these conditions it is
  sufficient to require that a distributor shall either distribute the
  on-top development and the library in the form of dynamically linkable parts
  or distribute the statically linked application together with a written offer,
  valid for at least three years, to give the user all object-files of the
  on-top development and the library, so that he can relink the application on
  its own behalf.
Thus, with respect to this analysis, we can conclude that---in general---there
is no need to investigate whether one wants to distribute software in the form 
of statically or dynamically linked binaries for deriving the necessary tasks 
to distribute this software compliantly. 
Instead of this, we can directly incorporate those doings into the task lists 
of the LGPL what has been discovered as sufficient doings. 
Moreover, it is also sufficient to insert this statement only in the task list 
of the LGPL. 
There is no need to generalize this discussion. 
So, we could simplify our form offered to gather the information to find the 
adequate license fulfilling task list.
Excursion: What is a 'Derivative Work' - the basic idea of open source
This chapter briefly discusses aspects of
being a derivated pieces of software which have to be known for using open
source software compliantly. As usually, the 
only tries to find one safe interpretation. The authors know that there
exist many other ways to consider this topic. So, if you feel, that the
viewpoint of the  does not fit the specific circumstances of your
particular case, do not hesitate to ask your own lawyer. But if you agree with
the , be aware that you dealing with this topic from the viewpoint of a
benevolent user.
Let us outline the argumentation:
  [The meaning `derivative work' must be known!]
    Many open source licenses use the term `derivative work,'
    either directly or indirectly in form of the word `modification.'
    [Write a table as survey] 
    And nearly all licenses that are using the term `derivative work' etc., 
    are linking tasks that must be executed to comply with the corresponding
    license, to the precondition that something is a derivative work. 
    [table survey] 
    Hence, for acting in accordance with such a license, it has to be
    known what a derivate work is.  
  [Unfortunately the meaning is not clearly fixed.]
    There exist different readings of the term `derivative work.' 
    [specify the differences and cite the sources] 
    Hence, it is not as clear what a derivative work is as one could wish
  [So, let us argue from the viewpoint of a benevolent developer:]
    Open source licenses are written for software developers, mostly to preserve
    their freedom to develop software. And sometimes these licenses are also
    written by software developers---or at least with their assistance. So, one
    should be able to answer the question under which circumstances a piece of
    software is a `derivative work' of another piece of software based on two
    principles: 
  
    Let us argue from the viewpoint of a benevolent neutral software
      developer without hidden interests or a hidden agenda.
    In case of doubts let us preferably assume that the two pieces
      interrelate as source and derivative work---so that the  rather
      recommends to perform the required tasks.
  
We generalize a specific viewpoint of the LGPL. It uses three terms:
  [library] is defined as a collection of software
  functions and/or data prepared so as to be conveniently linked with
  application programs.[cf.][wp §0]Lgpl21OsiLicense1999a
  [work based on the library] is defined as either the
  library or any derivative work.[cf.][wp
  §0]Lgpl21OsiLicense1999a
  [work that uses the library] is defined as something which
  initially [] is not a derivative work of the library []
  but can become a derivative work by being combined / linked to the library it
  uses.[cf.][wp §5]Lgpl21OsiLicense1999a
Following these specifications, one has to conclude that 
derivative works of the library can be drieved in two different ways: 
First, the library itself can be enhanced without changing the character of 
being a library. Then, of course, the resulting library is a derivative work 
of the initial library.  Second, an overaching program can use the library by 
calling functions, methods, or data offered by the library. In this case, the 
overarching program functionally depends on the library and is a derivative work 
(as soon as it is linked to the library).
This viewpoint can be generalized: snippets, modules, plugins can be
enhanced and used by overarching programs or even by more complex libraries.
Based on this viewpoint---which should finally be formulated as the viewpoint of
a benevolent impartial developer---the  uses the following rules by which
the  decides to take something as derivative Work:
  [Copy-Case] Copying a piece of code from a source file and pasting it
  into a target file makes the target file a derivatve work of the source
  file. 
  [Modify-Case] Inserting any new content or deleting any existing content
  of a source file makes the resulting target file a derivate work of the
  source file.
  
  [Call-Case] Inserting the call of function which is defined inside of and 
  delivered by a sourcefile into a target file makes that target file
  depending on the source file and therefore a derivative work of the delivering
  source file.
And here are some applications of these rules:
  Enlarging an existing source file by an external text creates a
  derivative work! Why? Because you are going to reuse the
  external code for simplifying our life. [see 'Copy Case']
  Reducing a source file creates a derivative work! Why?
  Because you are going to prepare the given file(s) for a better reuse.
  [see 'Modify-Case']
  Replacing something in a source file creates a derivative work!
  Why? Because you are going to reuse parts of the existing code for
  simplifying your life. [see 'Modify Case']
  Integrating a foreign snippet into an existing source code
  creates a derivative work! Why? Because you are going to simplify
  your life by reusing both, the foreign snippet and the original file. [see
  'Copy Case' and 'Modify-Case']
  
  
  
  
  
  
  Refactoring a given work by extracting a function / method into
  an autonomous file creates a derivative work in two respects! Why?
  Because, first, all modified / generated files depend
  on the original file and, second, because those function calls in the files
  introduce a dependecy on the file defining the function itself.
  [see 'Modify-Case' and 'Call-Case]
  Calling a function - served by a defining module - lets the
  calling file become a derivative work of the serving module! Why?
  Because you are going to simplify your life by reusing an already
  prepared work (often offered by other developers). [see 'Call-Case']
  By calling elements - served by a defining library - the
  calling file becomes a derivative work of the serving library! Why? 
  Because you are going to simplify your life by reusing an already
  prepared work (often offered by other developers). [see
  'Call-Case'] 
And now some additional 'ideas' which might invite to be discussed:
  Does a plugin depend on its framework? No. Why? 
  Because it is like a module: it offers a function (normally without using
  a function, offered by the framework itself).
  Does a framework depend on its plugin? Let us try to answer:
  Sometimes yes, sometimes no. Why? If the framwork crashes when it is
  missing its plugin, then it clearly depends on the plugin. No doubt. It is
  simply not autonomous. But if it does not crash, then it perfectly does for
  which it has been designed: it is offering a place which might be filled by
  the plugin, but not necessarily. This kind of a framework is like an
  application listing to a port for getting data which it shall process and
  which are served by another application.
  Does a program using inter process communication depend on its
  IO-partners? Definitely not! Why? Because, otherwise, we need not discuss
  all these cases, every thing would depend on everything---in each running system.
[TBD ]
Excursion: The problem of license compatibility [tbd]
quote
Here we discuss the often neglected or only superficially treated problem of combining
differently licensed software. We will hint to the Exclusion-List of the Free
software foundation; we will hint to the Eclipse / GPL-plugin problem; we will
mention the recent discussion whether the kernel requires to license the
complete Android as GPL; and finally we will discuss the just now published, short
analysis of Jaeger and Metzger presenting a combining matrix which seems to fall
into their lap. 
We will argue that the question can simply be answered:
Only if you embed two libraries which both are licensed under an
on-top-development protecting license and if both these licenses require the
licensing of the derivated work by different licenses then you have a problem.
In all other cases which we will describe, there is no problem.
quote
Excursion: open source software and money [tbd]
quote
Here we will shortly discuss ways in which money and Open Source is no problem.
quote
Open Source: About Some Side Effectssec:SideEffects
Open Source Use Cases: Concept and Taxonomysec:OSUCdeduction
quoteThis chapter establishes our concept of
open source use cases as a classification system for to-do lists. The
conditions of a specific license, in the context of a particular
open source use case, shall be satisfiable by following the corresponding
to-do list. Additionally this chapter introduces a taxonomy for these open
source use cases. Later on, this taxonomy will organize the Open Source
Use Case Finder.
quote
After all these introductory remarks, we can summarize our idea. We know that
the right to use open source software depends on the tasks required by the open
source licenses. As opposed to commercial licenses, you can not buy the right to
use a piece of open source software by paying money. It is embedded into the
Open Source Definition that the right to use the software may not be
sold. The OSD states first that an open source license may []
not restrict any party from selling or giving away the software as a component
of (any) aggregate software distribution, and adds second in the same context
that an open source license [] shall not require a royalty or
other fee for such sale[cf.][wp §1]OSI2012a.
However, it would be wrong to conclude that you are automatically allowed to use
open source software without any service in return: generally you have to do
something to gain the right to use the software. In other words: open source
software is covered by the idea of ’paying by doing’. Accordingly, open source
licenses describe specific circumstances under which the user must execute
some tasks in order to be compliant with the licenses. So, if we want to offer
to-do lists for fulfilling license conditions, we must consider these tasks and
circumstances.
In practice, such circumstances are not linear and simple. They contain
combinations of (sometimes context sensitive) conditions which can be grouped
into classes of tokens. Such a class of tokens might denote a feature of the
software itself---such as being an application or a library. Or it can refer to
the circumstances of using the software, such as 'using the software only for
yourself' or 'distributing the software also to third parties'.
At the end, we want to determine a set of specific OSUCs---the open source
use cases. And we want to deliver for each of these OSUCs and for each of the
considered open source licenses one list of actions which fulfills the license
in that context Fortunately, sometimes one task list fulfills the
conditions of more than one use case---a welcome reduction of complexity.
Such an open source use case shall be considered as a set of tokens
describing the circumstances of a specific usage. Hence, to begin, we must
specify the relevant classes of tokens, before we can determine the valid
combinations of these tokens---our open source use cases. Finally, based
on the tokens, we generate a taxonomy in the form of a tree. This tree will
become the base of the Open Source Use Case Finder which will be offered
in the next chapter, and which leads you to your specific OSUC by evaluating
just a few questions and answers.
There are only a handful of tokens which are relevant to the circumstances of
open source software licenses:
OsucTokens
itemize
  The type of the open source software: On the one
  hand, we regard code snippets, modules, libraries and plugins, and on the
  other hand, autonomous applications, programs and servers. We will take the
  word ’snimolis’ for the first set, and ’proapses’ for the second. This is
  necessary, as we are not only talking about libraries and applications in the
  everyday sense, but rather in the broadest sense Of course, our newly
  introduced concepts of 'snimoli' and 'proapse' are not absolutely one of the
  most elegant words. So, initially we tried to talk about 'applications' and
  'libraries', although in our context these words should denote more, than they
  traditionally do. But we couldn't minimize the irritations of our
  interlocutors. Too often we had to remind them that we were not talking about
  applications and libraries in the strict sense of the words. Finally we
  decided to find our own words---and to stay open for better proposals ;-) .
  More specifically, we will ask you, whether the open source software you want
  to use, is an includable code snippet, a linkable module or library, or a
  loadable plugin, or whether it is an autonomous application or server which
  can be executed or processed. In the first case, the answer should be 'it is a
  snimoli', in the second 'it is a proapse'.
  The state of the open source software: It might be
  used exactly as one has received it. Or it can be modified, before being used.
  More specifically, we will ask you, whether you want to leave the open source
  software as you have received it, or whether you want to modify it before
  using and/or distributing it to 3rd parties. In the first case, the answer
  should be 'unmodified', in the second 'modified'.
  
  The usage context of the open source
  software: On the one hand you might use the received open source software as a
  readily prepared application. On the other hand you might embed the received
  open source into a larger application as one of its components. More
  specifically, we will ask you, whether you are using the open source
  software as an autonomous piece of software, or whether you are using it as an
  embedded part of a larger, more complex piece of software. In the first case,
  the answer should be 'independent', in the second
  'embedded'.
  
  The recipient of the open source software:
  Sometimes you might wish to use the received open source software only for
  yourself. In other cases you might intend to hand over the software (also) to
  other people. More specifically, we will ask you, whether you are going to use
  the open source software only for yourself, or whether you plan to
  (re)distribute it (also) to third parties. In the first case, the answer
  should be '4yourself', in the second '2others'.
 
  The form of the distributed files: Many licenses
  also draw a distinction between distributing the software as sources and
  distributing the files as binaries. In this case, we will ask you, whether you
  want to distribute the software in the form of binaries or as source code. In
  the first case, the answer should be 'binaries', in the second
  'sources'
  
itemize
From a more programmatic point-of-view, we can summarize these tokens as
follows:
itemize
  type::snimoli or type::proapse
  state::unmodified or state::modified
  context::independent or context::embedded
  recipient::4yourself or recipient::2others
  form::binaries or form::sources
itemize
We have already defined the open source use case as the combination of
these tokens. If we simply combine all these tokens of all these classes with
all the tokens of the other classes in the sense of the cross product
TYPE  STATE  CONTEXT  RECIPIENT  FORM. In some
earlier versions of the , we also asked whether you are going to combine or
to embed the open source software with other software components by linking them
statically or dynamically, or by textually including (parts of) the open source
software into your larger product. Meanwhile, we clearly discovered that it is
unnecessary to increase the complexity by the results of this question. For
Details   p. sec:LinkingSecondary, we get
 sets of tokens---or 32 open source use cases.
Fortunately, some of the generated sets are invalid from an empirical or logical
view, and some of these sets are context sensitive:
enumerate
  InvalidFinderTokenCombinations
  If you already have specified that the used open source software is a
  proapse---an autonomous program, an application, or a server---then
  your answer implies that the software is used independently and is not
  embedded with other components into a larger unit. But if you have specified
  that the used open source software is a snimoli---a snippet of
  code, a module, a plugin, or a library---then it can indeed be used as an
  embedded component of a constructed larger application or server, or it can be
  used independently in case you 'only' re-distribute it to 3rd. parties.
  
  If you already have specified that the used open source software is a
  snimoli---a snippet of code, a module, a plugin, or a library---and
  that this snimoli shall be used only by yourself (not distributed to
  other 3rd. parties) then your answer must also imply that this snimoli
  is used in combination, as an embedded part of a larger unit. A library can
  not be used autonomously, without using it as a component of another
  application. In this case, it would simply sit on the disk and would do
  nothing more than occupying space.
enumerate
Does this sound complex? We thought so, too. We spent much time explaining these
constraints to ourselves, and only when we had transposed all the combinations
and rules into a tree, the situation became clearer. The following diagrams
shall summarize our own clarifications:
Overview of the OSUC classes and tokens
tikzpicture[
    font=,
    grow'=right, 
    level 1/.style=sibling distance=6em,
    level 2/.style=sibling distance=2.5em,
    level distance=2.5cm          
]
[ellipse,draw] tokens
  child  node [rectangle,draw] type?
    child  node [ellipse,draw] proapse
    child  node [ellipse,draw] snimoli
  
  child  node [rectangle,draw] state?
    child  node [ellipse,draw] unmodified
    child  node [ellipse,draw] modified
  
  child  node [rectangle,draw] context?
    child  node [ellipse,draw] independent
    child  node [ellipse,draw] dependent
  
  child  node [rectangle,draw] recipient?
    child  node [ellipse,draw] 4yourself
    child  node [ellipse,draw] 2others
      child  node [rectangle,draw] form?
        child  node[ellipse,draw] sources
        child  node[ellipse,draw] binaries
      
    
  ;
tikzpicture
The OSUC taxonomy
This is one of the possible trees 'collecting' the tokens and offering the
open source use cases as their leaves  Each of the invalid use
cases (= sets of tokens) [for details s. p.
InvalidFinderTokenCombinations] is marked by an  and leads
to an empty set (= ): A proapse can not be embedded with another
software unit, also containing a main-function. Using a software library only
for yourself and independent (not in combination with larger software unit), is
like having an unused heap of bytes on your disc.:
OsucDefinitionTree
tikzpicture[
    font=,
    align=left,
    grow'=right,
    level 1/.style=level distance=1.3cm,
    level 2/.style=sibling distance=24em, level distance=1cm,
    level 3/.style=sibling distance=12em, level distance=1cm,
    level 4/.style=sibling distance=6em, level distance=1.5cm,
    level 5/.style=sibling distance=3.5em, level distance=2cm,
    level 6/.style=sibling distance=3.5em, level distance=1.8cm,
    level 7/.style=sibling distance=3.5em, level distance=1.5cm
]
[ellipse,draw] OSS
  child  node [rectangle,draw] type? 
    child  node [rectangle,draw] state? 
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-01
            child  node proapse,
unmodified,
independent,
4yourself
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-02
            child  node proapse,
unmodified,
independent,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node  
          edge from parent node  embedded 
        
        edge from parent node  unmodified 
      
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-03 
            child  node proapse,
modified,
independent,
4yourself 
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-04
            child  node proapse,
modified,
independent,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node  
          edge from parent node  embedded 
        
        edge from parent node  modified 
      
      edge from parent node  proapse 
    
    child  node [rectangle,draw] state? 
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node  
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-05
            child  node snimoli,
unmodified,
independent,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-06 
            child  node snimoli,
unmodified,
embedded,
4yourself 
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-07
            child  node snimoli,
unmodified,
embedded,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  embedded 
        
        edge from parent node  unmodified 
      
      child  node [rectangle,draw] context? 
        child  node [rectangle,draw] recipient? 
          child  node  
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-08
            child  node snimoli,
modified,
embedded,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  independent 
        
        child  node [rectangle,draw] recipient? 
          child  node [ellipse,draw] OSUC-09 
            child  node snimoli,
modified,
embedded,
4yourself 
            edge from parent node 4yourself
          
          child  node [ellipse,draw] OSUC-10
            child  node snimoli,
unmodified,
embedded,
2others 
              child  node [rectangle,draw] form?
                child  node 
sources 
                child  node 
binaries 
              
            
            edge from parent node 2others
          
          edge from parent node  embedded 
        
        edge from parent node  modified 
      
      edge from parent node  snimoli 
    
  ;
tikzpicture
Open Source Use Cases: Find the License Fulfilling To-do Listssec:OSUCfinder
quote
This chapter offers the Open Source Use Case Finder: Based on the
information gathered by a form, it allows to traverse a tree whose leaves are
linked to the open source use cases which finally refer to the respective
to-do lists.
quote
A standard form for gathering the relevant information
OSLiCStandardFormForGatheringInformation
 
[h]llll
   & Which open source software do you want to use? &  
   & Under which open source license is it released? &  
Focus & Questions & Answers
  Type
  & [2.9cm]
    Is the open source software you want to use a library in the
    broadest sense (an includable code snippet, a linkable
    module or library, or a loadable
    plugin), or is it an autonomous program,
    application, or server which can be
    executed? 
  & snimoliproapse
  
  State 
  & [1.7cm]
    Do you want to leave the open source software
    unmodified as you have received it, or are you going to
    create a modified version of it? 
  & unmodifiedmodified
  
  Context 
  & [2.15cm] 
    Are you going to use / distribute the open source software as an
    independent unit, or do you plan to integrate it as an
    embedded component into a complexer piece of software?
  & independentembedded
  
  Recipient 
  & [1.7cm] 
    Are you going to use the open source
    software only for yourself, or do
    you plan to (re)distribute it (also) to
    other third parties?
  & 4yourself2others
  
  Form 
  & [1.7cm]
    Given you want to (re)distribute an open source based work [2others],
    do you focus on distributing the binaries or the
    sources?
  & binariessources
  
As discussed earlier, there are of course some invalid
combinations. 
 Here
are some extra explanations concerning the classes resp. the focuses:
[Type:] A piece of (open source) software is a program, an application, or
a server, only if you can start its binary form with your normal program
launcher, or (in case of a text file which still must be interpreted by an
interpreter like php, perl, bash etc.) if you can start an interpreter which
takes the file as one of its arguments and executes the commands.
[State:] You are modifying a piece of (open source) software if you expand,
reduce or modify at least one of the received software files, and---in case of
dealing with binary object code---if you (re)compile and (re)link the modified
software to a new binary file. But if you only modify some of the configuration
files, you are not modifying the open source software itself.
[Context:] You are using a piece of open source software as an embedded
component of a larger unit 
  
  if one of your files of the larger unit contains a verbatim or a
  modified copy (i.e. a snippet) of the received open source software, or
  if your larger unit contains an include statement referring to a
  functionally defining file of the received open source software, or
  if your larger unit calls a function defined in the received open source
  software, or
  if your development environment contains a compiler or linker directive
  referring to the received open source software (binaries) and if your larger
  unit can't be executed without resolving this linker directive.
  
[Recipient:] You are using the received open source software only for
yourself, if you as a person do not pass it to other entities like persons,
organizations, companies etc., or if you---as a member of a specific
development group---pass it only to the other members of your development
group. But if you store open source software on any device such as a mobile
phone, an USB stick, etc. or if you attach it to any transport medium like
email etc. and if you then sell, give away, or simply send this device or
transport medium to anyone (other than a direct member of your development
group) then you indeed hand the open source software over to third
parties. 
[Form:] Open source software knows two ways to distribute the software: in
the form of binaries and in the form of sources. Mostly it is up to you to
decide whether you want to distribute only the binaries or whether you are
intentionally going to distribute the sources (too). At a first glance, the
concepts 'sources' and 'binaries' seems to be clearly distinguished.
On the one hand, compiled sources should be taken as binaries. On the other
hand, editable pieces of software are denoted by the concept 'sources'. But
sometimes the difference is not as clear as wished: For example, you can modify
even already compiled object files by using an hex-editor. Or it is very
difficult to modify the minimized versions of javascript files even if they are
indeed text files. Therefore, the OSLiC 'reuses' a famous rule of
thumb: The source code for a work means the preferred form of the work
for making modifications to it.§3 All other forms are denoted by
the concept of 'binaries'. Based on this specification, you can respect some
special conditions if you want to distribute the sources and/or the binaries.
The taxonomic Open Source Use Case Finder
Now, after having gathered the necessary information, determine your 
open source use case by traversing the following tree and its corresponding
branches:
choice/.style=rectangle, draw, rounded corners
[
    font=,
    align=left,
    grow'=right,
    level 1/.style=sibling distance=24em, level distance=10mm,
    level 2/.style=sibling distance=14em, level distance=10mm,
    level 3/.style=sibling distance=7em,  level distance=18mm, anchor=west, minimum width=2cm,
    level 4/.style=sibling distance=3em,  level distance=18mm, minimum width=1.65cm,
    level 5/.style=sibling distance=3em,  level distance=18mm, minimum width=1.45cm,
    level 6/.style=sibling distance=3em,  level distance=6mm,
]
[ellipse,draw] OSS
    child  node [choice]  typeproapse 
      child  node [choice] 
        child  node [choice] 
          child  node[choice]  
            01
          
          child  node[choice]  
            child  node[choice]  
              02S
            
            child  node[choice]  
             02B
            
          
        
      
      child  node [choice] 
        child  node [choice] 
          child  node[choice]  
            03
          
          child  node[choice]  
            child  node[choice]  
              04S
            
            child  node[choice]  
              04B
            
          
        
      
    
    child  node [choice]  typesnimoli 
      child  node [choice] 
        child  node [choice]  
          child  node[choice]  
            child  node[choice]  
              05S
            
            child  node[choice]  
              05B
            
          
        
        child  node [choice]  
          child  node[choice]  
            06
          
          child  node[choice]  
            child  node[choice]  
              07S
            
            child  node[choice]  
              07B
            
          
        
      
      child  node [choice] 
        child  node [choice]  
          child  node[choice]  
            child  node[choice]  
              08S
            
            child  node[choice]  
              08B
            
          
        
        child  node [choice]  
          child  node[choice]  
            09
          
          child  node[choice]  
            child  node[choice]  
              10S
            
            child  node[choice]  
              10B
            
          
        
      
    ;
The open source use cases and its to-do list references
On the following pages, each Open Source Use
Case is textually specified one more time and complemented by a list of
page numbers. Each of these pages covers the license-specific to-do list whose
items together offer a processable way for acting according to the license under
the circumstances of the described Open Source Use
Case.
01proapse, unmodified, independent, 4yourself
Only for yourself, you are going to use an unmodified open source program,
application, or server just as you received it. But you do not combine it with
other components in the sense of software development 
02Sproapse, unmodified, independent, 2others, sources
Just as you received it, you are going to distribute an unmodified open source
program, application, or server to third parties in the form of sources. In this
act of distribution, you do not combine this program, application, or server
with other software components in the sense of software development 
02Bproapse, unmodified, independent, 2others, binaries
Just as you received it, you are going to distribute an unmodified open source
program, application, or server to third parties in the form of binaries. In
this act of distribution, you do not combine this program, application, or
server with other software components in the sense of software development 
  
03proapse, modified, independent, 4yourself
Only for yourself, you are going to modify an open source program, application,
or server after you received it and before you will use it. But you do not
combine it with other components in the sense of software development 
04Sproapse, modified, independent, 2others, sources
You are going to modify an open source program, application, or server after you
received it and  before you will distribute it to third parties in the form of
sources. But you do not combine this modified program, application, or server
with other software components in the sense of software development
  
04Bproapse, modified, independent, 2others, binaries
You are going to modify an open source program, application, or server after you
received it and before you will distribute it to third parties in the form of
binaries. But you do not combine this modified program, application, or server
with other software components in the sense of software development
05Ssnimoli, unmodified, independent, 2others, sources
Just as you received it, you are going to distribute an unmodified open source
library, code snippet, module, or plugin to third parties in the form of
sources. In this act of distribution, you do not combine this library, code
snippet, module, or plugin with other software components in the sense of
software development 
05Bsnimoli, unmodified,independent, 2others, binaries
Just as you received it, you are going to distribute an unmodified open source
library, code snippet, module, or plugin to third parties in the form of
binaries. In this act of distribution, you do not combine this library, code
snippet, module, or plugin with other software components in the sense of
software development 
06snimoli, unmodified, embedded, 4yourself
Only for yourself and just as you received it, you are going to combine an
unmodified open source library, code snippet, module, or plugin into a larger
software unit as one of its parts  
07Ssnimoli, unmodified, embedded, 2others, sources
Just as you received it and before you will distribute it to third parties in
the form of sources and together with a larger software unit, you are going to
combine and embed an unmodified open source library, code snippet, module, or
plugin into that larger software unit in the sense of software development
07Bsnimoli, unmodified, embedded, 2others, binaries
Just as you received it and before you will distribute it to third parties in
the form of binaries and together with a larger software unit, you are going to
combine and embed an unmodified open source library, code snippet, module, or
plugin into that larger software unit in the sense of software development
08Ssnimoli, modified, independent, 2others, sources
Before you will distribute it to third parties in the form of sources, you are
going to modify an open source library, code snippet, module, or plugin. But you
do not combine it with other software components in the sense of software
development  
08Bsnimoli, modified, independent, 2others, binaries
Before you will distribute it to third parties in the form of binaries, you are
going to modify an open source library, code snippet, module, or plugin. But you
do not combine it with other software components in the sense of software
development 
09snimoli, modified, embedded, 4yourself
Only for yourself, you are going to modify an open source library, code snippet,
module, or plugin, and you will combine it in the sense of software development
into a larger software unit as one of its parts 
10Ssnimoli, modified, independent, 2others, sources
Before you will distribute it to third parties in the form of sources, you are
going to modify an open source library, code snippet, module, or plugin, which
you combine with other software components in the sense of software development
10Bsnimoli, modified, independent, 2others, binaries
Before you will distribute it to third parties in the form of binaries, you are
going to modify an open source library, code snippet, module, or plugin, which
you combine with other software components in the sense of software development
 
 
 
 
 
 
AGPL Licensed Software in the usage context of [tbd]
OSUC-01-AGPL OSUC-03-AGPL 
OSUC-06-AGPL OSUC-09-AGPL
OSUC-02S-AGPL OSUC-04S-AGPL OSUC-05S-AGPL
OSUC-07S-AGPL OSUC-08S-AGPL OSUC-10S-AGPL
OSUC-02B-AGPL OSUC-04B-AGPL OSUC-05B-AGPL
OSUC-07B-AGPL OSUC-08B-AGPL OSUC-10B-AGPL
Apache-2.0 licensed software
licenseAPL 
Apache-2.0
Apache License 2.0
2.0
Apache
Today, the current release of the Apache open source license is version 2.0,
older versions are deprecated. For details  , pp.
APL Because it focusses primarily on the
redistribution,[cf.][wp. §4]Apl20OsiLicense2004a
the following simplified Apache specific open source use case
finder For details of the general OSUC finder  , pp.
OsucTokens and OsucDefinitionTree can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l71) at (3,10) Apache-2.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) Apache-2.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  Apache-2.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  Apache-2.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  Apache-2.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  Apache-2.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  Apache-2.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  Apache-2.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  Apache-2.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  Apache-2.0-C9   distributing
modified library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
 
 
 
  
 
 
 
 
 
 
Apache-2.0-C1: Using the software only for yourself
Apache-2.0-C1
  01
  03 
  06
  09
  that you received Apache-2.0 licensed software, that you will use it
  only for yourself, and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
    You are allowed to use any kind of Apache software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
  
    
    
  
Apache-2.0-C2: Passing the unmodified software as source code
Apache-2.0-C2
  02S
  05S
  07S
  that you received Apache-2.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified source code
  files or as unmodified source code package. In this case it makes no
  difference if you distribute a program, an application, a server, a snippet, a
  module, a library, or a plugin as an independent or as an embedded unit.
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    
     
      
    
  
  
    
    
  
Apache-2.0-C3: Passing the unmodified software as binaries
Apache-2.0-C3
  02B 
  05B 
  07B 
  that you received Apache-2.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified binary files or
  as unmodified binary package. In this case it does not matter if you distribute
  a program, an application, a server, a snippet, a module, a library, or a
  plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
    
    
    
    Ensure that the notice text file is also reproduced if
      and whereever such third-party notices normally appear (especially, if you
      are distributing an unmodified Apache-2.0 licensed library as embedded
      component of your own work which displays its own copyright notice.) 
    
    
  
  
    
    
  
Apache-2.0-C4: Passing a modified program as source code
Apache-2.0-C4
  04S 
  
  that you received an Apache-2.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package.
 
  04S
  
    
    
    
    
  
    Inside of the source code, mark all your modifications
      thoroughly. Generate a notice text file, if it still does not
      exist. Add a description of your modifications into the
      notice text file.
    
  
 
  
    
    
  
Apache-2.0-C5: Passing a modified program as binary
Apache-2.0-C5
  04B
  that you received an Apache-2.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  04B
  
    
    
    
    
 
    Even if you do not want to distribute your modified source
      code, mark all your modifications thoroughly. 
    
  
  
    
    
  
Apache-2.0-C6: Passing a modified library as independent source code
Apache-2.0-C6
  08S
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  08S
  
    
    
    
 
    Inside of the source code, mark all your modifications
      thoroughly. Generate a notice text file, if it still does not
      exist. Expand the notice text file by a description of your
      modifications.
    
  
  
    
    
  
Apache-2.0-C7: Passing a modified library as independent binary
Apache-2.0-C7
  08B
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  08B
  
    
    
    
   
    Even if you do not want to distribute your modified source
      code, mark all your modifications thoroughly. 
    
  
  
    
    
  
Apache-2.0-C8: Passing a modified library as embedded source code
Apache-2.0-C8
  10S
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  10S
  
    
    
    
 
    
 
    Inside of the library source code, mark all your
      modifications thoroughly. Generate a notice text file, if it still
      does not exist. Expand the notice text file by a description
      of your modifications.
      
    
    Arrange your source code distribution so that the integrated
      Apache license and the notice text file clearly refer only to the
      embedded library and do not disturb the licensing of your own overarching
      work. It's a good tradition to keep embedded components like
      libraries, modules, snippets, or plugins in a specific directory which
      contains also all additional licensing elements.
  
  
    
    
  
Apache-2.0-C9: Passing a modified library as embedded binary
Apache-2.0-C9
  10B
  that you received an Apache-2.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  10B
  
    
    
    
 
    
     
    Even if you do not want to distribute your modified source
      code, mark all your modifications of the embedded libary thoroughly.
      
    
  
    Arrange your binary distribution so that the integrated Apache
      license and the notice text file clearly refer only to the embedded
      library and do not disturb the licensing of your own overarching
      work. It's a good tradition to keep the libraries, modules, snippet, or
      plugins in specific directories which contain also all licensing elements.
  
  
    
    
  
Discussions and Explanations
  On the one hand, the Apache 2.0 license does not permit
  [] to use the trade names, trademarks, service marks, or
  product names of the Licensor, except as required for reasonable and customary
  use in describing the origin of the Work and reproducing the content of the
  NOTICE file[cf.][wp. §6]Apl20OsiLicense2004a. On the other
  hand, this license alerts that all the patent licenses granted to those who
  [] institute a patent litigation will terminate
  automatically[cf.][wp. §3]Apl20OsiLicense2004a. Hence, the
   generally (Apache-2.0-C1 - Apache-2.0-C9) interdicts to promote products or services by
  these elements and to legally fight against patents linked to the software.
  
  The Apache-2.0 also requires to [] give any other recipients of
  the Work or Derivative Works a copy of this License[cf.][wp.
  §4.1]Apl20OsiLicense2004a. Therefore, all 2others use cases contain
  the respective mandatory condition (Apache-2.0-C2 - Apache-2.0-C9).
   
  Additionally, the Apache-2.0 requires, that modifications must be
  marked[cf.][wp. §4.2]Apl20OsiLicense2004a. Thus, in all
  cases of passing the modified software in the form of source code the 
  requires to mark the modifications and to integrate a hint into the notice
  file---while in all the cases of passing the modified software in the form of
  binaries it inserts only a voluntary condition (Apache-2.0-C4 - Apache-2.0-C9).
  
  Furthermore, the Apache-2.0 requires that one must [] retain, in
  the Source form of any Derivative Works that You distribute, all copyright,
  patent, trademark, and attribution notices from the Source form of the Work
  So, the OSLIC requires in all contexts (Apache-2.0-C1 - Apache-2.0-C9) that the licensing
  elements are retained in the form you have received them 
.
  
  Finally, the Apache-2.0 requires that the received ``NOTICE text file''
  must be integrated as readable copy to each package distributed in the form of
  source code, or---in case of binary distibutions---must be displayed
  [] if and wherever such third-party notices normally
  appear[cf.][wp. §4.4]Apl20OsiLicense2004a. Thus, the
   requires mandatorily that all source code distributions must include
  the notice text file (Apache-2.0-C2, Apache-2.0-C4, Apache-2.0-C6,
  Apache-2.0-C8) and that all distributions of binary applications which
  normally show such a copyrigth screen must integrate the content of the notice
  file into this screen (Apache-2.0-C5, Apache-2.0-C9). For libraries
  distributed in the form of binaries it is assumed that they normally do not
  contain such copyright dialogs (Apache-2.0-C7)
BSD licensed software
As an approved open source license, the BSD license exists in two
versions
   Following the OSI, there is another `ancient' BSD
    license---containing a fourth clause known as advertising clause---which
    () officially was rescinded by the Director of the Office of
      Technology Licensing of the University of California on July 22nd, 1999. 
    Because of that cancellation you can simply act according the  
    [cf.][wp.]BsdLicense3Clause 
    if you have to fulfill the oldest of the BSD licenses.  
The latest release is the BSD 2-Clause license,, the
older release is the BSD 3-Clause license. The very little
differences between the two versions have to be respected exactly. 
All BSD open source licenses focus explicitely on the (re-)distribution
open source use cases, which we have specified by our token
2others. Conditions for the other use cases specified by the token
4yourself can be derived.
   For details of the open source use case tokens see
    p. OsucTokens. For details of the open source use cases
    based on these token see p. OsucDefinitionTree 
Additionally the BSD licenses distinguishes between different forms of distribution,
esp. whether the work is distributed as a (set of) source code file(s) or as a
set of binary file(s). Use the following tree to find the BSD license fulfilling
to-do lists. 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l81) at (4,11.8) BSD;
[nodv] (l71) at (0,10.2) 3-Clause License;
[nodv] (l72) at (6.5,10.2) 2-Clause License;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) 
  BSD2-C1 
  BSD3-C1 
  using software only for yourself;
[leaf] (l12) at (1.8,0)  
  BSD2-C2 
  BSD3-C2 
   distributing unmodified software as sources;
[leaf] (l13) at (3.6,0)  
  BSD2-C3  
  BSD3-C3  
   distributing unmodified software as binaries;
[leaf] (l14) at (5.4,0)  
  BSD2-C4  
  BSD3-C4  
   distributing modified program as sources;
[leaf] (l15) at (7.2,0)  
  BSD2-C5  
  BSD3-C5  
   distributing modified program as binaries;
[leaf] (l16) at (9,0)  
  BSD2-C6  
  BSD3-C6  
   distributing modified library as independent sources;
[leaf] (l17) at (10.8,0)  
  BSD2-C7 
  BSD3-C7 
  distributing modified library as independent binaries;
[leaf] (l18) at (12.6,0)  
  BSD2-C8  
  BSD3-C8  
  distributing modified library as embedded sources;
[leaf] (l19) at (14.4,0)  
  BSD2-C9  
  BSD3-C9  
   distributing modified library as embedded binaries;
[edge] (l81) -- (l71);
[edge] (l81) -- (l72);
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l72) -- (l61);
[edge] (l72) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
 
  
BSD3 
BSD-3-Clause
New BSD (3 Clauses)
BSD-3-Clause
BSD-3-Clause-C1: Using the software only for yourself
BSD-3-Clause-C1
  01 
  03 
  06
  09
  
   
  
  
    You are allowed to use any kind of BSD software in any sense and
      in any context without any obligations as long as you do not give the
      software to 3rd parties.
  
  
    
     
. 
  
BSD-3-Clause-C2: Passing the unmodified software as source code
BSD-3-Clause-C2
  02S 
  05S 
  07S 
  
  
  
    
    
  
  
    
  
BSD-3-Clause-C3: Passing the unmodified software as binary
BSD-3-Clause-C3
  02B 
  05B 
  07B 
  
  
    
    
    
  
  
    
  
BSD-3-Clause-C4: Passing a modified program as source code
BSD-3-Clause-C4
  04S
  
  
  
    
    
    
  
  
    
  
BSD-3-Clause-C5: Passing a modified program as binary
BSD-3-Clause-C5
  04B
  
  
  
    
    
    
  
  
    
  
BSD-3-Clause-C6: Passing a modified library as independent source code
BSD-3-Clause-C6
  08S
  
  
  
    
    
  
  
    
  
BSD-3-Clause-C7: Passing a modified library as independent binary
BSD-3-Clause-C7
  08B
  
  
  
    
    
  
  
    
  
BSD-3-Clause-C8: Passing a modified library as embedded source code
BSD-3-Clause-C8
  10S
  
  
  
    
    
    
    
  
  
    
  
BSD-3-Clause-C9: Passing a modified library as embedded binary
BSD-3-Clause-C9
  10B
  
  
  
    
    
    
    
  
  
    
  
BSD2
BSD-2-Clause
Simplified BSD (2 Clauses)
BSD-2-Clause
BSD-2-Clause-C1: Using the software only for yourself
BSD-2-Clause-C1
  01 
  03 
  06
  09
  
   
  
  
    You are allowed to use any kind of BSD software in any sense and
      in any context without any obligations as long as you do not give the
      software to 3rd parties.
  
  
BSD-2-Clause-C2: Passing the unmodified software as source code
BSD-2-Clause-C2
  02S 
  05S 
  07S 
  
  
  
    
    
  
  
BSD-2-Clause-C3: Passing the unmodified software as binary
BSD-2-Clause-C3
  02B 
  05B 
  07B 
  
  
    
    
    
  
  
BSD-2-Clause-C4: Passing a modified program as source code
BSD-2-Clause-C4
  04S
  
  
  
    
    
    
  
  
BSD-2-Clause-C5: Passing a modified program as binary
BSD-2-Clause-C5
  04B
  
  
  
    
    
    
  
  
BSD-2-Clause-C6: Passing a modified library as independent source code
BSD-2-Clause-C6
  08S
  
  
  
    
    
  
  
BSD-2-Clause-C7: Passing a modified library as independent binary
BSD-2-Clause-C7
  08B
  
  
  
    
    
  
  
BSD-2-Clause-C8: Passing a modified library as embedded source code
BSD-2-Clause-C8
  10S
  
  
  
    
    
    
    
  
  
BSD-2-Clause-C9: Passing a modified library as embedded binary
BSD-2-Clause-C9
  10B
  
  
  
    
    
    
    
  
  
Discussions and Explanations
The BSD 2-Clause license has a simple structure: In the
beginning, it generally (permits) redistribution and use in
source and binary forms, with or without modification, [], if one
fulfills the two rules of the license.
The first rule concerns the (re)distribution in the form of source code, 
the second the (re)distribution of binary packages. Here are some
explanations why we translated the rules into which sets of executable tasks:
For the redistribution of source code, the license requires
  that the package must  [] retain the above copyright notice,
  this list of conditions and the following disclaimer.
  Hence, you are not allowed to modify any of the copyright notes which are
  already embedded in the (source) files. And from a logical point of view,
  there must exist an explicit or implicit assertion that the software is
  licensed under the BSD 2-Clause license
   
 
  This is often implemented by simply adding a copy of the license into the
  package. Hence, you are furthermore not allowed to modify these files or
  corresponding text snippets. For our purposes, we translated the bans into the
  following executable task: 
For the redistribution in the form of binary files, the license requires,
  that the licensing elements must be [] (reproduced) in the
  documentation and/or other materials provided with the distribution.
  
  Hence, this is not required as a necessary condition for the (re)distribution
  as source code package. But nevertheless, even for a distribution in the form
  of source code, it is often possible to fulfill this rule, too---e.g., if you
  offer your own download site for source code packages.  In such cases, it is a
  sign of respect to mention the licensing not only inside the packages, but
  also in the text of your site. Because of that, we added the following
  voluntary task for all BSD open source use cases which deal with the
  redistribution in the form of source code: 
Naturally, because the reproduction of the licensing elements in
  the documentation and/or other materials provided with the distribution is
  explicitly required for the redistribution in binary form,
   
  we had to rewrite the facultative task for a distribution in the form of
  source code as a mandatory task for all BSD open source use cases which deals
  with the redistribution in binary form.
In case of (re)distributing the program in the form of binary files, it is
  sometimes not enough, to pass the licensing elements as one has received them.
  If you compile the binary package from the source code, it is not necessarily
  true, that the licensing elements are also automatically generated and
  embedded into the `binary package.' But nevertheless, you have to add the
  copyright notice, the conditions and the disclaimer to this package for acting
  according to the BSD license. Therefore we chose the following form of an
  executable, license fulfilling task for all binary distributions:
Finally, we wished to insert a hint to the general (open source) tradition
  to mention the open source software used and their licenses as part of the
  `copyright widget' of an application. This is not required by the BSD
  license. But it is a general, good tradition. Naturally, because of the
  freedom to use and modify open source software and to redistribute a modified
  version of it, you are also allowed to insert such references, even if they
  are missing. Therefore we added a third voluntary task to honor this tradition
  for all relevant open source use cases.
EPL-1.0 licensed software
licenseEPL
EPL-1.0
Eclipse Public License 1.0
EPL
The Eclipse Public License clearly distinguishes the distribution in the form of
source code from that in the form of binaries: First, it allows to
distribute Eclipse licensed programs in source code and in
object code.§3 Then it specifies under which conditions one may
distribute the program as a set of binaries.§3 top area One of
these conditions is---roughly speaking---that the distributor makes the sources
available too.§3 mid area More precisely, the EPL-1.0 has to be taken as a
license with weak copyleft ( , p. EPL).
The other conditions refer to the distribution in general---no matter what form
or state is used.§3 bottom area So, taken as whole, the EPL-1.0 mainly
focusses on the distribution of software.  Thus, for finding the relevant, easy
to process task lists, the following EPL-1.0 specific open source use case 
structure
   For details of the general OSUC finder  ,
    pp. OsucTokens and OsucDefinitionTree
can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l71) at (4,10) EPL-1.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) EPL-1.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  EPL-1.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  EPL-1.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  EPL-1.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  EPL-1.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  EPL-1.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  EPL-1.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  EPL-1.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  EPL-1.0-C9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
 
  
  
 
   
 
 
 
EPL-1.0-C1: Using the software only for yourself
EPL-1.0-C1
  01 
  03 
  06 
  09
  that you received EPL-1.0 licensed software, that you will use it
  only for yourself, and that you do not hand it over to any 3rd party in any
  sense. 
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
    You are allowed to use any kind of EPL-1.0 software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
    
    
  
EPL-1.0-C2: Passing the unmodified software as source code
EPL-1.0-C2
  02S 
  05S
  07S 
  that you received EPL-1.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified source code
  files or as unmodified source code package. In this case it makes no
  difference if you distribute a program, an application, a server, a snippet, a
  module, a library, or a plugin as an independent or as an embedded unit. 
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    source code  
    
  
  
    
    
  
EPL-1.0-C3: Passing the unmodified software as binaries 
EPL-1.0-C3
  02B 
  05B 
  07B 
  that you received EPL-1.0 licensed software which you are now
  going to distribute to third parties in the form of unmodified binary files or
  as unmodified binary package. In this case it does not matter if you distribute
  a program, an application, a server, a snippet, a module, a library, or a
  plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
  
     
    binary
    the software
    
    EPL-1.0-C2
    
  
  
    
    
  
EPL-1.0-C4: Passing a modified program as source code
EPL-1.0-C4
  04S 
  that you received an EPL-1.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package.
  04S
  
    
    
    
    
     
    source code 
    
  
 
  
    
    
  
EPL-1.0-C5: Passing a modified program as binary
EPL-1.0-C5
  04B
  that you received an EPL-1.0 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  04B
  
     
    
    
    
    binary 
    the program
    
    EPL-1.0-C4
    
  
  
    
    
  
EPL-1.0-C6: Passing a modified library as independent source code
EPL-1.0-C6
  08S
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  08S
  
    
    
    
    
     
    source code
    
  
  
    
    
  
EPL-1.0-C7: Passing a modified library as independent binary
EPL-1.0-C7
  08B
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  08B
  
     
    
    
    
    binary
    the modified library
    
    EPL-1.0-C6
    
  
  
    
    
  
EPL-1.0-C8: Passing a modified library as embedded source code
EPL-1.0-C8
  10S
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  10S
  
    
    
    
    
    source code 
     
    source code
    
  
  
    
    
  
EPL-1.0-C9: Passing a modified library as embedded binary
EPL-1.0-C9
  10B
  that you received an EPL-1.0 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  10B
  
     
    
    
    binary 
    the embedded library
    
    
    EPL-1.0-C8
    binary
    
  
  
    
    
  
Discussions and Explanations
The EPL-1.0 contains a succinct section Requirements§3
complemented by some definitions concerning a Commercial
Distribution§4: First, it describes what a distributor must do for
correctly distributing an Eclipse licensed program as a set of binaries. Then,
it explains, what must be done to comply with the license when distributing the
software as source code.  Finally, it lists two conditions which must be
fulfilled in any case.§3  
With respect to this structure, we can discover the following tasks:
  The EPL-1.0 generally requires that Contributors may not remove or
    alter any copyright notices contained within the Program§3 where
    the word `Contributor' has to be read as any person or entity that
    distributes the Program, and the word `Program' denotes the
    initial contribution and all its modifications.§1 
    Similar to the EUPL and at least in a very strict reading, the EPL-1.0 does not
    limit these requirements to the distribution of the software
    (2others). But in practice it will be difficult to control the
    compliant use of the software in those cases where one uses the software
    only for oneself. But opposite to, for example, the EUPL, the EPL-1.0 clearly
    contains this interdiction. The  solves this practical inconsistence
    duplicating the message: On the one hand, it rewrites the negative condition
    as a mandatory positive assertion for the 2others use cases (EPL-1.0-C2 --
    EPL-1.0-C9). This should emphasize the activity to retain the copyright
    notes in exact the form one has received them. On the other hand, the 
    inserts the corresponding interdiction into the `prohibits' section of the
    4yourself use cases (EPL-1.0-C1 -- EPL-1.0-C9).
  
  Furthermore, the EPL-1.0 requires that each Contributor must
    identify itself as the originator of its Contributions [] in a manner
    that reasonably allows subsequent Recipients to identify the originator of
    the Contribution,§3 In this case, `Contribution' has to be read
    as the initial code and documention together with all subsequent
    modifications of these parts.§1 To fulfill this condition
    faithfully, a developer must mark and describe his modifications of the
    source code within this source code; and the distributor must describe these
    modifications on the more general level of software features in a file
    sometimes called CHANGES. At a first glance, the requirement to document the
    source code modifications within the source code seems to be restricted to
    the use cases which concern the distribution of a modified EPL-1.0 software in
    the form of source code. But the EPL-1.0 allows the distribution in the form of
    binaries only if the distributor also states where one can obtain the
    correspoding code.§3 So, distributing the binaries implies the
    distribution of the source code.  Therefore the  inserts the two
    requirements as mandatory clauses into all the use cases concerning the
    distribution of a modified EPL-1.0 software (EPL-1.0-C4 -- EPL-1.0-C9).
  
  For all distributions in the form of source code the EPL-1.0 requires that
    the software [] must be made available under this (Eclipse
    Public License 1.0) Agreement and that [] a copy of this
    Agreement must be included with each copy of the Program.§3 
    Thus, the  inserts a respective mandatory clause into the use cases
    (EPL-1.0-C4, EPL-1.0-C6, EPL-1.0-C8). But the EPL-1.0 is a license with a weak copyleft
     . 
    Therefore, this conditions does not cover the overarching program which uses
    the embedded library (EPL-1.0-C8).
    
  Additionally, the EPL-1.0 allows to distribute the software in the form
    of binaries if the distributor [] effectively disclaims on
    behalf of all Contributors all warranties and conditions [] (and)
    effectively excludes on behalf of all Contributors all liability for
    damages [] in the broadest sense.§3 This limitation of
    liability is very important to the EPL-1.0. Thus, it further specifies and
    explains this aspect once more in another section titled Commercial
    Distribution. There, this aspect is no longer focussed only on a
    distribution in the form of binaries.§4 So the  inserts a
    mandatory clause into all use cases concerning the distribution that the
    paragraph of No Warranty§5 and the Disclaimer
    of Liability§6 of the EPL-1.0 must explicitly be present in the
    documentation of distribution package and---if technically possible---
    presented by the copyright screen.   
  
  Aside from that, the EPL-1.0 allows the distribution of the software in the
    form of binaries only if the distributor clearly [] states that
    the source code for the program is available from such Contributor
    (distributor) [] and if he additionally [] informs
    licensees how to obtain it in a reasonable manner []§3 
    This requirement can only be fulfilled seriously if the distributor himself
    offers the source code via a repository. It is not sufficient to point to
    any external download repository in the world wide web. Thus,---for all use
    cases concerning the distribution in the form of binaries---the 
    follows the respective requirement introduced by the EPL-1.0 (EPL-1.0-C3, EPL-1.0-C5,
    EPL-1.0-C7, EPL-1.0-C9).  
  
  Moreover, one has clearly to state that the previous rule implies a real
    source code distribution which therefore must follow the rules of
    distributing the software. Thus, the  requires in all cases of a binary 
    distribution to execute also the task-lists of the respective source code
    use cases. 
 
 	Finally, the EPL-1.0 contains a patent clause stating that if
 	any recipient institutes patent litigation against any entity []
 	alleging that the Program itself [] infringes such Recipient's
 	patent(s), then such Recipient's rights granted [by the EPL-1.0] shall
 	terminate []§7. Based on this fact, the  generally
 	(EPL-1.0-C1 -- EPL-1.0-C9) interdicts to legally fight against patents linked to the software.
EUPL-1.1 licensed software
licenseEUPL 
EUPL-1.1
European Union Public License 1.1
1.1
EUPL
The European Union Public License explicitly distinguishes the distribution of
the source code from that of the binaries: In the chapter Communication
of the Source Code, it allows to provide the Work either in its Source
Code form, or as Executable Code.§3 But if a piece of EUPL-1.1 licensed
software is distributed as binary package, then the license additionally
requires that the distributor either [] provides a
machine-readable copy of the Source Code [] directly together with the
binaries§5 or that he [] indicates [] a
repository where the Source Code is easily and freely accessible for as long 
as the Licensor continues to distribute [] the Work.§3 For
respecting this conditions it is irrelevant whether the software has been
modified or not and all the other obligations of the licensee refer to
both forms.§5
There is a particular aspect which has to be considered for acting in
accordance to the EUPL-1.1: Taken literally, the EUPL is a license with a weak
copyleft, no doubt. But this happens only a result of the fact that the EUPL-1.1
allows the licensee to relicense the software by following the conditions of the
Compatibility clause§5 and an license listed in an
appendix, which also includes some licenses with a weak copyleft.
   ( , p. EUPL) 
But, with respect to question how to fulfill the license best, it is safer to
treat the EUPL-1.1 as a license with a strong copyleft. Concerning the use of an
unmodified or a modified library as an embedded component, a license with 
a strong copyleft implies that the application which is using the
(un)modified library has also to be licensed under the same conditions as the
library itself. 
Thus, to find a simple to process task lists, use the following EUPL-1.1
specific open source use case structure:
   For details of the general OSUC finder  ,
    pp. OsucTokens and OsucDefinitionTree 
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=1.5cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
slimleaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l801) at (4,10.2) EUPL-1.1;
[nodb] (l601) at (0,8.6) recipient: 
 4yourself;
[nodb] (l602) at (7.5,8.6) recipient: 
 2others;
[nodb] (l501) at (4,7) state: 
 unmodified;
[nodb] (l502) at (11,7) state: 
 modified;
[nodb] (l401) at (2.25,5.4) type: 
 proapse or snimoli;
[nodb] (l402) at (5.4,5.4) type: 
 snimoli;
[nodb] (l403) at (8.4,5.4) type: 
 proapse;
[nodb] (l404) at (12.8,5.4) type: 
 snimoli;
[nodb] (l301) at (2.25,3.8) context: 
 independent;
[nodb] (l302) at (5.4,3.8) context: 
 embedded;
[nodb] (l303) at (8.4,3.8) context: 
 independent;
[nodb] (l304) at (11.3,3.8) context: 
 independent;
[nodb] (l305) at (14.3,3.8) context: 
 embedded;
[nods] (l201) at (1.45,2.2) form: source;
[nods] (l202) at (3.0,2.2) form: binary;
[nods] (l203) at (4.6,2.2) form: source;
[nods] (l204) at (6.2,2.2) form: binary;
[nods] (l205) at (7.7,2.2) form: source;
[nods] (l206) at (9.1,2.2) form: binary;
[nods] (l207) at (10.5,2.2) form: source;
[nods] (l208) at (11.9,2.2) form: binary;
[nods] (l209) at (13.4,2.2) form: source;
[nods] (l210) at (15.0,2.2) form: binary;
[slimleaf] (l101) at (0,0) EUPL-1.1-C1 using software only
for yourself;
[leaf] (l102) at (1.45,0)  EUPL-1.1-C2  distributing unmodified
software as independent sources;
[leaf] (l103) at (3.0,0)  EUPL-1.1-C3   distributing unmodified
software as independent binaries;
[leaf] (l104) at (4.6,0)  EUPL-1.1-C4  distributing unmodified
library as embedded sources;
[leaf] (l105) at (6.2,0)  EUPL-1.1-C5   distributing unmodified
library as embedded binaries;
[slimleaf] (l106) at (7.7,0)  EUPL-1.1-C6   distributing modified
program as sources;
[slimleaf] (l107) at (9.1,0)  EUPL-1.1-C7   distributing modified
program as binaries;
[slimleaf] (l108) at (10.5,0)  EUPL-1.1-C8   distributing modified
library as independent sources;
[slimleaf] (l109) at (11.9,0)  EUPL-1.1-C9 distributing modified
library as independent binaries;
[leaf] (l110) at (13.4,0)  EUPL-1.1-CA  distributing
modified library as embedded sources;
[leaf] (l111) at (15,0)  EUPL-1.1-CB   distributing modified
library as embedded binaries;
[edge] (l801) -- (l601);
[edge] (l801) -- (l602);
[edge] (l602) -- (l501);
[edge] (l602) -- (l502);
[edge] (l501) -- (l401);
[edge] (l501) -- (l402);
[edge] (l502) -- (l403);
[edge] (l502) -- (l404);
[edge] (l401) -- (l301);
[edge] (l402) -- (l302);
[edge] (l403) -- (l303);
[edge] (l404) -- (l304);
[edge] (l404) -- (l305);
[edge] (l301) -- (l201);
[edge] (l301) -- (l202);
[edge] (l302) -- (l203);
[edge] (l302) -- (l204);
[edge] (l303) -- (l205);
[edge] (l303) -- (l206);
[edge] (l304) -- (l207);
[edge] (l304) -- (l208);
[edge] (l305) -- (l209);
[edge] (l305) -- (l210);
[edge] (l601) -- (l101);
[edge] (l201) -- (l102);
[edge] (l202) -- (l103);
[edge] (l203) -- (l104);
[edge] (l204) -- (l105);
[edge] (l205) -- (l106);
[edge] (l206) -- (l107);
[edge] (l207) -- (l108);
[edge] (l208) -- (l109);
[edge] (l209) -- (l110);
[edge] (l210) -- (l111);
tikzpicture
 
 
 
 
  
EUPL-1.1-C1: Using the software only for yourself
EUPL-1.1-C1
  01
  03
  06
  09
  that you received EUPL-1.1 licensed software, that you will use it
  only for yourself and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
 
  
    You are allowed to use any kind of EUPL-1.1 software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
  
    
  
EUPL-1.1-C2: Passing the unmodified software as independent sources
EUPL-1.1-C2
  02S
  05S
  that you received EUPL-1.1 licensed software which you are now going
  to distribute to third parties as an independent unit and in the form of
  unmodified source code files or as unmodified source code package. In this
  case it makes no difference if you distribute a program, an application, a
  server, a snippet, a module, a library, or a plugin as an independent or as an
  embedded unit.
  OSUC-02S, OSUC-05S 
 
  
    
    
    
  
  
    
  
EUPL-1.1-C3: Passing the unmodified software as independent binaries 
EUPL-1.1-C3
  02B
  05B
  that you received EUPL-1.1 licensed software which you are now going to
  distribute to third parties as an independent unit and in the form of
  unmodified binary files or as unmodified binary package. In this case it does
  not matter if you distribute a program, an application, a server, a snippet, a
  module, a library, or a plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B 
 
  
     
    
    
    
    EUPL-1.1-C2
    
  
  
    
  
EUPL-1.1-C4: Passing the unmodified library as embedded sources
EUPL-1.1-C4
  07S
  that you received a EUPL-1.1 licensed snippet, module or
  library which you are now going to distribute to third parties as an embedded
  component of a larger unit and in the form of unmodified source code files or as
  unmodified source code package.
  OSUC-07S 
 
  
    
    
    
    
    
  
  
    
  
EUPL-1.1-C5: Passing the unmodified library as embedded binaries 
EUPL-1.1-C5
  07B
  that you received a EUPL-1.1 licensed snippet, module or
  library which you are now going to distribute to third parties as an embedded
  component of a larger unit and in the form of unmodified binary files or as
  unmodified binary package.
  OSUC-07B 
 
  
     
    
    
    
    
    EUPL-1.1-C4
    
    
  
  
    
  
EUPL-1.1-C6: Passing a modified program as source code
EUPL-1.1-C6
  04S 
  that you received a EUPL-1.1 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package. 
  OSUC-04S 
 
  
    
    
    
    
    
    
  
 
  
    
  
EUPL-1.1-C7: Passing a modified program as binary
EUPL-1.1-C7
  04B
  that you received a EUPL-1.1 licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  OSUC-04B 
 
  
     
    
    
    
    
    
    EUPL-1.1-C6
    
    
  
  
    
  
EUPL-1.1-C8: Passing a modified library as independent source code
EUPL-1.1-C8
  08S
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  OSUC-08S 
 
  
    
    
    
    
    
    
  
  
    
  
EUPL-1.1-C9: Passing a modified library as independent binary
EUPL-1.1-C9
  08B
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  OSUC-08B 
 
  
     
    
    
    
    
    
    EUPL-1.1-C8
    
    
  
  
    
  
EUPL-1.1-CA: Passing a modified library as embedded source code
EUPL-1.1-CA
  10S
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  OSUC-10S 
 
  
    
    
    
    
    
    
    
    
  
  
    
  
EUPL-1.1-CB: Passing a modified library as embedded binary
EUPL-1.1-CB
  10B
  that you received a EUPL-1.1 licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  OSUC-10B 
 
  
    
    
    
    
    
    EUPL-1.1-CA
    
    
    
    
  
  
    
  
Discussions and Explanations
  
The EUPL-1.1 generally [] does not grant permission to use
  the trade names, trademarks, service marks, or names of the Licensor, except
  as required for reasonable and customary use in describing the origin of the
  Work and reproducing the content of the copyright notice.§5 
  Therefore, the  genreally interdicts (EUPL-1.1-C1 -- EUPL-1.1-CB) to promote any
  service or product based on this software by such elements. 
The EUPL-1.1 generally requires that [] the Licensee shall
  keep intact all copyright, patent or trademarks notices and all notices that
  refer to the Licence and to the disclaimer of warranties.§5 
  In a very strict reading, the EUPL-1.1 does not limit this requirement to the
  distribution of the software. But in practise, it will be impossible to
  control the compliant use of the software in those cases (4yourself)
  unless you also start to distribute the software. Therefore the  only
  inserts this requirement as a mandatory clause only for the 2others use 
  cases (EUPL-1.1-C2 -- EUPL-1.1-CB). 
  
The EUPL-1.1 also requires to [] include [] a copy of
  the (EUPL-1.1) Licence with every (distributed) copy of the Work.§5
  Therefore, all 2others use cases contain the respective mandatory
  condition (EUPL-1.1-C2 -- EUPL-1.1-CB).
  
Additionally, the EUPL-1.1 requires that the licensee who
  distributes a modified work [] must cause any Derivative Work 
  to carry prominent notices stating that the Work has been modified and the
  date of modification.§5 
  Thus, the  integrates the mandatory requirement to generate (update) a
  respective notice file into all `modification' use cases and recommends to mark
  all modifications in the source code (EUPL-1.1-C6 -- EUPL-1.1-CB).
  
Furthermore, the EUPL-1.1 requires that any distributor of the software
  [] provide a machine-readable copy of the Source Code []
  by [] (indicating) a repository where this Source will be
  easily and freely available for as long as the Licensee continues to
  distribute [] the Work.
   
 
  Therefore the  inserts a respective requirement into the task list of all
  cases concerning a binary distribution (EUPL-1.1-C3, EUPL-1.1-C7, EUPL-1.1-C9, and EUPL-1.1-CB)
  
Finally, the EUPL-1.1 contains a copyleft clause stating that if a
  [] Licensee distributes [] copies of the Original Works
  or Derivative Works based upon the Original Work, this Distribution [...] will
  be done under the terms of this (EUPL-1.1) Licence []. In all the use cases
  which do not concern the use of an embedded component (EUPL-1.1-C2 -- EUPL-1.1-C9) this
  copyleft clause is already fulfilled by either distributing the modified
  sources themselves or by making them accessible via a repository. In those
  cases where the licensee distributes an program that uses an embedded EUPL-1.1
  licensed component (EUPL-1.1-CA -- EUPL-1.1-CB), in general, the code of the embedding
  program must also be distributed. Thus, with respect to the use case (EUPL-1.1-CA)
  this is already fulfilled by definition. Therefore, the  only mentions
  this default view in the case EUPL-1.1-CB implying a strong copyleft effect.
   
GPL licensed software
Both versions of the GNU General Public License explicitly distinguish the
distribution of the source code from that of the binaries: On the one hand, the
GPL-2.0 mainly talks about copying and distributing the source
code,§1, §2 but also mentions the specific conditions for
[] (copying) and (distributing) the Program [] in object
code or executable form []§3 On the other hand, the GPL-3.0
describes the Basic Permissions and the conditions for
Conveying Verbatim Copies or for Conveying Modified Source
Versions§2, §4, §5 before it explains the rules for
Conveying Non-Source-Forms.§2, §4, §5  
GPL-2.0 and GPL-3.0 mainly talk about copying and distributing the
software; private use is nearly completely unspecified: The GPL-2.0 lists its
`restrictions' only with respect to the act of copying and distributing
copies of the program§1, §2, §4 et passim; emphasize by
KR while the GPL-3.0 explicitly specifies that one [] may
make, run and propagate covered works that (one does) not convey, without
conditions so long as (the) license otherwise remains in
force.§2 
As licenses with a strong copyleft, they require that any application that
contains a GPL-licensed library must itself be licensed under the same
conditions as the library.
 
Finally, the GPL-2.0 and the GPL-3.0 aim for the same results and share the
same spirit by requiring nearly the same task to be performed for fulfilling the
license conditions.  Therefore it is appropriate to cover both versions in the
same chapter and to offer a common specialized GPL open source use case
structure for quickly finding the appropriate task list.
   For details of the general OSUC finder  ,
    pp. OsucTokens and OsucDefinitionTree
However, the task lists themselves will be kept separate.
In the following diagram, GPL-*-C1 (GPL-*-C2, , GPL-*-CB) is either
GPL-2.0-C1 (and so forth), if you are looking for the GPL-2.0 use case, or
GPL-3.0-C1, for the GPL-3.0 use case.
GPL2.03.0
 
 
 
GPL2 
GPL-2.0
General Public License Version 2
GPL
GPL-Using the software only for yourself
GPL-
  01 
  03
  06 
  09
  
  
    You are allowed to use any kind of GPL-software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
GPL-Passing the unmodified software as independent sources
GPL-
  02S
  05S
  
  
    
    
    
    
    
  
  
GPL-Passing the unmodified software as independent binaries 
GPL-
  02B 
  05B
  
  
    
    
    
    
    
    
    GPL-
    
  
  
GPL-Passing the unmodified library as embedded sources
GPL-
  07S 
  
  
    
    
    
    
    
    
    
  
  
GPL-Passing the unmodified library as embedded binaries 
GPL-
  07B 
  
  
    
    
    
    
    
    
    
    
    GPL-
    
  
  
GPL-Passing a modified program as source code
GPL-
  04S 
  
  
    
    
    
    
    
    
    
    
    
  
  
GPL-Passing a modified program as binary
GPL-
  04B
  
  
    
    
    
    
    
    
    
    
    
    GPL-
    
    
  
  
GPL-Passing a modified library as independent source code
GPL-
  08S
  
  
    
    
    
    
    
    
    
    
  
  
GPL-Passing a modified library as independent binary
GPL-
  08B
  
  
    
      
    
    
    
    
    GPL-
    
    
    
    
  
  
GPL-Passing a modified library as embedded source code
GPL-
  10S
  
  
    
    
    
    
    
    
    
    
    
    
  
  
GPL-Passing a modified library as embedded binary
GPL-
  10B
  
  
    
    
    
    
    
    
    GPL-
    
    
    
    
    
    
  
  
GPL3 
GPL-3.0
General Public License Version 3
GPL
GPL-Using the software only for yourself
GPL-
  01 
  03
  06 
  09
  
  
    You are allowed to use any kind of GPL software in any sense and in
      any context without being obliged to do anything as long as you do not
      give the software to third parties.
  
  
    
  
GPL-Passing the unmodified software as independent sources
GPL-
  02S
  05S
  
  
    
    
    
    
    
  
  
    
  
GPL-Passing the unmodified software as independent binaries 
GPL-
  02B 
  05B
  
  
    
    
    
    
    
    
    GPL-
    
  
  
    
  
GPL-Passing the unmodified library as embedded sources
GPL-
  07S 
  
  
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing the unmodified library as embedded binaries 
GPL-
  07B 
  
  
    
    
    
    
    
    
    
    
    GPL-
    
  
  
    
  
GPL-Passing a modified program as source code
GPL-
  04S 
  
  
    
    
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing a modified program as binary
GPL-
  04B
  
  
    
    
    
    
    
    
    
    
    
    GPL-
    
    
  
  
    
  
GPL-Passing a modified library as independent source code
GPL-
  08S
  
  
     
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing a modified library as independent binary
GPL-
  08B
  
  
    
      
    
    
    
    
    GPL-
    
    
    
    
  
  
    
  
GPL-Passing a modified library as embedded source code
GPL-
  10S
  
  
    
    
    
    
    
    
    
    
    
    
  
  
    
  
GPL-Passing a modified library as embedded binary
GPL-
  10B
  
  
    
    
    
    
    
    
    GPL-
    
    
    
    
    
    
  
  
    
  
Discussions and Explanations
 
The GPL-2.0 allows to [] copy and (to) distribute verbatim copies
of the Program's complete source code as you receive it [...] provided that
you [a] conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; [b] keep intact all the notices
that refer to this License and to the absence of any warranty; and [c]
distribute a copy of this License along with the Program.§1 The
GPL-2.0 also allows to [] copy and distribute []
modifications (of the Program or any portion of it) [] under the terms
of Section 1§2 while it allows to distribute binaries
under the terms of Sections 1 and 2.§4 But the GPL-2.0
does not require any tasks if you are using the work only for yourself. Thus,
the quoted conditions of Section 1 are mandatory for all use cases
concerning the distribution of an GPL-2.0 licensed work (GPL-2.0-C2 --
GPL-2.0-CB)
  
The GPL-3.0 uses a similar structure to establish the same requirements: In §4
it allows to [] convey verbatim copies of the Program's source
code as you receive it [] provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice; keep
intact all notices stating that this License and any non-permissive terms
added in accord with section 7 apply to the code; keep intact all notices of
the absence of any warranty; and give all recipients a copy of this License
along with the Program. §5 also allows to [] convey []
modifications [] under the terms of section 4 [] and §6 gives
permission to [] convey a covered work in object form under the
terms of sections of 4 and 5.§4, §5, §6 In contrast to the
GPL-2.0, the GPL-3.0 explicitly states that one [] may make, run
and propagate covered works that (one) (does) not convey [distribute], without
conditions so long as (the GPL-3.0) license otherwise remains in
force.§2
Moreover, giving a package to a third party for getting a modified version back
has not to be taken as a case of distribution if the modification has only been
executed on behalf and only for the purpose of the purchaser and if the modified
version is not distributed to any third party.§2 If one collects
all these GPL-3.0 statements together, than one may conclude that the tasks
which fulfill the corresponding GPL-2.0 requirements together also fit the
GPL-3.0 conditions.
  
The GPL-2.0 allows to [] copy and (to) distribute the Program (or
a work based on it []) in object code or executable form [] provided
that you accompany it with the complete corresponding machine-readable source
code [] on a medium customarily used for software
interchange.§3, §3a As a substitution for this basic condition,
the GPL-2.0 allows to accompany the binary distribution package
[] with a written offer, valid for at least three years, to give
any third party, for a charge no more than your cost of physically performing
source distribution, a complete machine-readable copy of the corresponding
source code [] on a medium customarily used for software
interchange.§3b The  construes the common technique to
download files from the Internet as a distribution on a medium [being
today] customarily used for software interchange. Therefore, the  requires
for all open source use cases that refer to the distribution of binaries
(GPL-2.0-C3, GPL-2.0-C7, GPL-2.0-C9, GPL-2.0-CB) to make the corresponding
source code of the library itself accessible via an Internet repository under
your own control. 
  
The GPL-3.0 also explicitly requires to make the source code accessible in case
of distributing binaries. But opposite to the GPL-2.0, the GPL-3.0 explicitly
offers the option of giving [] access to copy the Corresponding
Source from a network server at no charge as a means to fulfill the
conditions.§6 and §6b So again, the tasks which ensure to act in
accordance to the GPL-2.0 license in case of distributing binaries, also fulfill
the conditions of the GPL-3.0.
The weakness that in this case third parties [which have received the
binaries] are not compelled to copy the source code [] is a concession
made by the GPL-2.0.§3, at the end But the necessity to offer the
source code via a repository controlled by yourself may generally not be
circumvented: The GPL-2.0 allows to redistribute a link to an external source
code repository only in case of noncommercial
distributions.§3c 
  
Both, the GPL-2.0 and the GPL-3.0 allow you to [] modify your
copy or copies of the Program or any portion of it [] and (to) copy and
distribute such modifications [] only under very similar restrictions and
conditions:§2 
First, modified files must be marked as modifications and the date of the
  modification.§2§5 These conditions must be respected by all
  open source use cases concerning the distribution of the modified work
  [GPL-2.0-C6/GPL-3.0C6 -- GPL-2.0-C9/GPL-3.0-C9], because even if one primarily
  intends to distribute binaries, one has also to deliver the source code. The
   captures this requirement in the mandatory condition to mark each
  modified file and the voluntary condition to update / generate a general
  changelog.
    
Second, both versions of the GPL require that all copies of the modified
  software which are using an interactive interface or a method to display
  messages must [] print or display an announcement including an
  appropriate copyright notice and a notice that there is no warranty []
  and that users may redistribute the program under these conditions, and
  telling the user how to view a copy of this License.§2c§5d
  The  rewrites this condition in the form that the work shall let its
  copyright dialog clearly reproduce the content of the existing copyright
  notices, the software name, a link to its homepage, the respective disclaimer
  of warranty, and a link to the GPL-2.0-file (or GPL-3.0-file, resp.), which
  has to be delivered together with the software.
  
  These conditions have to be respected if one redistributes the received and
  then modified programs (GPL-2.0-C6, GPL-2.0-C7, GPL-3.0-C6, GPL-3.0-C7) or if
  one distributes one's own programs which are using (modified) libraries as
  embedded components (GPL-2.0-CA, GPL-2.0-CB, GPL-3.0-CA, GPL-3.0-CB). For
  those open source use cases that concern the redistribution of received and
  modified libraries, etc., the  does not mention these requirements
  because libraries, plugins, or snippets normally do not have their own
  copyright dialogs.  
    
Third, the GPL requires to  [] cause any work (being
  distributed or published), that in whole or in part contains or is derived
  from the Program or any part thereof, to be licensed as a whole at no charge
  to all third parties under the terms of this (GPL.)§2b§5c
  This requirement does not depend of the form in which the software is
  distributed. The  adopts this statement in the following way:
  
  For all open source use cases which concern the distribution (GPL-2.0-C2
    GPL-2.0-CB, GPL-3.0-C2 GPL-3.0-CB), the  rewrites this
    condition as the mandatory requirement to retain all existing licensing
    elements.
      
  For all use cases which deal with the distribution of a modified version
    of the software (GPL-2.0-C6 GPL-2.0-CB, GPL-3.0-C6 
    GPL-3.0-CB), the OSliC adds the requirement to organize the modifications in
    a way that they are covered by the respective GPL-2.0 or GPL-3.0 licensing
    statements.
      
  For the use case which deal with the distribution of an embedded library
    (GPL-2.0-C4, GPL-2.0-C5, GPL-2.0-CA, GPL-2.0-CB, GPL-3.0-C4, GPL-3.0-C5,
    GPL-3.0-CA, GPL-3.0-CB) the  requires also to license the on-top
    development under the terms of the respective GPL-2.0 or GPL-3.0 license.
    
   
Finally, as parts of those task lists which concern the distribution in
  the form of binaries, the  reminds the reader also to execute the
  corresponding source code use cases because distributing the binaries without
  making the corresponding sources accessible is not allowed by the GPL.
  
LGPL licensed software
Both versions of the GNU Lesser General Public License explicitly distinguish
the distribution of the source code from that of the binaries: On the one hand,
the LGPL-2.1 mainly talks about copying and distributing the source
code.§1, §2, §5, §6 But it also directly mentions the specific
conditions for [] (copying) and (distributing) the Library
[] in object code or executable form []§4 On the other
hand, the LGPL-3.0 and the GPL-3.0---which have to be considered together
because the GPL-3.0 is included into the LGPL-3.0just before
  §0--- treat the distribution of source code and the distribution of object
code as different aspects of the same phenomenon
   The GPL-3.0 contains a specific section named 
    Conveying Non-Source Forms which describes the conditions to
    [] convey a covered work in object code form []
    ([cf.][wp. §6]Gpl30OsiLicense2007a), while the LGPL-3.0
    explicitly deals with the 
    object code incorporating material from (the) library header files
    ([cf.][wp. §3]Lgpl30OsiLicense2007a).
Additionally, LGPL-2.1 and LGPL-3.0 mainly talk about copying and distributing
the software; the private use is almost complete unspecified.
   The LGPL-2.1 lists its `restrictions' only with respect to the act
    of copying and distributing copies of the library 
    ([cf.][wp. §1, §2, §4 et passim]Lgpl21OsiLicense1999a) 
    while the GPL-3.0 explicitly specifies that one [] may make,
    run and propagate covered works that (one does) not convey, without
    conditions so long as (the) license otherwise remains in force 
    ([cf.][wp. §2]Gpl30OsiLicense2007a).
Finally, the LGPL-2.1 and the LGPL-3.0 aim for the same results and share the
same spirit by requiring nearly the same license fulfilling tasks. Therefore it
seems appropriate to cover both versions in one chapter
   The exception concerns the distribution of a modified program,
    application, or server under the terms of the LGPL 
and to offer the same LGPL specific open source use case structure
   For details of the general OSUC finder  ,
    pp. OsucTokens and OsucDefinitionTree 
for finding the corresponding task lists: 
 
LGPL2.13.0
 
 
 
  
 
 
LGPL2 
LGPL-
GNU Lesser General Public License 
LGPL
LGPL-Using the software only for yourself
LGPL-
  01 
  03
  06 
  09
  
  
  
    You are allowed to use any kind of LGPL- licensed software
      in any sense and in any context without being obliged to do anything as
      long as you do not give the software to third parties.
  
  
LGPL-Passing the unmodified software as independent source code
LGPL-
  02S 
  05S 
  
  
    
    
    
    
    
  
  
LGPL-Passing the unmodified software as independent binaries
LGPL-
  02B 
  05B 
  
  
    
    
    
    
    
    
    LGPL-
    
  
  
LGPL-Passing the unmodified library as embedded source code
LGPL-
  07S 
  
  
    
    
    
    
    
  
  
LGPL-Passing the unmodified library as embedded binaries
LGPL-
  07B 
  
  
    
    
    
    
    
    
    LGPL-
    
    
  
  
LGPL-2.1-C6: Passing a modified program as source code
LGPL-2.1-C6
  04S 
  
  
  
    
  
  
    
  
LGPL-2.1-C7: Passing a modified program as binary
LGPL-2.1-C7
  04B 
  
  
    
  
  
    
  
LGPL-Passing a modified library as independent source code
LGPL-
  08S
  
  
    
    
    
    
    
      
    
    
  
  
    to modify the library in a way that it is no longer a library
  
LGPL-Passing a modified library as independent binary
LGPL-
  08B
  
  
    
    
    
    
    
    LGPL-
    
    
    
      
      
  
  
    to modify the library in a way that it is no longer a library.
  
LGPL-Passing a modified library as embedded source code
LGPL-
  10S
  
  
    
    
    
    
    
    
    
      
    
    
  
  
    to modify the library in a way that it is no longer a library.
  
LGPL-Passing a modified library as embedded binary
LGPL-
  10B
  
  
    
    
    
    
    
    LGPL-
    
    
    
    
    
      
    
    
  
  
    to modify the library in a way that it is no longer a library.
  
LGPL3 
LGPL-
GNU Lesser General Public License 
LGPL
LGPL-Using the software only for yourself
LGPL-
  01 
  03
  06 
  09
  
  
  
    You are allowed to use any kind of LGPL- licensed software
      in any sense and in any context without being obliged to do anything as
      long as you do not give the software to third parties.
  
  
    
  
LGPL-Passing the unmodified software as independent source code
LGPL-
  02S 
  05S 
  
  
    
    
    
    
    
  
  
    
  
LGPL-Passing the unmodified software as independent binaries
LGPL-
  02B 
  05B 
  
  
    
    
    
    
    
    
    LGPL-
    
  
  
    
  
LGPL-Passing the unmodified library as embedded source code
LGPL-
  07S 
  
  
    
    
    
    
    
    
  
  
    
  
LGPL-Passing the unmodified library as embedded binaries
LGPL-
  07B 
  
  
    
    
    
    
    
    
    
    LGPL-
    
    
  
  
    
  
LGPL-3.0-C6: Passing a modified program as source code
LGPL-3.0-C6
  04S 
  
  
  
    
    
    
    
    
    
    
    
    
  
 
  
    
  
LGPL-3.0-C7: Passing a modified program as binary
LGPL-3.0-C7
  04B 
  
  
    
    
    
    
    
    
    
    
      
    LGPL-
      
    
  
  
    
  
LGPL-Passing a modified library as independent source code
LGPL-
  08S
  
  
    
    
    
    
    
    
      
    
  
  
    
  
LGPL-Passing a modified library as independent binary
LGPL-
  08B
  
  
    
    
    
      
    
    
    LGPL-
    
    
    
      
  
  
    
  
LGPL-Passing a modified library as embedded source code
LGPL-
  10S
  
  
    
    
    
    
    
    
    
      
    
    
  
  
    
  
LGPL-Passing a modified library as embedded binary
LGPL-
  10B
  
  
    
    
    
    
    
    LGPL-
    
    
    
    
    
      
    
    
  
  
    
  
Discussions and Explanations
 
  
The LGPL-2.1 allows to [] copy and (to) distribute
  verbatim copies of the Library's complete source code as you receive it [...]
  provided that you 
  [a] conspicuously and appropriately publish on each copy an appropriate
  copyright notice and disclaimer of warranty; 
  [b] keep intact all the notices that refer to this License and to the absence
  of any warranty; and 
  [c] distribute a copy of this License along with the Library.§1
  Additionally, the LGPL-2.1 allows the distribution of the modified source code
  under the terms of Section 1§2 and the distribution
  of binaries under the terms of Sections 1 and 2.§4
  But the LGPL does not require any tasks if you are using the work only for
  yourself. Thus, the quoted conditions of Section 1 are mandatory for
  all use cases concerning the distribution of an LGPL licensed work
  (LGPL-2.1-C2 -- LGPL-2.1-CB).
   
Although the LGPL-2.1 does not explicitly require to retain the
  copyright notices in the form you have received them, it is nevertheless a
  very good idea not to modify these elements (LGPL-2.1-C2 - LGPL-2.1-CB). The
  LGPL-3.0, on the other hand, inherits the clauses that require all notices to
  be kept intact from the GPL-3.0 (LGPL-3.0-C2 -- LGPL-3.0-CB).§4 
  
The LGPL-2.1 allows to [] copy and (to) distribute the
  Library (or a portion or derivative of it []) in object code or
  executable form [] provided that you accompany it with the complete
  corresponding machine-readable source code [] on a medium customarily
  used for software interchange. And the license further states that, if one
  makes the object code accessible without distributing it directly, then the
  same `download' method for the source code fulfills this
  condition.§4  So, no doubt: Taken literally, the LGPL requires
  you to distribute the source code and the object code together and by the same
  method: either both on (for example) DVD or both offered for download; but not
  the one on DVD and the other by a download from a repository. But the first
  specification also says, that the complete corresponding machine
  readable source code has to be distributed on a medium customarily
  used for software interchange.§4  The  considers the
  possibility to download files from the Internet as a distribution on a
  medium [today] customarily used for software interchange. Therefore, the
   requires for all open source use cases that refer to the distribution
  of binaries (LGPL-2.1-C3, LGPL-2.1-C5, LGPL-2.1-C7, LGPL-2.1-C9, and
  LGPL-2.1-CA) to make the source code of the corresponding library accessible
  via an Internet repository.
  
  In contrast to the LGPL-2.1, the GPL-3.0, which is included in the LGPL-3.0,
  explictily offers the option to distribute the sources via an Internet server
  ( , p. ). So, one may again
  conclude that the tasks that fulfill the corresponding LGPL-2.1 requirements
  together also fit the GPL-3.0 and the LGPL-3.0 conditions. 
  
The LGPL allows to [] modify your copy or copies of the
  Library or any portion of it [] and (to) copy and distribute such
  modifications [] only under some restrictions and
  condtions:§2 
  
  First, modified files must be marked as modifications and this must
    include the date of the modification.§2§5 This
    condition must be respected by all open source use cases concerning the
    distribution of the modified work [LGPL-*-C6 - LGPL-*-CB], because even if
    one primarily intends to distribute binaries, one has also to deliver the
    source code. The  `replaces' this requirement by the mandatory
    condition to mark each modified file and by the voluntary condition to
    update or create a general changelog file.
    
  Second, the license requires that the modified version does not depend
    on external data structures without [] (making) a good faith
    effort to ensure that, in the event an application does not supply such (a)
    function or table, the facility still operates, and performs whatever part
    of its purpose remains meaningful.§2d§2a The 
    rewrites this condition as the obligation to maintain the structural
    independence of the library in case of using the modified library as
    embedded component [LGPL-*-CA - LGPL-*-CB]. 
    
  Third, the LGPL-2.1 definitely requires, that
    the modified work must itself be a software
    library.§2  This conditions can directly be incorprated as an
    interdiction into all use cases which refer to the modification of a library
    [LGPL-2.1-C8 - LGPL-2.1-CB]. But it is difficult to respect this condition
    if one wants to modify a program which one has received under the terms of
    the LGPL-2.1. In principal, one can write an application and license it
    under the LGPL-2.1. But, as a consequence, that impedes the modification of
    this work because the result must be a library. 
 
    The LGPL-3.0 does not contain any such requirement. Hence, the  allows
    the distribution of modified programs (LGPL-*-C6, LGPL-*-C7) only if they
    are licensed under the terms of LGPL-3.0. For programs licensed under
    LGPL-2.1, the only option is to relicense the software under the terms of
    the regular GPL-2.0 (or, at your discretion, GPL-3.0).  This is explicitely
    allowed by the LGPL-2.1: You may opt to apply the terms of the
    ordinary GNU General Public License instead of this License to a given
    copy of the Library.§3 
  
  
Additionally, the LGPL-2.1 allows the licensee to distribute a
  program  developed on-top of the library (what the
  LGPL-2.1 calls a work that uses the libary§5, §6)
  as an exception to the Sections above in combination 
  with the library under terms of your choice,§6,
  provided that the licensee fulfills additional conditions:
  
  First, it must clearly be stated that the on-top development depends on the
  (modified) library. Second, the LGPL must be added into the distributed
  package.§6 In the LGPL-3.0, this condition is similarily
  integrated: On the one hand, the combined work is defined as
  a work produced by combining or linking an Application with the
  Library.§0 On the other hand, the LGPL-3.0 states that one
  [] may convey a Combined Work under terms of (his own) choice
  provided that one [a] clearly says that the on-top development uses the LGPL
  licensed library, [b] distributes the LGPL-3.0 and the GPL-3.0 license as part
  of the package, [c] includes all these (licensing) information in an existing
  copyright dialog, if any, [d] requires an appropriate shared library mechanism,
  and [e] offers the respective installion information.§4 These
  requirements can directly be inserted as conditions into the respective use
  cases for both LGPL versions (LGPL-*-CA, LGPL-*-CB).
  
The most difficult requirements of the LGPL-2.1 concern the distribution
  in the form of binaries. In a very strict reading, the LGPL does not require
  to link the on-top development and the libary only dynamically. At first, the
  LGPL mentions, that the [..] work (that uses the Library), in
  isolation, is not a derivative work of the Library []. But if it is
  linked to the library the resulting executable program becomes
  a derivative of the Library and that it is therefore
  [] covered by this License (LGPL-2.1). But the LGPL-2.1 
  directly continues this statement with the hint, that Section 6
  states terms for distribution of such executables.§5 Finally,
  section 6 directly starts with the statement: As an exception to the
  Sections above, you may also combine or link a `work that uses the
  Library' with the Library to produce a work containing portions of the
  Library, and distribute that work under terms of your choice.§6
  
  This is important to know, because until this section 6 one can not directly
  read or indirectly infer that the LGPL-2.1 distinguished the act of
  dynamically linking a program and a library from that of statically linking
  these parts. The LGPL only wants to ensure that the binaries of the library
  itself can be replaced by a newer version. And that is required by
  section 6.§6 
  From a practical point of view, this can only be guaranteed, if the binaries of
  the on-top development and the library are linked using a suitable
  shared library mechanism§6 or if one also gets all compiled,
  but not linked object-files of the on-top development and the library, either
  directly, or via using a a written offer, valid for at least three
  years, to give the same user the (respective) materials.§6  In
  the first case, the user can replace the received version of the library and
  can let the application be relinked  automatically. In the second case, he has
  to do it manually. It is important to know that both these ways exist if one
  wants or must distribute statically linked works. The LGPL-2.1 does not forbid
  to distribute statically linked applications. But it requires to enable the
  receiver to relink the work. 
  
  The LGPL-3.0 has reduced these complex conditions in a special way: First, it
  does not use the words `statically linked' or `dynamically' linked at
  all. Second it defines the combined work `only' as the result of
  combining or linking an Application with the
  Library.§0  But then it requires for the distribution of the
  combined works that one has either to convey the Minimal
  Corresponding Source under the terms of this License, and the Corresponding
  Application Code in a form suitable for, and under terms that permit, the user
  to recombine or relink the Application with a modified version of the Linked
  Version to produce a modified Combined Work [] or that one must
  presuppose that the receiver uses [] suitable shared library
  mechanism for linking with the Library [] that [] operate properly
  with a modified version of the Library []§4 Finally,
  the LGPL-3.0 adds that in the first case the these materials which enables the
  relinking must be distributed [] in the manner specified by
  section 6 of the GNU GPL[-3.0] for conveying Corresponding
  Source.§4  And this section 6 of the GPL-3.0 allows the well
  known method to convey the object code [] accompanied by a
  written offer [] to give anyone [] access to copy the
  Corresponding Source from a network server at no charge.§6
  Therefore, the  can condense these conditions into the requirement,
  either to distribute dynamically linkable parts, or to distribute statically
  linked applications (accompanied) [] with a written offer,
  valid for at least three years, to give the same user the [complete]
  materials,§6 so that he can relink the application. It is
  clear, that this condition only applies to the use cases LGPL-*-C5 and
  LGPL-*-CB. 
  
MIT licensed software
licenseMIT
MIT
MIT License
MIT
The MIT license is known as one of the most permissive licenses. Thus, the
MIT specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
nodx = [font=, rectangle, draw, fill=gray!20, 
    text width=2.4cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l61) at ( 2.4, 9.2) MIT;
[nodb] (l51) at ( 0.0, 7.8) recipient: 
 4yourself;
[nodb] (l52) at ( 4.8, 7.8) recipient: 
 2others;
[nodb] (l41) at ( 2.5, 6.2) state: 
 unmodified;
[nodb] (l42) at ( 7.0, 6.2) state: 
 modified;
[nodb] (l31) at ( 5.0, 4.6) type: 
 proapse;
[nodb] (l32) at ( 9.0, 4.6) type: 
 snimoli;
[nodx] (l21) at ( 7.5, 2.8) context: 
 independent;
[nodx] (l22) at (10.5, 2.8) context: 
 embedded;
[leaf] (l11) at ( 0.0, 0.0) MIT-C1 using software only for yourself;
[leaf] (l12) at ( 2.5, 0.0) MIT-C2 distributing unmodified package;
[leaf] (l13) at ( 5.0, 0.0) MIT-C3 distributing modified program;
[leaf] (l14) at ( 7.5, 0.0) MIT-C4 distributing modified library as independent package;
[leaf] (l15) at (10.5, 0.0) MIT-C5 distributing modified library as embedded package;
[edge] (l61) -- (l51);
[edge] (l61) -- (l52);
[edge] (l51) -- (l11);
[edge] (l52) -- (l41);
[edge] (l52) -- (l42);
[edge] (l41) -- (l12);
[edge] (l42) -- (l31);
[edge] (l42) -- (l32);
[edge] (l31) -- (l13);
[edge] (l32) -- (l21);
[edge] (l32) -- (l22);
[edge] (l21) -- (l14);
[edge] (l22) -- (l15);
tikzpicture
 
MIT-C1: Using the software only for yourself
MIT-C1
  01 
  03 
  06
  09
  
  that you received MIT licensed software, that you will use it
  only for yourself and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
  
    You are allowed to use any kind of MIT licensed software in any
      sense and in any context without any obligations if you do not give the
      software to third parties and if you do not modify the existing copyright
      notices and the existing permission notice.
  
  
MIT-C2: Passing the unmodified software
MIT-C2
  02S 
  05S 
  07S 
  02B 
  05B 
  07B 
  that you received MIT licensed software which you are now going to
  distribute to third parties in the form of unmodified binaries or as unmodifed
  source code files. In this case it makes no difference if you distribute a
  program, an application, a server, a snippet, a module, a library, or a plugin
  as an independent package.
  OSUC-02S,  OSUC-02B, OSUC-05S, OSUC-05B, OSUC-07S,
    OSUC-07B 
 
  
    
    
  
  
MIT-C3: Passing a modified program
MIT-C3
  04S
  04B
  that you received an MIT licensed program, application, or server
  (proapse), that you modified it, and that you are now going to distribute this
  modified version to third parties in the form binaries or as source code
  files.
  OSUC-04S, OSUC-04B 
  
    
    
    
     
    
  
  
MIT-C4: Passing a modified library independently
MIT-C4
  08S
  08B
  that you received an MIT licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the the form of binaries
  or as source code files, but without embedding it into another larger software
  unit.
  OSUC-08S, OSUC-08B 
  
    
    
    
  
  
MIT-C5: Passing a modified library as embedded component
MIT-C5
  10S
  10B
  that you received an MIT licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binaries or
  as source code files together with another larger software unit which contains
  this code snippet, module, library, or plugin as an embedded component,
  regardless whether you distribute it in the form of binaries or as source code
  files.
  OSUC-10S, OSUC-10B 
  
    
    
    
    
    Arrange your distribution so that the original licensing
      elements (especially the MIT license text containing the specific
      copyright notices of the original author(s), the permission notices and
      the MIT disclaimer) clearly refer only to the embedded library and do not
      disturb the licensing of your own overarching work. It's a good tradition
      to keep the libraries, modules, snippet, or plugins in separate
      directories, which contain also all licensing elements.
  
  
Discussions and Explanations
The MIT-License is known as one of the most permissive licenses. It is a very
short license containing (0) a copyright notice, (1) a paragraph saying that you
are allowed to do almost anything you want, followed (2) by the condition that
you have to include the existing copyright notes and the permission
notes [] in all copies or substantial portions of the software,
and (3) closed by the well known disclaimer. But the license doesn't
talk about the difference of source code and object code. So, you have to find
the right way by yourself. 
Here are our readings:
  If you do not modify the received MIT licensed application, neither for
    your own purposes, nor for handing over the program to 3rd parties, you can 
    conclude that all copyright notices and permission notices are already
    correct.
  Nevertheless, we added the hint not to modify these licensing elements
    in the context of the use case used by yourself. This is implied by
    the MIT license itself. It requires explicitly that the above
      copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Softwarealso into
    those copies you make for your own purposes on your own machines. 
  If you modify the MIT licensed application, regardless for which
    purpose, you are simply not allowed to erase or modify existing copyright
    notes and permission notices. You may add your own modifications under new
    conditions, but the old notices must survive. 
  We request that you also keep the MIT disclaimer. This is not
    explicitely required by the license. The permission notices, which is
    required to be preserved, most likely refers to the text between the
    copyright notice and the disclaimer and, hence, does not include the latter.
    But another possible, although less likely interpretation is that the whole
    text of the license is what permission notice refers to.  
MPL-2.0 licensed software
licenseMPL 
MPL-2.0
Mozilla Public License 2.0
2.0
MPL
The Mozilla Public License clearly distinguishes the distribution of source code
from the distribution of binaries: First, it allows the Distribution of
Source Form.§3.1 Then, it specifies the conditions for a
Distribution of Executable Form.§3.2 Additionally, the
MPL-2.0 contrasts the distribution of Covered Software with the
distribution of a Larger Work.§3.3 So, taken as whole, the
MPL-2.0 mainly focusses on the distribution of software. Thus, for finding the
relevant executable task lists, the following MPL-2.0 specific open source use
case structure
   For details of the general OSUC finder  , 
    pp. OsucTokens and OsucDefinitionTree 
can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l71) at (4,10) MPL-2.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) MPL-2.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  MPL-2.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  MPL-2.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  MPL-2.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  MPL-2.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  MPL-2.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  MPL-2.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  MPL-2.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  MPL-2.0-C9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
  
 
MPL-2.0-C1: Using the software only for yourself
MPL-2.0-C1
  01 
  03 
  06 
  09
  that you received MPL-2.0 licensed software, that you will use it
    only for yourself, and that you do not hand it over to any third party in
    any sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
    You are allowed to use any kind of MPL-2.0 software in any sense
      and in any context without being obliged to do anything as long as you do
      not give the software to third parties.
  
  
    
    
  
MPL-2.0-C2: Passing the unmodified software as source code
MPL-2.0-C2
  02S 
  05S 
  07S 
  that you received MPL-2.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified source code files
    or as unmodified source code package. In this case it makes no difference if
    you distribute a program, an application, a server, a snippet, a module, a
    library, or a plugin as an independent or as an embedded unit.
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    
  
  
    
    
  
MPL-2.0-C3: Passing the unmodified software as binaries 
MPL-2.0-C3
  02B 
  05B 
  07B
  that you received MPL-2.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified binary files or as
    unmodified binary package. In this case it does not matter if you distribute
    a program, an application, a server, a snippet, a module, a library, or a
    plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
     
    
    
  
    MPL-2.0-C2
    
    
  
  
    
    
  
MPL-2.0-C4: Passing a modified program as source code
MPL-2.0-C4
  04S 
  that you received an MPL-2.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package.
  04S
  
    
    
    
    
    
    
  
 
  
    
    
  
MPL-2.0-C5: Passing a modified program as binary
MPL-2.0-C5
  04B 
  that you received an MPL-2.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary
    files or as a binary package.
  04B
  
     
    
    
    MPL-2.0-C4
    
    
    
    
  
  
    
    
  
MPL-2.0-C6: Passing a modified library as independent source code
MPL-2.0-C6
  08S
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    source code files or as a source code package, but without embedding it into
    another larger software unit.
  08S
  
    
    
    
    
    
    
  
  
    
    
  
MPL-2.0-C7: Passing a modified library as independent binary
MPL-2.0-C7
  08B
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    binary files or as a binary package but without embedding it into another
    larger software unit.
  08B
  
     
    
    
    MPL-2.0-C6
    
    
    
    
  
  
    
    
  
MPL-2.0-C8: Passing a modified library as embedded source code
MPL-2.0-C8
  10S
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    source code files or as a source code package together with another larger
    software unit which contains this code snippet, module, library, or plugin
    as an embedded component.
  10S
  
    
    
    
    
    
    
    
  
  
    
    
  
MPL-2.0-C9: Passing a modified library as embedded binary
MPL-2.0-C9
  10B
  that you received an MPL-2.0 licensed code snippet, module,
    library, or plugin (snimoli), that you modified it, and that you are now
    going to distribute this modified version to third parties in the form of
    binary files or as a binary package together with another larger software
    unit which contains this code snippet, module, library, or plugin as an
    embedded component.
  10B
  
    
    
    
    MPL-2.0-C8
    
    
    
    
    
  
  
    
    
  
Discussions and Explanations
The MPL-2.0 offers a section Responsibilities which contains nearly all
requirements.§3 Only for some subordinate aspects, one has also to
reflect other paragraphs.pars pro to cf.§3 - concerning the trademarks
With respect to this structure, we can detect the following tasks:
In a more general attitude, the MPL-2.0 states that it []
  does not grant any rights in the trademarks, service marks, or logos of any
  Contributor---except as it may be necessary to comply with other
  requirements of the license.§2.3 The  rewrites the message
  as the interdiction to promote own services and products by and with such
  elements. 
  
The MPL-2.0 also generally prescribes that you may not remove or
  alter the substance of any license notice (including copyright notices, patent
  notices, disclaimer of warranties, or limitations of liabiliy) contained
  within the Source Code Form []§3.4 This focussing to the
  substance of any license notice refers to the allowance to
  [] alter any license notices to the extent required to remedy
  known factual innacuracies.§3.4  Following its principle to offer
  one reliable way and to ignore variants of secondary importance, the 
  simplifies this condition to the general proscription to modify any licensing
  material for all use cases [MPL-2.0-C1 -- MPL-2.0-C9]. But for emphasizing
  that this is a job which must be activily done, the  additionally
  rewrites this interdiction into all 2others use cases [MPL-2.0-C2 --
  MPL-2.0-C9] as the task to retain the licensing elements in the form one has
  obtained them. 
  
Moreover, the MPL-2.0 requires for all distributions of [the]
  source [code] form that all modifications of the software [] 
  must be under the terms of (the MPL-2.0) and that the distributor
  [] must inform all recipients that the software
  [] is governed by the terms of (the MPL-2.0), and how (the
  recipients) can obtain a copy of this license.§3.1  For the
  respective use case (MPL-2.0-C2, MPL-2.0-C4, MPL-2.0-C6, MPL-2.0-C8), the
   rewrites these conditions so that each MPL-2.0 source code package
  must neccessarily contain the MPL-2.0 itself as textfile and an additional 
  licensing file or statement strictly following the text given by the addendum
  of the MPL-2.0.Exhibit A Because the MPL-2.0 is only a license with
  weak copyleft, the  proposes to separate the MPL-2.0 licensed,
  embedded component from the enclosing program (MPL-2.0-C8). 
  
But the MPL-2.0 does not explicitly require marking all modifications.
  Nevertheless, this is state of the art in computer emgineering. Therefore,
  with respect to the cases of distributing modified source code (MPL-2.0-C4,
  MPL-2.0-C6 and MPL-2.0-C8), the  proposes to mark all modifications
  inside of the source code and to update the description of the functional
  changes. In case of distributing the modified software in the form of
  binaries, it should be sufficient to describe the modifications only on the
  functional level. 
  
Furthermore, the MPL-2.0 requires that the Covered Software---in 
  all cases of distributing it in an Executable Form (MPL-2.0-C3,
  MPL-2.0-C5, MPL-2.0-C7, MPL-2.0-C9)---[] must also be made
  available in Source Code Form [] and that the distributor
  [] must inform recipients of the Executable Form how they can
  obtain a copy of such Source Code Form by reasonable means in a timely manner,
  at a charge no more than the cost of distribution to the
  recipient.§3.2.a  The  rewrites these conditions as the
  obligation to offer a download service at no charge and to point towards this
  services inside of the distributed package.
  
In this context, the MPL-2.0 allows to distribute the binaries under terms
  of another license [] provided that that the license for the
  Executable Form does not attempt to limit or alter the recipients’ rights in
  the Source Code Form under this License.§3.2.b This possibility
  might become important for those cases where the license compatibility must
  explicitly be managed. Normally, it should be sufficient also to distribute
  the binaries under the MPL-2.0. Thus, in case of distributing binaries
  (MPL-2.0-C3, MPL-2.0-C5, MPL-2.0-C7, MPL-2.0-C9), the  proposes to
  insert into the distribution packages the MPL-2.0 itself and an additional
  licensing file or statement strictly following the text given by the addendum
  of the MPL-2.0.Exhibit A But again, because the MPL-2.0 is only a
  license with weak copyleft, the  proposes to separate the MPL-2.0
  licensed embedded component from the overarching program (MPL-2.0-C9).
  
Finally, one clearly has to state that the distribution of the source code
  required by the previous rule must, of course, follow the rules of distributing
  the software. Thus, the  requires in all cases of a binary distribution
  to execute also the task-lists of the respective source code use cases.
Microsoft Public License
licenseMSPL 
MS-PL
Microsoft Public License
MS-PL
The MS-PL license is also one of the most permissive licenses. Thus, the
MS-PL specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l71) at (4,10) MS-PL;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) MS-PL-C1 using software only
for yourself;
[leaf] (l12) at (2.5,0)  MS-PL-C2  distributing unmodified
software;
[leaf] (l14) at (5.4,0)  MS-PL-C3   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  MS-PL-C4   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  MS-PL-C5   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  MS-PL-C6 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  MS-PL-C7  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  MS-PL-C8   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l51) -- (l12);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
MS-PL-C1: Using the software only for yourself
MS-PL-C1
  01 
  03 
  06
  09
  
  that you received MS-PL licensed software, that you will use it
  only for yourself and that you do not hand it over to any 3rd party in any
  sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
  
    You are allowed to use any kind of MS-PL licensed software in any 
      sense and in any context without any other obligations if you do not give
      the software to 3rd parties. 
  
  
     
  
MS-PL-C2: Passing the unmodified software
MS-PL-C2
  02S 
  05S 
  07S 
  02B 
  05B 
  07B 
  that you received MS-PL licensed software which you are now going to
  distribute to third parties in the form of unmodified binaries or as unmodifed
  source code files. In this case it makes no difference if you distribute a
  program, an application, a server, a snippet, a module, a library, or a plugin
  as an independent package.
  OSUC-02S, OSUC-02B, OSUC-05S,  OSUC-05B, OSUC-07S,
    OSUC-07B 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received) are completely retained in your package. 
  
    Incorporate a complete copy of the MS-PL license into your 
      package, regardless whether you distribute a source code or a binary
      package.
      
  
    It's a good tradition to let the documentation of your
      distribution and/or your additional material also contain a link to the
      original software (project) and its homepage. 
  
  
     
  
MS-PL-C3: Passing a modified program as source code
MS-PL-C3
  04S
  that you received an MS-PL licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code files or as
  a source code package.
  OSUC-04S 
 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received) are completely retained in your package. 
 
    Incorporate a complete copy of the MS-PL license into your
      package. 
  
    If you do not want to publish your modifications under the
      MS-PL too, then cleanly separate your own sources and licensing documents
      from original elements of the adopted work. 
  
    Mark your modifications in the sourcecode.
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with the prohibitions stated below). 
  
    You are allowed to expand an existing copyright notice of the
      program to mention your own contributions. 
  
    It is a good practice of the open source community, to let the
      copyright notice which is shown by the running program also state that the
      program is licensed under the MS-PL license (as far as this does not
      clashes with the prohibitions stated below). Because you are already
      modifying the program, you can also add such a hint, if the  original
      copyright notice lacks such a statement. 
  
  
     
  
MS-PL-C4: Passing a modified program as binary
MS-PL-C4
  04B
  that you received an MS-PL licensed program, application, or
  server (proapse), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files or as a
  binary package.
  OSUC-04B 
 
  
  
    Mark your modifications in the source code even if you do not
      intend to distribute it. 
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below). 
  
    It is a good practice of the open source community, to let the
      copyright notice which is shown by the running program also state that the
      derivative work is based on a version originally licensed under the MS-PL
      license (as far as this does not clashes with the prohibitions stated
      below), perhaps by linking to the project homepage of the original.
      Because you are already modifying the program, you can also add such a
      hint, if the original copyright notice lacks such a statement. 
  
  
     
  
MS-PL-C5: Passing a modified library independently as source code
MS-PL-C5
  08S
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package, but without embedding it into another
  larger software unit.
  OSUC-08S 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received) are completely retained in your package. 
 
    Incorporate a complete copy of the MS-PL license into your
      package. 
  
    If you do not want to publish your modifications under the
      MS-PL too, then cleanly separate your own sources and licensing documents
      from original elements of the adopted part(s). 
  
    Mark your modifications in the sourcecode. 
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below). 
  
  
    
  
MS-PL-C6: Passing a modified library independently as binary
MS-PL-C6
  08B
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package but without embedding it into another larger software
  unit.
  OSUC-08B 
 
  
    Mark your modifications in the source code even if do not want
      to distribute it. 
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below). 
  
  
     
  
MS-PL-C7: Passing a modified library as embedded source code
MS-PL-C7
  10S
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of source code
  files or as a source code package together with another larger software unit
  which contains this code snippet, module, library, or plugin as an embedded
  component.
  OSUC-10S 
 
  
    Ensure that all licensing elements (particularly all
      copyright, patent, trademark, and attribution notices that are part of the
      version you received are completely retained in your package. 
 
    Incorporate a complete copy of the MS-PL license into your
      package. 
  
    If you do not want to publish your modifications or your
      overarching application under the MS-PL too, then cleanly separate your
      own sources and licensing documents from original elements of the adopted
      work. 
  
    Mark your modifications in the sourcecode.
  
    It's a good tradition to let the documentation of your
      distribution or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below).
    It is a good practice of the open source community, to let the
      copyright notice shown by your overarching program also state that it is
      based on a component originally licensed under the MS-PL license, perhaps
      by linking the project homepage of the original (as far as this does not
      clashes with the prohibitions stated below).  
  
  
     
  
MS-PL-C8: Passing a modified library as embedded binary
MS-PL-C8
  10B
  that you received an MS-PL licensed code snippet, module, library,
  or plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binary files
  or as a binary package together with another larger software unit which
  contains this code snippet, module, library, or plugin as an embedded component.
  OSUC-10B 
 
  
    Mark your modifications in the source code even if do not want
      to distribute it. 
  
    It's a good tradition to let the documentation of your
      distribution and/or your additional material also contain a link to the
      original software (project) and its homepage (as far as this does not
      clashes with with the prohibitions stated below).
  
    It is a good practice of the open source community, to let the
      copyright notice shown by your own overarching program also state that it
      is based on a component originally licensed under the MS-PL license, 
      perhaps by linking the project homepage of the original (as far as this
      does not clashes with the prohibitions stated below).
  
  
     
  
Discussions and Explanations
The MS-PL is also a very permissive and short license. It requires to do:
(a) You must preserve existing licensing elements. (b) You must distribute
the source code as whole or portions of the source code under the
MS-PL. (c) You must add a copy of the license if you distribute (parts of) the
source code. (d) If you distribute a binary package, you must distribute (the
parts of) the work under a license that complies with this (MS-PL)
license[cf.][wp]MsplOsiLicense2013a.
The most confusing clause is probably the condition, to []
distribute any portion of the software in compiled or object code form []
only [] under a license that complies with this license. But a closer
examination is lighting the situation: The only other conditions of the license
which refer to the context of distributing binaries are the requirements a) not
to abuse trademarks, b) not to bring a patent claim against any contributor, and
c) not to expect any warranties or guarantees with respect to the distributed
portion[cf.][wp. §3A, §3B, §3E]MsplOsiLicense2013a.
Based on these readings we decided 
 
  to let you incorporate a copy of the license into your
  distribution even if it only contains the binaries of the unmodified version:
  if you have not modified it, you do not lose any advantage if you add the
  license, too. So, this is the best method to fulfill the MSL-PL binary
  condition.
  to erase all mandatory conditions in case of the binary
  distributions: the patent restriction of the MS-PL itself is already covered
  by the MS-PL patent section of the  , p.
  MSPL and the no warranty clause of the MS-PL by
  the  section concerning the power of the MS-PL 
 while the trademark
  restrictions are explicitly added into the prohibition section.
  to erase the hints to a voluntarily updated copyright dialog in
  case of distributing a snimoli independently because the copyright dialog
  normally is designed by the overarching work which uses the library, not by
  the library itself.
PostgreSQL License
licensePGL 
PostgreSQL
PostgreSQL license
PGL
Like the MIT License Postgres License is a very permissive licenses. Thus, the
PostgreSQL specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
nodx = [font=, rectangle, draw, fill=gray!20, 
    text width=2.4cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=2cm, text centered, minimum height=4em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l61) at ( 2.4, 9.2) PostgreSQL;
[nodb] (l51) at ( 0.0, 7.8) recipient: 
 4yourself;
[nodb] (l52) at ( 4.8, 7.8) recipient: 
 2others;
[nodb] (l41) at ( 2.5, 6.2) state: 
 unmodified;
[nodb] (l42) at ( 7.0, 6.2) state: 
 modified;
[nodb] (l31) at ( 5.0, 4.6) type: 
 proapse;
[nodb] (l32) at ( 9.0, 4.6) type: 
 snimoli;
[nodx] (l21) at ( 7.5, 2.8) context: 
 independent;
[nodx] (l22) at (10.5, 2.8) context: 
 embedded;
[leaf] (l11) at ( 0.0, 0.0) PostgreSQL-C1 using software only for yourself;
[leaf] (l12) at ( 2.5, 0.0) PostgreSQL-C2 distributing unmodified package;
[leaf] (l13) at ( 5.0, 0.0) PostgreSQL-C3 distributing modified program;
[leaf] (l14) at ( 7.5, 0.0) PostgreSQL-C4 distributing modified library as independent package;
[leaf] (l15) at (10.5, 0.0) PostgreSQL-C5 distributing modified library as embedded package;
[edge] (l61) -- (l51);
[edge] (l61) -- (l52);
[edge] (l51) -- (l11);
[edge] (l52) -- (l41);
[edge] (l52) -- (l42);
[edge] (l41) -- (l12);
[edge] (l42) -- (l31);
[edge] (l42) -- (l32);
[edge] (l31) -- (l13);
[edge] (l32) -- (l21);
[edge] (l32) -- (l22);
[edge] (l21) -- (l14);
[edge] (l22) -- (l15);
tikzpicture
PostgreSQL-C1: Using the software only for yourself
PostgreSQL-C1
  01 
  03 
  06
  09
  
  that you received PostgreSQL licensed software, that you will use it
  only for yourself, and that you do not hand it over to any 3rd party in any
  sense. 
  OSUC-01, OSUC-03, OSUC-06, and OSUC-09 
 
  
    You are allowed to use any kind of PostgreSQL licensed software in any
      sense and in any context without any other obligations if you do not give
      the software to third parties and if you do not modify the existing
      copyright notices or the existing permission notice.
  
  
PostgreSQL-C2: Passing the unmodified software
PostgreSQL-C2
  02S 
  05S 
  07S 
  02B 
  05B 
  07B 
  that you received PostgreSQL licensed software which you are now going to
  distribute to third parties in the form of unmodified binaries or as unmodifed
  source code files. In this case it makes no difference if you distribute a
  program, an application, a server, a snippet, a module, a library, or a plugin
  as an independent package. 
  OSUC-02S,  OSUC-02B, OSUC-05S, OSUC-05B, OSUC-07S, OSUC-07B
     
  
    
    
  
  
PostgreSQL-C3: Passing a modified program
PostgreSQL-C3
  04S 
  04B
  that you received a PostgreSQL licensed program, application, or
  server (proapse), that you modified it, and that you are now going to distribute this
  modified version to third parties in the form binaries or as source code
  files.
 
  OSUC-04S, OSUC-04B
     
  
    
    
    
    
    
  
  
PostgreSQL-C4: Passing a modified library independently
PostgreSQL-C4
  08S
  08B
  that you received a PostgreSQL licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binaries or
  as source code files together with another larger software unit which contains
  this code snippet, module, library, or plugin as an embedded component,
  regardless whether you distribute it in the form of binaries or as source code
  files.
  OSUC-08S, OSUC-08B
     
  
    
    
    
  
  
PostgreSQL-C5: Passing a modified library as embedded component
PostgreSQL-C5
  10S 
  10B
  that you received a PostgreSQL licensed code snippet, module, library, or
  plugin (snimoli), that you modified it, and that you are now going to
  distribute this modified version to third parties in the form of binaries or
  as source code files together with another larger software unit which contains
  this code snippet, module, library, or plugin as an embedded component,
  regardless whether you distribute it in the form of binaries or as source code
  files.
  OSUC-10S, OSUC-10B
     
  
    
    
     
    
    
  
  
Discussions and Explanations
The PostgreSQL-License follows the structure of the MIT license: it, too, contains 
(1) a copyright notice, 
(2) a paragraph saying that you are allowed to do almost anything you want,
    followed 
(3) by the condition that the copyright notice, the permission notes, and the
    disclaimer [] apperar in all copies, and 
(4) the well known disclaimer.
Moreover, like the MIT license, the PostgreSQL does not talk about the
difference between source code and object code. So, you can apply the analysis
of the MIT license  
also to the PostgreSQL.
PHP-3.0 licensed software
licensePHP 
PHP-3.0
PHP 3.0 License
3.0
PHP
The PHP-3.0 license contains a few more conditions than the MIT license and
additionally distinguishes the redistribution of source
code from the redistribution in binary form.
Nevertheless, the PHP-3.0 license focusses only on the redistribution or---as we
call it in the the 2others use
cases. Thus, the PHP-3.0 specific finder can be simplified:
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l71) at (3.5,10) PHP-3.0;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) PHP-3.0-C1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  PHP-3.0-C2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  PHP-3.0-C3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  PHP-3.0-C4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  PHP-3.0-C5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  PHP-3.0-C6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  PHP-3.0-C7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  PHP-3.0-C8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  PHP-3.0-C9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
 
 
PHP-3.0-C1: Using the software only for yourself
PHP-3.0-C1
  01 
  03 
  06
  09
  
  that you received PHP-3.0 licensed software, that you will use it
    only for yourself, and that you do not hand it over to any third party in
    any sense.
  OSUC-01, OSUC-03, OSUC-06, and OSUC-090109
  
  
    You are allowed to use any kind of PHP-3.0 software in any sense
      and in any context without any obligations as long as you do not give the
      software to third parties.
  
  
    
  
PHP-3.0-C2: Passing the unmodified software as source code
PHP-3.0-C2
  02S
  05S 
  07S 
  that you received PHP-3.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified source code files
    or as unmodified source code package. In this case it makes no difference if
    you distribute a program, an application, a server, a snippet, a module, a
    library, or a plugin as an independent or as an embedded unit.
  OSUC-02S, OSUC-05S, OSUC-07S02S07S
  
    
    
    
  
  
    
   
PHP-3.0-C3: Passing the unmodified software as binary
PHP-3.0-C3
  02B 
  05B 
  07B 
  that you received PHP-3.0 licensed software which you are now going
    to distribute to third parties in the form of unmodified binary files or as
    unmodified binary package. In this case it does not matter if you distribute
    a program, an application, a server, a snippet, a module, a library, or a
    plugin as an independent or an embedded unit.
  OSUC-02B, OSUC-05B, OSUC-07B02B07B
  
    
     
    
    
    
  
  
    
  
PHP-3.0-C4: Passing a modified program as source code
PHP-3.0-C4
  04S
  that you received a PHP-3.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package.
  04S
  
    
    
    
    
     
 
    
  
  
    
  
PHP-3.0-C5: Passing a modified program as binary
PHP-3.0-C5
  04B
  that you received a PHP-3.0 licensed program, application, or
    server (proapse), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary
    files or as a binary package.
  04B
  
    
    
    
    
  
  
    
  
PHP-3.0-C6: Passing a modified library as independent source code
PHP-3.0-C6
  08S
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package, but without embedding it into another
    larger software unit.
  08S
  
    
    
    
    
  
  
    
  
PHP-3.0-C7: Passing a modified library as independent binary
PHP-3.0-C7
  08B
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary files
    or as a binary package but without embedding it into another larger software
    unit.
  08B
  
    
    
    
    
  
  
    
  
PHP-3.0-C8: Passing a modified library as embedded source code
PHP-3.0-C8
  10S
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of source code
    files or as a source code package together with another larger software unit
    which contains this code snippet, module, library, or plugin as an embedded
    component.
  10S
  
    
    
    
    
     
 
    
    
  
  
    
  
PHP-3.0-C9: Passing a modified library as embedded binary
PHP-3.0-C9
  10B
  that you received a PHP-3.0 licensed code snippet, module, library,
    or plugin (snimoli), that you modified it, and that you are now going to
    distribute this modified version to third parties in the form of binary
    files or as a binary package together with another larger software unit
    which contains this code snippet, module, library, or plugin as an embedded
    component.
  10B
  
    
    
    
    
    
  
  
    
  
Discussions and Explanations
First of all, it might surprise some readers that the  also describes
the open source use cases which concern the distribution of binary files
although it deals with the PHP-3.0 license. PHP is a script language. Thus,
delivering the source code seems to be a must. But one has to consider that the
PHP-3.0 license could also be applied to works which are based on other
languages constituted on the compiler paradigm. Or there might a PHP compiler be
used. 
It might also surprise some readers that in case of the binary distribution of
modifications the condition to repoduce the php license in the documentation is
a must, while its reproduction in a copyright screen of the program is a
should. This is directly caused by the binary-condition of the php license
which expressly requires that Redistributions in binary form must
reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the
distribution. But of course, implementing the must and the
should is best. 
CDDL licensed software [tbd]
Also, []
Thus, for
finding the relevant, simply processable task lists, also the following CDDL
specific open source use case structure For details of the general OSUC
finder  , pp. OsucTokens and
OsucDefinitionTree can be used:
 
nodv = [font=, ellipse, draw, fill=gray!10, 
    text width=2cm, text centered, minimum height=2em]
nods = [font=, rectangle, draw, fill=gray!20, 
    text width=1.2cm, text centered, rounded corners, minimum height=3em]
nodb = [font=, rectangle, draw, fill=gray!20, 
    text width=2.2cm, text centered, rounded corners, minimum height=3em]
    
leaf = [font=, rectangle, draw, fill=gray!30, 
    text width=1.2cm, text centered, minimum height=6em]
edge = [draw, -latex']
tikzpicture[]
[nodv] (l71) at (4,10) CDDL;
[nodb] (l61) at (0,8.6) recipient: 
 4yourself;
[nodb] (l62) at (6.5,8.6) recipient: 
 2others;
[nodb] (l51) at (2.5,7) state: 
 unmodified;
[nodb] (l52) at (9.3,7) state: 
 modified;
[nods] (l41) at (1.8,5.4) form: source;
[nods] (l42) at (3.6,5.4) form: binary;
[nodb] (l43) at (6.5,5.4) type: 
 proapse;
[nodb] (l44) at (12,5.4) type: 
 snimoli;
[nods] (l31) at (5.4,3.8) form: source;
[nods] (l32) at (7.2,3.8) form: binary;
[nodb] (l33) at (10,3.8) context: 
 independent;
[nodb] (l34) at (13.5,3.8) context: 
 embedded;
[nods] (l21) at (9,2.2) form: source;
[nods] (l22) at (10.8,2.2) form: binary;
[nods] (l23) at (12.6,2.2) form: source;
[nods] (l24) at (14.4,2.2) form: binary;
[leaf] (l11) at (0,0) CDDL-1 using software only
for yourself;
[leaf] (l12) at (1.8,0)  CDDL-2  distributing unmodified
software as sources;
[leaf] (l13) at (3.6,0)  CDDL-3   distributing unmodified
software as binaries;
[leaf] (l14) at (5.4,0)  CDDL-4   distributing modified
program as sources;
[leaf] (l15) at (7.2,0)  CDDL-5   distributing modified
program as binaries;
[leaf] (l16) at (9,0)  CDDL-6   distributing modified
library as independent sources;
[leaf] (l17) at (10.8,0)  CDDL-7 distributing modified
library as independent binaries;
[leaf] (l18) at (12.6,0)  CDDL-8  distributing
modified library as embedded sources;
[leaf] (l19) at (14.4,0)  CDDL-9   distributing modified
library as embedded binaries;
[edge] (l71) -- (l61);
[edge] (l71) -- (l62);
[edge] (l61) -- (l11);
[edge] (l62) -- (l51);
[edge] (l62) -- (l52);
[edge] (l51) -- (l41);
[edge] (l51) -- (l42);
[edge] (l52) -- (l43);
[edge] (l52) -- (l44);
[edge] (l41) -- (l12);
[edge] (l42) -- (l13);
[edge] (l43) -- (l31);
[edge] (l43) -- (l32);
[edge] (l44) -- (l33);
[edge] (l44) -- (l34);
[edge] (l31) -- (l14);
[edge] (l32) -- (l15);
[edge] (l33) -- (l21);
[edge] (l33) -- (l22);
[edge] (l34) -- (l23);
[edge] (l34) -- (l24);
[edge] (l21) -- (l16);
[edge] (l22) -- (l17);
[edge] (l23) -- (l18);
[edge] (l24) -- (l19);
tikzpicture
CDDL-1: Using the software only for yourself
OSUC-01-CDDL OSUC-03-CDDL 
OSUC-06-CDDL OSUC-09-CDDL
description
[means] that you are going to use a received CDDL licensed software only
for yourself and that you do not hand it over to any 3rd party in any sense.
[covers] OSUC-01, OSUC-03, OSUC-06, and OSUC-09 For details 
 , pp. OSUC-01-DEF - OSUC-09-DEF
[requires] 
[prohibits] 
description
CDDL-2: Passing the unmodified software as source code
OSUC-02S-CDDL OSUC-05S-CDDL OSUC-07S-CDDL 
description
[means] that you are going to distribute an unmodified version of the
received CDDL software to 3rd parties - in the form of source code files or as a
source code package. In this case it is not discriminating to distribute a
program, an application, a server, a snippet, a module, a library, or a plugin
as an independent or an embedded unit
[covers] OSUC-02S, OSUC-05S, OSUC-07S For details 
, pp. OSUC-02S-DEF - OSUC-07S-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-3: Passing the unmodified software as binaries 
OSUC-02B-CDDL OSUC-05B-CDDL OSUC-07B-CDDL
description
[means] that you are going to distribute an unmodified version of the
received CDDL software to 3rd parties -- in the form of binary files or as a
binary package. In this case it is not discriminating to distribute a
program, an application, a server, a snippet, a module, a library, or a plugin
as an independent or an embedded unit.
[covers] OSUC-02B, OSUC-05B, OSUC-07B For details 
, pp. OSUC-02B-DEF - OSUC-07B-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-4: Passing a modified program as source code
OSUC-04S-CDDL 
description
[means] that you are going to distribute a modified version of the received
CDDL licensed program, application, or server (proapse) to 3rd parties -- in the
form of source code files or a source code package.
[covers] OSUC-04S For details  , pp.
OSUC-04S-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-5: Passing a modified program as binary
OSUC-04B-CDDL 
description
[means] that you are going to distribute a modified version of the received
CDDL licensed program, application, or server (proapse) to 3rd parties -- in
the form of binary files or as a binary package.
[covers] OSUC-04B For details  , pp.
OSUC-04B-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-6: Passing a modified library as independent source code
OSUC-08S-CDDL
description
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin (snimoli) to 3rd parties
-- in the form of source code files or as a source code package, but without
embedding it into another larger software unit.
[covers] OSUC-08S For details  , pp.
OSUC-08S-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-7: Passing a modified library as independent binary
OSUC-08B-CDDL
description
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin (snimoli) to 3rd parties
-- in the form of binary files or as a binary package but without embedding it
into another larger software unit.
[covers] OSUC-08B For details  , pp.
OSUC-08B-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-8: Passing a modified library as embedded source code
OSUC-10S-CDDL
description
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin (snimoli) to 3rd parties
-- in the form of source code files or as a source code package together with
another larger software unit which contains this code snippet, module, library,
or plugin as an embedded component.
[covers] OSUC-10S For details  , pp.
OSUC-10S-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
CDDL-9: Passing a modified library as embedded binary
OSUC-10B-CDDL
description
[means] that you are going to distribute a modified version of the received
CDDL licensed code snippet, module, library, or plugin to 3rd parties -- in the
form of binary files or as a binary package together with another larger
software unit which contains this code snippet, module, library, or plugin as an
embedded component.
[covers] OSUC-10B For details  , pp.
OSUC-10B-DEF
[requires] the following tasks in order to fulfill the license conditions:
itemize
  
  
  
itemize
[prohibits] 
itemize
  
itemize
description
Discussions and Explanations
CDDLDiscussion
The CDDL offers which contains nearly all
requirements[cf.][wp. §3]Cddl10OsiLicense2004a. Only for some
itemize
  
itemize
Open Source License Compliance: To-Do Lists
quote
With respect to the defined open source use cases, this chapter lists what one
has to do for acting in accordance with the specific open source licenses.
quote
Some general remarks on 'giving' someone a file
This chapter has to be started with some general points which are relevant for
many of the to-do lists. So that the same points are not repeated too often, we
will start with these general remarks and refer to them throughout the chapter.
DistributingFilesHint
itemize
  
  Sometimes when delivering a binary package containing open source software,
  the medium doesn’t allow the recipient to view all files contained in that
  package. For example, a lot of mobile devices don’t give the user access to
  the file system. But open source licenses often require ‘to give’ someone
  copies of text files, such as the license text, copyright notes, or specific
  notice file. The safe interpretation of ‘giving someone a text’ is that the
  receiver must be able to read it To give someone anything they can't
  touch, feel or see is like not giving him the object ;-). Thus, on
  systems which offer a file browser and a suitable reader, it is sufficient, to
  put these file onto the files system. On the other systems, you must
  present the content of the files  through the UI of your application---for
  example in a specific copyright screen Additionally, in the open
  source community, it is a good tradition, to present these reference data
  voluntarily.. The  does not want to refine the taxonomies down to the
  level of operating systems, so it is up to the user to keep this in mind when
  reading the to-do lists.
  
  Sometimes a product which uses and distributes open source software
  tries to fulfill the requirement 'to give the recipients the license etc.' by
  presenting links to general versions of these licensing files hosted somewhere
  on the internet. But be aware: Although it is a good tradition---especially
  if you link to the homepages of the projects for being totally transparent---
  it is not sufficient to offer only the links. If you are required by the open
  source licenses to handover something to your users, you must do it. It
  is not safe to delegate the task to anyone hoping that they will offer the
  files all the time your product is being distributed Moreover, the
  advantage of doing the job oneself is that one has not to struggle with
  uncommunicated implicit modifications of the link targets.. Even if it would
  be safe to assume that the link will remain valid forever, the point is: you
  have to fulfill the license, no one else.
itemize
OSUCToDoLists
Open Source Licenses and Their Legal Environments [tbd]
quote
In this chapter we analyze why to know a license alone is not enough. At the end
you will know that open source licenses are embedded into the legal environment
of a state. And you will know in which sense the German legal environment
predetermines your readings of open source licenses.
quote
Conclusion
quote
This chapter shortly describes what the OSLiC is, how it should be used, and how
it can be read. It shall be written as top-down explanation.
quote
Some Additional Remarks on the OSLiC Quotation Stylesec:QuotationAppendix
We have already characterized the general tone of our
footnotes  p. QuotationPrinciple . Let us now
briefly explain a little peculiarity of our bibliography:
Modern times have also changed the humanities. Formerly a book or an article
must be printed for being ripe to be quoted. Our statements relied on static,
readily prepared works. Nowadays even university libraries sometimes offer those
books and articles as PDF files which are printed in the original. As a scholar,
now you must rely on the equality of the printed version and the PDF file -- at
least with respect to the page numbers and the appearance. You can not verify the
equivalence -- at least to a certain degree.
Moreover: in case of such 'e-books' and 'e-articles' the libraries often do not
offer the pdf files themselves but links to the download pages of the publisher.
Formerly as a scholar you could trust that your readers would be able to
retrieve the quoted work if they want to verify your citations. It's one task of
our libraries to hold available our scientific sources. But now they do not buy
any longer the books, but the right to download files over the university net.
In this case these PDF files are not stored on the serves of the university
library. By using the link provided by the publisher each student or each reader
downloads his own file -- case by case. Therefore -- as a scholar -- you now have
to trust that the publisher, who provides the link, will not change that pdf
file that you have cited.
But it gets even worse: While it might be that publishers modify their work
secretly (even it is not very likely that they do it), it's a definite feature
of the web that its pages are frequently changed. Hence we must ask
ourselves: Can we seriously argue on the basis of statements and documents which
might disappear? Can we quote such possibly volatile sources? The problem is: we
must do it, especially if we write about an internet topic -- and even if we want
to write a really reliable compendium.
So, what can we do? First, we must confide in our readers, that they either
will retrieve our sources or -- if they can not find them -- that they
believe that we really have found and read what we have written and
quoted. Second, we store all these e-wares Take this little word as
(new) generalization of 'e-book', 'e-article', 'e-paper' and so on. we
read But because of the copyright we ourselves are naturally not
allowed to offer a download link for them or to send a copy of it to those who
want to verify our quotes.. And thirdly we should lay open to our readers the
different levels of reliableness of our sources. Therefore we use
the following markers in our bibliographic data And another hint: Nowadays sometimes
even scientific libraries don't offer exact 'e-copies' of the original. In
some cases one can only get html-versions of articles which formerly were
printed as part of journals. In these case the scholar has to use sources which
lost their original page-numbers. The same can happen to articles of proceedings
etc. which are now only offered as autonomous pdf files with an internal paging.
If we quote such kind of articles we try to specify the number of the quoted
article in the original row of articles, added -- if possible -- by an internal
page number. But naturally we also try to follow the bibliographic data
delivered by that organization which distributes these kind of copies.:
itemize
  Print / Copy:- The source is printed and we saw either the printed work
  really or we get an official copy by our library. Hence you should also be able
  to get the work in a library, at least in those we used (UB Frankfurt or ULB
  Darmstadt).
  BibWeb/[PDF/] :- The source might be printed, but we read only the
  electronic version (PDF or other type of format), offered by and over the
  net of our university libraries (UB Frankfurt or ULB Darmstadt).
  FreeWeb/[PDF/] :- We read the electronic version offered by the
  free web. In this case we add the url Please note: Long urls often
  destroy the pleasing appearance of a text because it's difficult to wrap the
  lines acceptably. Hence we wished to make it easier for LaTeX to do this job.
  Therefor we sometimes split the urls and inserted blanks. So you have to erase
  all blanks if you want to verify our urls. and the date when we downloaded /
  saw the text.
itemize
Some Widespread Open Source Myths
From the viewpoint of an internet student we have to consider that the web
offers a mass of rumors concerning the nature of open source software
(Licenses). Here are some of the myths[At least one time even a
scientific legally discussing book is talking about the myth around open
source licenses -- although only as part of  the title: cf][1ff,
especially 209ff]GuiOvd2006a we met:
 
BE CAREFUL: THIS SECTION MUST THOROUGHLY BE REVIEWED AND REWRITTEN. 
IT'S ONLY AN OUTLINE!!! Do not quote part of it. It must be verified.
description
  [open source tries to improve the world ethically] :- No, there's a clear
  ban to exclude persons, groups, purposes. Thus, there is no chance to exclude
  anyone from using open source software because he is an ethical or moralic
  malefactor.
  [Changed open source software must be re-published] :- No, in a double
  sense! There are OS licenses which allow the proprietarization of the
  modified code. And even the LGPL and the GPL, which clearly try to prevent
  the proprietarization, do not require generally that a modified code must be
  (re-)published. Only if you give your modfied (L)GPL licensed application as
  binary to anybody, then you have to handover the modified code, too.
  [Modified open source software must be given back to the whole community]
  :- No. Again, there are OS licenses which allow the proprietarization of the
  modified code. And even the LGPL and the GPL -- which clearly require, that you
  also publish the modified code, if you give the modified binary to anybody --
  do not require that you distribute your modification around the world. LGPL and
  GPL clearly say that you have to hand over the code to those persons you
  give the binary to. And if you only give your improvement only one person or a
  group of persons, then you must handover your code only to that persons or
  only to all members of that group.
  [Published open source software is open for ever] :- No, if this myth
  says that also all future versions will have to be distributed under an open
  source license. The copyright holder ever holds the copyright. They can change
  the licence of next release of its software -- but only for the following
  release, not for the current or for former versions. Those releases, which
  already have been distributed under an open source license, indeed remain
  open.
  [Software can either be open source software or proprietary software] :-
  No. The copyright holders themselves can additionally distribute the code
  under other conditions when ever they want to do it. That's not a question of
  the licence, but of the copyright.  
  [The opposite of open source software is commercial Software] :- No.
  First, you are also allowed to use the open source software in any commercial
  purpose. There's only one point which is excluded in OSS: you are not allowed
  to ask for a licence fee if you distribute 'open source software'. Second,
  there are many other forms like freeware, public domain software or anything
  else which is neither open source software nor Commercial Software. It's
  pointless to take the question of money as a criterion for distinguish open
  source software and its opposite. Moreover: Proprietary Software as opposite
  of open source software should be defined ex negativo: all kind of software,
  which does not fit the OSD is proprietary.
  [open source software prohibits to earn money] :- No, you are allowed to
  invent each business model you want. There's only one exception: you are not
  allowed to ask for a licence fee if you distribute open source software. This
  limitation is based on the open source definition which clearly states that a
  license -- which wants to become an open source license -- shall not
  restrict any party from selling or giving away the software as a component of
  an aggregate software distribution containing programs from several different
  sources and that the license under this circumstances [] shall
  not require a royalty or other fee for such sale[cf.][§1]OSI2012a.
  If you combine this constraint with the requirements that an open source
  license [] must not restrict anyone from making use of the
  program [][cf.][§6]OSI2012a and that it []
  must allow distribution in source code as well as compiled form
  [][cf.][§2]OSI2012a, you can generally conclude that none of
  the open source licenses may require a fee for using and/or distributing the
  program. But being paid for the service to install the program, to collect
  and compile a customer specific version, and/or to monitor the environment is
  of course not excluded by this condition.
  
  Historically this mistake might be evoked by Debian: The GNU project missed
  its kernel while the Linux kernel was already distributed as part of
  collections which also include GNU software. Then, in 1983? Ian Murdock was
  supported by RMS and its FSF to build a really free distribution (Debian)
  containg GNU software and the Linux kernel. But Ian Murdock states also, that
  Debian does not want to earn money.
  [Modifications of open source software must be marked] :- No. This is not
  a defining postulation of the OSD. The OSD allows licenses to require the mark
  of modifications. But it does not require from all licenses to require the mark
  modifications for being an open source license.
  [Modifications of open source software must be marked by your personal
  data] :- No, it is only required to mark modifications so that a reader could
  distinguish the modifications from the original code. It's required for saving
  the integrity of the original author. And therefore it is not required as a
  constitutive criterion by the OSD. It might be that a license additionally
  requires your name. But that is not feature of open source software in general.
  And at least the licenses discussed by us do not require to insert your name.
  [The open source Definition determines the conditions to use open source
  software] :- No. The Open Source Definition determines which licenses
  are open source licenses, nothing more. The OSD is a set of necessary
  conditions to be an open source license. It determines the freedom and the
  responsibilities of a user as a set of more or less abstract rules. But it
  does not constitute a set of sufficient tasks which a user has to perform for
  fulfilling any open source license. Open source licenses may differ by
  instantiating the OSD criteria. So, if you want to know what you have to do to
  fulfill a license, you have to go back to the real license of that software
  you are using.
description
quoteThis section outlines reflections by which
we initially focused ourselves on the question why we need an OSLiC and how its
content and form should be derivated from these needs.
quote
Why
Do we need another book about open source? Do you need another book about
open source software? Let us address this question from the viewpoint of what we
already know, what we instinctively believe and what we may have heard. For
example you may presume one or more of the following statements are correct. Or
you may even have experienced similar perceptions from your peers or managers.
Or you have been told they describe 'open source':
itemize
  The Open Source Definition offers rules to use open source software.
  Modified open source software must be published.
  Modified open source software must be given back to the community.
  All generations of open source software will remain open for ever.
  Software can either be open source software or proprietary software.
  The opposite of open source software is commercial software.
  open source software prohibits to earn money.
  Modifications of open source software must be marked explicitly.
  Modifiers of open source software must identify themselves.
  When distributing an open source binary it’s enough point to a download
  page to obtain the source code.
  The aim of open source software is to improve the world ethically.
  open source software is viral and infectious.
itemize
Do these conceptions sound familiar to you? Unfortunately, whatever we might
believe or wish for, these concepts are incorrect. Naturally we will discuss
this issue later on. For the moment let us assume they are indeed
incorrect For those who want directly verify our argumentation, we have
generated a condensed summary of the arguments and citations. You can find this
summary in our appendices..
So, again: Do we need another book about open source software? We,
that is -- in this case and at least initially -- the large German company
Deutsche Telekom AG. Arguing from the perspective of a large company
requires not only identifying the common misconceptions, but catering for the
unique needs of a large Enterprise. And indeed the very size of the company
brings its own problems.
Large companies use more open source software in more varied contexts than small
companies. There is an important question that every company should ask:
'Are we sure that we respect all those requirements of open source
software we have to respect?'. But large companies cannot answer this question
as easily as small companies: the large number of diverse open source
deployments in different contexts mean that case by case governance, a model
that may work in small concerns, is far from appropriate for our needs. This
leads to wasting both time and money. Further, the chances of success are small:
training at least one employee in each software team as an open source software
License expert is unrealistic in terms of cost-efficiency and reliability.
Nevertheless even large companies want to and try to fulfill the rules of open
source software thoroughly -- especially Deutsche Telekom AG. When this
company realized that the question Are we sure that we respect all those
rules of open source software correctly which we have to respect could be
problematic, it directly asked some of its employees known as open source
enthusiasts to establish a service and a process for answering this question.
So, it is no surprise that we, the initial authors of this Open Source
License Compendium, were asked by our employer Deutsche Telekom AG.
Naturally we were proud to work on an open source topic officially. But while we
were doing our job we had to ask ourselves if we perhaps needed another
book on open source. Our answer was Yes, we do! Let us shortly explain,
why:
First, we already knew that there exists supporting software. These
meta-programs take the code of any other application and try to list those
open source components being 'covered' by that application As general
examples let us mention Palamida (http://www.palamida.com/) and
BlackDuck (http://www.blackducksoftware.com/).. But we had also
already realised that this supporting software did not always match the way we
thought the problem should be solved. Second, we recognized fairly quickly that
we need a reliable guide. We personally were asked to give the ok for
projects of our company. We could not answer such requests on the base of
'Oh yes, I read this in the Heise-Ticker a few days ago' -- even
if the Heise-Ticker had described the situation completely correctly. We
ourselves had to be more reliable than this But of course, we have to
do ourselves the honor of conceding that we -- like many many other German open
source enthusiasts -- love using the Heise-Ticker as main IT information
source. Unfortunately, its reputation is stil not high enough that its news can
directly be cited.. Naturally we already knew a great deal about open source
software. Even so, our knowledge was not as systematic as necessary. We looked
for an open source compendium which adequately described what a project or
product development team had to do to fulfill the criteria of its open source
licenses. We wanted to use that compendium to the basis of our recommendations.
We were very thorough but we did not find what we were looking for. Our 'little'
bibliography attest our seriousness. What we found was a lot of information
releated to individual issues spread over many sources. We did not find answers
to our question even in the specific literature. Let us describe three little
steps to increase the understanding of the issue:
Without open source licenses there is no open source movement. Nevertheless in
dealing with open source licenses, this is sometimes neglected. Take the
Apache Web Server as an example: No doubt, it is one of the most important
pieces of open source software To prove that the Apache is
really a piece of open source software one must execute a set of steps: First,
you have to note, that Apache is something like a meta project, covered
by the Apache Software Foundation, also known as ASF (cf.
http://www.apache.org/, wp). Thus, you can not directly jump into
the Apache License. First of all you have to visit the project site (cf.
http://httpd.apache.org/, wp) even if at the end its license link
leads you back to the general Apache License sub site (cf.
http://www.apache.org/licenses/, wp) which announces, that all
software produced by The Apache Software Foundation or any of its projects or
subjects is licensed according to the terms of the documents listed
below. Only now you can use the offered link for switching to the
Apache License, Version 2.0, if you want to check your rights and duties.
But that is difficult. There does not exist any simple list what you have to do
for fulfilling the license. Even the faq (cf.
http://httpd.apache.org/docs/2.2/faq/, wp) -- meanwhile being moved to
a wiki -- only says that the server [] comes with an unrestrictive
license and that you are allowed to put the code on a CD (cf.
http://wiki.apache.org/httpd/FAQ, wp). Hence, from the viewpoint of
the ASF the license itself shall answer all questions. [Reference download for
all urls: 2011-08-31]  with a specific license[cf.][
wp]AsfApacheLicense20a. Moreover: the success of the open source movement
in the commercial world depends directly on the decision of IBM to replace its
corresponding own component in the IBM WebSphere Application Server
with the free Apache Web Server[cf.][287ff]Moody2001a.
Meanwhile many companies use the Apache Web Server to act as a web
provider. Currently the Apache http server -- as it has to be named
correctly -- is used more than twice as much as all the other http server
software together[cf.][wp]Netcraft2011a. Hence many business
models depend on the Apache License. Another aspect is that even the famous
Apache Cookbook, which explains the installation, the configuration, and
the maintainance of an Apache Web Server in details[cf.][et
passim]CoaBow2004a, does not mention anything about the license which allows
for installation, configuration and maintenance. Neither the index lists the
word 'license'[cf.][245ff, esp. p. 250]CoaBow2004a, nor the chapters
'Installation'[cf.][1ff]CoaBow2004a or the chapter
'Miscellaneous'[cf.][219ff]CoaBow2004a mentions the license question
in a serious way. There's only one short hint as to the advantage of open source
software, i.e. that everybody is allowed to install it[cf.][1: 
einer der Vorzüge von open source software besteht darin, dass
jedermann die Erlaubnis zur Erzeugung eines eigenen Installationskits hat
]CoaBow2004a. Can you be sure that you are allowed to do what you are
doing on the base of such a phrase?
Naturally, the Apache Cookbook is not a book for lawyers, it is a book for
administrators and developers. They do not want to get bogged down by
legalities, they want to set up an Apache Web Server as fast as possible and get
down to work. Indeed, the Apache Cookbook offers a good support. But not only as
a company you have to ask yourself whether you are really allowed to do what you
are doing. Can you find the answer in the Apache Cookbook? No. Can you
find it in the license itself? Yes, but it is difficult And do we
really want our developers and maintainers to read the original licenses? Do we
really want them to discover that they also have to check the licenses of the
used modules?. So again: Can you find your answer in another book, which is
Amazon's current top recommendation for the search term 'apache
server' Tested on http://www.amazon.de/ at 2011-08-31.? Not
really: Sascha Kersken's Apache 2.2 Handbook offers a license chapter, but it is
only two pages long[cf.][111f]Kersken2009a. Moreover, the rights and
duties are condensed into just 5 bullet points which taken together do not
explain when the software and the license have to be handed over to a customer
and when you are allowed to hide your
improvements[cf.][112]Kersken2009a.
This brings us to the question of what prevents us from using something like a
'general license cookbook' which explains all the necessary details and
which offers  quick access to the relevant points:
Of course we also browsed the internet. At least for German speaking people
there is an excellent site concerning the topic open source licenses.
offered by iffross, which, loosely translated, means an
Institute for Legal Aspects of the Free and open source
software originally: Institut für Rechtsfragen der Freien und
open source software. Main entry point for its site is the URL
http://www.ifross.org/., founded in 2000 as a private institute to
track the phenomenon 'free software' from the viewpoint of (German)
lawyers[cf.][wp]ifross2011b. Besides many other
aspects this site offers a very well and thoroughly elaborated
FAQ[cf.][wp]ifross2011c and a large list of open
source licenses and other related licenses: moreover, evidently it is
classifying the open source licenses in those 'without copyleft-effect' (BSD),
in those with 'strict copyleft-effect' (GPL) and in those with 'restricted
copyleft-effect' (LGPL)[cf.][wp]ifross2011a.
However, even this excellent site does not fulfill our needs. It does not offer
those context specific to-do lists which companies, developers or project
managers can use to ensure their open source software is used in a regular
manner.
We therefore evaluated that standard book which is listed in the most legal
bibliographies at least in that German judicial literature dealing with
open source: the book of Jaeger and Metzger which concerns -- loosely translated
-- the judicial framework requirement for open source
software[cf.][V -- It can not be any surprise that both authors,
Mr. Jaeger and Mr. Metzger are members of ifross (cf.
http://www.ifross.org/personen/, wp)]JaeMet2002a. Even the most
earliest edition of this book already had a clear structure in its chapter
'copyright': For each license mentioned (or at least for each license cluster)
it offered a subchapter for the rights and a subchapter for the
duties[cf.][30ff]JaeMet2002a of the software user[For
getting a good survey of the structure and the line of thought see the contents
cf.][VIIIf]JaeMet2002a. Many other important aspects of the topic
open source are discussed, too[pars pro toto: have a
look at the chapter concerning the liability: cf.][137ff]JaeMet2002a.
But we needed more than this. Despite the quality of the book we were certain
that we could not hand over this book to our programmers with the recommendation
check your touched licenses and follow the instructions of the relevant
subchapters. This book did not contain simply checkable to-do lists,
neither in the first edition[cf.][VIff]JaeMet2002a and in the second
edition[cf.][VIIff]JaeMet2006a nor in the recently published third
edition[cf.][VIIIff. Naturally we use this latest edition for adopting
or discussing systematical aspects]JaeMet2011a. So, how can a company or a
developer or a project manager be sure of fulfilling the requirements of the
open source licenses sufficiently if he/she does not have a verified list
telling him 'do this, and in case of that, do that, and finally do also
this'? Why should he himself implicitly become an open source licenses expert
who has to extract the necessary steps out of the literature?
While we were searching for an existing open source compendium, we found an
article with the title 'Compendium for the Publication of open source
software' approximately translated. It aims to be a 'pragmatic
guidebook' and an 'assistance' for 'publishing software under the conditions of
an open source license'[cf.][166f (originally: ein
pragmatischer Ratgeber zur Veröffentlichung einer Software
unter den Rahmenbedingungen einer Open-Source-Lizenz) ]BreGlaGra2008a.
Moreover, at the end of this article, its authors formulate ambitiously that
their 'guide' should be carried out, section by section -- for getting a legally
water tight process of publishing open source software[cf.][186
(originally: ein Ratgeber, der es erlaubt  () die zu
berücksichtigende Aspekte (strukturiert abzuarbeiten) ()  und einen
rechtlich nicht angreifbaren Veröffentlichungsprozess zu
ermöglichen) ]BreGlaGra2008a.
The authors of this article describe something close to what we were looking
for. Indeed, the article lists important aspects which have to be taken in
consideration if you want to deal open source software correctly: It announces
that no obligation exists to publish code either if you embed GPL code into your
proprietary code or if you modify the GPL code. It is only if you hand over your
binary to other persons that you have to distribute the code too, but only to
them and not to the general public[cf.][170 and 181]BreGlaGra2008a.
Additionally the articles explains exactly that software -- at least in Germany --
can only be acknowledged as open source software by transferring the rights to
use -- the 'Nutzungsrechte' -- to other people, while the copyright itself
-- the 'Urheberpersönlichkeitsrecht' -- is not transferable and belongs to
the author[cf.][173]BreGlaGra2008a. Moreover, besides other aspects
the articles briefly and deeply discusses the problem of the No-Warranty-Clauses
which are not valid in Germany and which will therefore automatically be
replaced by the liability rules for a
donation[cf.][177]BreGlaGra2008a. And last but not least this article
actually summarizes the idea of Copyleft and the differences between LGPL and
GPL[cf.][181]BreGlaGra2008a.
However some gaps remain. The article does not analyze in which cases a
University or a company perhaps must publish its developments based
on open source software. It does not discern between different licenses
and conditions. It also does not discuss what Universities or companies,
which (re-)use and/or distribute open source software (internally), must do to
fulfill the touched open source licenses. And finally this article
does not offer the step by step list as promised.
We did, however, feel supported by this article, in two ways. First, it was a
well written summary of some main problems. Second, it stated the necessity to
have a compendium for being able to establish a legally 'water-tight' process of
publishing open source software[cf.][186]BreGlaGra2008a. We
seemed to be justified in our assumptions. But the open source compendium we
were looking for had to be more practical, more processable, more distinguishing
and more elaborated.
So again: Did we need a new book about open source software? We had looked for a
reliable integrated open source compendium. But we found separate pieces of
information and -- as we know today -- some rumors. Our answer was clear:
naturally we did not need a new general book about open source. But what was
lacking was a description of what responsible developers, project managers or
product developers require to fulfill open source licenses. We needed an
Open Source License Compendium.
At the best such an Open Source License Compendium would contain a set
of simply to process 'For-Fulfilling-The-License-To-Do-Lists'.
Additionally it should offer an intuitively user-friendly search option for
these lists. In any case, it should share developers and project managers the
effort of having to become open source license experts. For the other users, it
should also clearly explain why one has to do this and not that. Hence a
reliable Open Source License Compendium should not only list what one
has to do, but should offer both, thoroughly verified reliable details and
clearly condensed guidance.
Although we did not find such an open source compendium we were familiar with
the spirit of the open source community. Hence we followed one of its most
simple rules: 'what you miss you must develop on your own'. Some
principles should help us to achieve our targets:
description
  [To-do lists as the core, discussions around them]: Our work should be
  split into two parts. As its core we wanted to offer a
  set of to-do-Lists. Each of these lists should be relevant to one specific
  open source license and should be clustered by the open source specific use
  cases. Around this all those aspects of open source software which influence the
  interpretation of the licenses and the rules core should be precisely
  characterized. Nevertheless, the users should be able to skip
  details and go directly to the section they require.
  [Quotations with thoroughly specified sources]: Even if our users should
  not be obliged to read every part of the compendium they should not be
  required to believe us. We wanted to be revisable. Because our sources and our
  conclusions should be easily verifiable, we decided to use the academic
  citations and list bibliographic data extensively on the basis that our task
  should be to collect information, not to invent new 'facts'.
  [Not the internet alone, also books and articles]: We wanted to go back
  to the originals even if the internet was full of more or less modified
  copies. We wished to get reliable facts and descriptions. Therefore we decided
  to evaluate not only the internet but also scientific sources -- for example --
  offered by university libraries.
  [Not clearing out the forest land, but cutting out a swathe]: Even if we
  had to deal with licenses and their legal aspects we did not want to get lost
  in detailed discussions. It should not be our task to find out whether a
  specific kind of handling would still be legal or already forbidden.
  We did not want to fight against the licenses. We did not want to stretch
  their ambit or to test their boundary. We wished to accept open source
  licenses as they are: rules written from developers for developers. And even
  if some parts of these licenses would not be valid with respect to a legal
  system[And indeed for example for the GPL one can argue in this way:
  Even if you take the GPL as a contract of the type 'donation' respectively
  Schenkung, it is presented in the form of AGBs respectively
  Allgemeine Geschäftsbedingungen and must therefore follow the
  general AGB rules.'Regrettably' in Germany these general AGB rules do not
  allow to exclude each type of warranty. If we follow Oberhem, §11 and §12 of
  the GPL must be invalid in Germany because of these general AGB rules.
  Moreover, for Oberhem even §5 -- the important clause of the GPL by which you
  can only get the right to use and to distribute GPL software if you respect
  the rules of the GPL -- seems also to be invalid respectively
  unwirksam. But the good message is that the GPL as whole is not
  invalid even if it contains invalid clauses.][128, 133ff, 150ff, esp. 146,
  159]Oberhem2008a, we wanted to take them as our guideline -- at least while
  they do not violate more general laws what they clearly do not do!.
  We simply wanted to find one proven way to cross the maybe slightly
  unsure forest of open source licenses. Even if indeed some clauses of the
  licenses finally were not enforceable against us we wanted to respect them
  'voluntarily'. We wanted to deliver a set of rules which support users and
  remove the possibility of becoming involved in license disputes with open
  source developers or the Free Software Foundation.
  [Take the text seriously]: On the other side we wanted to take our
  license texts as they were. If they lacked anything[The systematical
  underdetermination of licenses is a problem being also known in the open
  source respectively Free Software movement. Following the biography of RMS his
  main judicial counselor Moglen has stated, that there is uncertainty
  in every legal process ()  and that it seemed to be silly to try
  () to take out all the bugs (). Nevertheless -- so
  Moglen resp. Williams -- the goal of Richard Stallman was the complete
  opposite: He tried () to remove uncertainty which is
  inherently impossible. But -- and that's the nub of this analysis --
  Moglen had to follow Stallmann because of RMS character. And he had to
  summarize their work so, that () the resulting elegance (of the
  GPL; KR.), the resulting simplicity (of the GPL; KR.) in design almost
  achieves what it has to achieve. Hence we are asked to take the license
  texts themselves seriously. cf.][177f]Williams2002a, we would interpret the
  open issues in the spirit of the open source idea. But where the text was
  clear and definite we wanted to take its propositions as a definite decision --
  even if that meaning stood against well known open source 'facts'.
  [Trust the swarm]: We did not want to use our own research alone as a
  basis. We knew that the swarm is ever stronger than a set of some randomly
  selected experts. Therefore we decided to publish our text as a still
  unfinished work, starting with an early release 0.2. And then we wanted to
  invite the community to complete the compendium together with us. We would
  elaborate our open source compendium as a set of LaTeX- and BibTeX files which
  could be developed and managed in GIT or any other version control system. And
  finally we would publish our text under a Creative Commons Attribution-Share
  Alike German 3.0 license, to allow other people to correct us, to help us or
  even to take our results for their own purposes.
description
And so we did. Here is the result. Feel free to use it -- according to our
licensing.
What
Now we can briefly explain how one should be able to use the compendium:
description
  [The Same Idea, Different Licenses] :- Here you will find background
  information to help you interpret open source licenses in the sense of the
  Free Software movement[At least at this place you are perhaps
  expecting that we use the logograms FLOSS, F/OSS, F/LOSS, or whatever. As you
  will read later on the word Free is ambiguous and has strained the
  use of the concept Free Software. Later on we will also talk about
  the invention of the concept open source designed as a 'replacement'
  and acting as a 'splitter'. The mentioned logograms are introduced to
  re-establish or -- at least -- to underline the common history and the common
  center of 'both' movements, whereby the word Libre shall resolve the
  ambiguity of the word Free. For a first survey cf.] [
  wp]wpFloss2011a, the open source software movement[For
  another brief and informative introduction cf.][231ff esp. p. 
  232f]Fogel2006a, or the GNU-Project  We ourselves will stay with the
  concept open source because the OSD specifies the scope of our
  analysis. But we do it with a deep obeisance to Stallmann and the FSF -- even
  if we know that this will not protect us from the thunderbolt of RMS.. We discuss
  different ways to cluster open source licenses. Finally we present our own
  taxonomy based on the labels 'protecting the developer', 'protecting the
  licensed code' and 'protecting the on-top-developments'. If you are familiar
  with the methods of grouping different open source licenses and particular
  if you know that you can not authorize your doings on the base of descriptions
  of such license groups, then it is enough, in order to understand our line of
  thought, to briefly note our taxonomy and its wording.
  [The Problem of Derivated Works] :- This chapter is important. In the
  spirit of software developers we try to explain which kinds of programming
  evoke a derivated work and which not. Our to-do lists will refer to this
  analysis.
  [The Problem of Combining Different Licenses] :- You should
  not ignore this chapter. We will explain why and how combining software
  of different licenses is not as dangerous as it is often told. The results of
  this chapter influence the structure of our to-do lists.
  [open source software and Money] :- Here we will shortly
  discuss ways in which money is no problem. If you already know that it is only
  prohibited to require payment for the act of licensing a piece of open source
  software to second or third parties and if you already know that this is only
  forbidden by some licenses, and not by all, than you can postpone the reading
  of this chapter.
  [The Problem of Implicitly Freeing Patents] :- Here we
  will illuminate some aspects of software patents and how the are handled by
  some open source licenses. You should know what licenses implicitly do with
  your patents. But it is not our intention to write a software patent
  compendium.
  [Open Source Use Cases as Principle of Classification] :- This is an
  important chapter. We explain our categories 'Use as it is', 'Modify the
  Code', 'With Redistribution', 'Without Redistribution', 'Isolated Initial
  Development', 'On-Top-Development': we develop and discuss our taxonomy with
  respect to the side effects of 'combining different licenses' and 'generating
  derivated works'. This taxonomy will determine the following chapters.
  [open source licenses: Find Your Specific To-do Lists] :- This is a kind
  of summary which joins the relevant aspects and elaborates the 'finder
  for your to-do lists'. This is the chapter which you probably will reuse
  frequently, even if you do not want to read any of our explanations.
  [open source license Fulfillment: Classified To-do Lists] :- This chapter
  offers all classified to-do lists. The structure of its subchapters will
  match the structure of our finder and the structure of our taxonomy.
  [open source licenses and Their Legal Environments] :- Here we discuss
  why using open source software in a regular manner is not only a question of
  the licenses themselves but of the kind of the surrounding legal system.
  [Appendices: Some Widespread Open Source Myths] :- Here we make good on
  our promise to explain why all the propositions mentioned at the beginning of
  this chapter are wrong. You might read this chapter as a special introduction
  or a reminder epilogue whenever you want to do.
description
Form [only to demo our lib style. will be replaced]
itemize
  first initially quoted book [cf.][123ff]Grassmuck2002a
  (expected: complete bibl. data) using LaTeX footnote
  second initially quoted book[cf.][120 (expected: complete bibl.
  data)]Fogel2006a using jurabib footcite (same
  appereance)
  initially mentioned collection /
  proceedings [cf.][123ff]DjoGehGraKreSpi2008a (expected: complete
  bibl. data)
  first initially mentioned article in an initially mentioned collection /
  proceedings [cf.][123ff]Spielkamp2008a (expected: complete
  bibl. data of article, short title data of collection) using LaTeX
  footnote
  second initially mentioned article in an already mentioned collection
  / proceedings[cf.][123ff (expected: complete
  bibl. data of article, short title data of collection)]Kreutzer2008a using
  jurabib footcite 
  rementioned book [cf.][120]Fogel2006a (expected: short
  title)
  directly rementioned same book same
  page [cf.][120]Fogel2006a (expected: id., ibid, / ders.,
  ebda.,)
  directly rementioned same book different
  page [cf.][121]Fogel2006a (expected: id., lc., / ders.,
  a.a.O.  page)
  rementioned collection article [cf.][120 ]Kreutzer2008a (expected: short
  title)
  directly rementioned collection article same
  page [cf.][120]Kreutzer2008a (expected: id., ibid, / ders.,
  ebda.,)
  directly rementioned collection article different
  page [cf.][121]Kreutzer2008a (expected: id., lc., / ders.,
  a.a.O.  page)
itemize
Erzähltopos für Open Sourcewerke: Mit GPL als Prototyp
Three things constitute the topos to tell 'Open Source':
enumerate
  First,  one highlights the increasing importance opne Open
  Source [cf.][1ff]Oberhem2008a.
  Second, one tells the genesis of open
  source [cf.][9]Oberhem2008a and discusses the meaning of some
  general concepts [cf.][6ff and 17ff]Oberhem2008a
  And last but not least one explains the Open Source
  Definition [cf.][10ff]Oberhem2008a
enumerate
The next - and as I want to say: wrong - step of the line of thoughts is often
the focusing on the GPL: This license is declared as Grundtypus
and is therefore taken as the core of the license
discussion [cf.][33]Oberhem2008a, sometimes additionally
underlined by the comment, that differences between GPL version 2 und GPL
version 3 are discussed in the footnotes [cf.][34]Oberhem2008a.
This kind of reflecting the Open Source licenses is supported by the hope, that
talking about the GPL covers all other cases. That's invalid.
Unmittelbare Folgereferenz [cf.][S.2]Oberhem2008a.
table
History of the Open Source License Compendium
center
tabularrcp9.4cm
    2014-03-09
  & 0.99.1
  &  Generate data file for use in OSCAd from the source
   Fixed Bug in LGPL C9 Case 
   general copy-editing of chapter 6
    2014-01-08
  & 0.98.2
  &  New section about the patent clauses in the CDDL
   hyperlinked PDF file (using hyperref and pdftex)
   general copy-editing of chapter 1 to 5
    2013-11-27
  & 0.98.1
  & minor improvements for having a stable release for the Korean FLOSS
  conference
    2013-08-19
  & 0.97.2
  &  incorpation of the typo fixes offered by M.
    Schierl
   some improvements concerning the derivative work
   enhancing that the OSLiC deals with prototypic cases
    2013-07-28
  & 0.97.1 
  & W7 pre release
     indirectly used secondary literature added
     LGPL specific finder improved
     OSCAd aligned, interface improved
    2013-05-20
  & 0.96.1 
  & Linux Days release
     open source use cases and licenses specific usecase renamed
     version matches the content of OSCAd
    2013-04-15
  & 0.95.2 
  & FSFE LLW post release
     to-do lists for nearly all popular OSI licenses
     improved finder for GPL and EUPL
     simplified form and improved structure of the OSLiC finder
     branches merged and new master published
    2013-04-05
  & 0.95.1 
  & FSFE LLW pre release
     to-do lists for all permissive and all weak copyleft licenses
     branches merged and new master published
    2013-03-15
  & 0.94.1 
  & Chemnitzer Linux Day release
     to-do lists for all permissive and some weak copyleft licenses
     branches merged and new master published
    2013-03-08
  & 0.90.1 
  & CeBIT release
     to-do lists for the some important licenses added
     branches merged and new master published
    2013-02-16
  & 0.8.90 
  & CeBIT pre release
     new arguing structure focused on the topic license fulfillment
     new classifying license review
     new top down introduction
    2012-12-28
  & 0.8.0 
  & internal EOY release
     many distributed improvements unified in branch kreinck
    2012-08-25
  & 0.5.2 
  & expanded break through release
     MIT license fulfilling to-do lists
     using integrated Eclipse spell checking methods
    2012-07-06
  & 0.4.0 
  & break through release
     open source use case definition and taxonomy
     open source use case based general finder
     corresponding BSD specific mini finder
     BSD license fulfilling to-do lists
    2012-03-22
  & 0.2.1 
  &  framework published as first community edition
    2012-01-31
  & 0.1.8 
  &  renamed existing introduction as prolegomena
     inserted a shorter top-down written introduction
     inserted an OSLiC disclaimer
     many bibliographic data added
    2011-09-29
  & 0.1.4 
  &  document history integrated
     improvements of John integrated
    2011-09-12
  & 0.1.0 
  &  introduction completed: purpose and methods 
tabular
center
table
This book shall be thoroughly developed---together with the open source
community. At the end it shall deliver reliable information. But nevertheless,
the  can not offer more than the opinion(s) of its authors and
contributors. It is only one voice of the chorus discussing the open source
licenses. For protecting the authors and contributors from charges and claims of
indemnification we adopt the lightly modified GPL3 disclaimer:
, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE TEXT “AS IS” WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE  IS
WITH YOU. SHOULD THE  PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR OR CORRECTION.
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY
COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE  AS
PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE  (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED
INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE
 TO COOPERATE WITH ANY OTHER TOOLS), EVEN IF SUCH HOLDER OR OTHER PARTY
HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
Particularly, it must be highlighted that - referred to your solitary
case - the  can not and shall not replace a legal review or a legal advice
by lawyers. The  is only dealing with prototypic use cases. So, it may
inspire developers, managers, open source experts, and companies to find good
solutions which they finally should let be reviewed by legal
counselors. 
*Roadmap for Release 1.0 
footnotesize
itemize
  Insert task lists for AGPL, AL, AFL, CDDL, MPL-1.[01], MS-RL, OSL
  
  Improve / complete the exposition of the concept of a derivative work
    in the context of software development
  Important: Explain how to deal with modifications that transform
    a proapse into a snimoli and vice versa.
  Discuss license compatibility
  Explain the relationship between open source and earning money
  Improve the chapter concerning myths about open source
  Replace / erase the prolegomena appropriately
  Rewrite the BSD discussion at the end of the task list 
  Review the PHP discussion at the end of the task list
  Review the PostgreSQL discussion at the end of the task list
  Incoporate the secondary literature which has indirectly been used
  Update the literature list
itemize
footnotesize
